<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.1.4" created="2013-07-17 05:42" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>Higher-Order</title>
	<link>http://blog.higher-order.net</link>
	<description>topics: functional programming, concurrency, web-development, REST, dynamic languages</description>
	<pubDate>Wed, 17 Jul 2013 05:42:56 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://blog.higher-order.net</wp:base_site_url>
	<wp:base_blog_url>http://blog.higher-order.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>karl.krukow@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>krukow</wp:author_login><wp:author_email>karl.krukow@gmail.com</wp:author_email><wp:author_display_name><![CDATA[krukow]]></wp:author_display_name><wp:author_first_name><![CDATA[Karl]]></wp:author_first_name><wp:author_last_name><![CDATA[Krukow]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.1.4</generator>

	<item>
		<title>Designing client/server web-applications</title>
		<link>http://blog.higher-order.net/2008/02/18/designing-clientserver-web-applications/</link>
		<pubDate>Mon, 18 Feb 2008 18:23:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/02/18/designing-clientserver-web-applications/</guid>
		<description></description>
		<content:encoded><![CDATA[This particular entry will be the first in a series concerning some recent thoughts I've had about designing so-called 'rich' web-applications, which I will be thinking of as any distributed client/server application that have the following properties:
<ul>
	<li> client and server communicate using HTTP</li>
	<li>client is developed in JavaScript (GUI is made using CSS+HTML) and runs in an ("<a href="http://developer.yahoo.com/yui/articles/gbs/">A-grade</a>") browser</li>
</ul>
The series will cover a range of topics which should span all aspects of developing such an application. At present the topics are:
<ul>
	<li>Patterns for client application design using Ext JS [JavaScript namespacing, module patterns, inheritance in JavaScript, Model-View-Controller in web clients, Observer pattern]</li>
	<li>file organization, the build process and proper serving [splitting and building JavaScript programs, static checking,  automated unit testing, JS 'compression', building and serving]</li>
	<li>the RESTful server [designing RESTful backends to JS clients, Ruby/Rail implementation]</li>
</ul>
Throughout the series I will be developing a mini application called TriBook. The application is for booking meeting rooms at Trifork; it is developed using the JavaScript library Ext JS and Ruby on Rails for the server.

<a name="Namespacing"><span style="font-weight: bold;">Part I, Section (i): </span>JavaScript namespacing.</a>

The <span style="font-weight: bold;">WHAT</span>:

Everyone knows that variables declared at the top level are global, e.g.,
<pre>function trim(str) {  return str.replace(/^\s+|\s+$/g, "");}</pre>
is globally accessible using the name <span style="font-family: courier new;">trim</span>. When a page is including scripts from different sources that the page itself may not have control of, there is a chance of one script overriding the value of another's variables (the value of PI may indeed change!). Namespacing together with naming conventions significantly reduce the probability of such unintended script interactions.

The namespacing conventions I will be following attempt to mimic packages in Java.  A package name is a name of the form: x.y.z... with "x" the top level name of an organization, "y" the organization's domain and then one or more subdomains or application identifiers. Package names are lowercase characters. In the example application, I will be defining JavaScript objects that "live" in the following package: com.trifork.tribook.

Now, "hold on!" you may say, continuing: "JavaScript doesn't have namespaces or packages". While the is true, we can achieve something close using just objects. Many JavaScript libraries support some sort of a namespace function. For instance, Ext JS has the <span style="font-family: courier new;">Ext.namespace</span> function. The statement

<span style="font-family: courier new;">Ext.namespace('com.trifork.tribook');</span>

ensures that there exists a global variable <span style="font-family: courier new;">com</span> which references an object that has a property 'trifork', which in turn has a property 'tribook'. So you can write

<span style="font-family: courier new;">Ext.namespace('com.trifork.tribook');</span>
<span style="font-family: courier new;"> com.trifork.tribook.Application = { ... };</span>

However, while many libraries have the 'namespace' function (or something similar), none that I am aware of have any additional support for actually using namespaces in JavaScript programs. (And this should be where this post hopefully gets interesting and new).

Supposing you are structuring your application by a kind of Model-View-Controller pattern [one way to do this will be the topic of a later posting!]. Naturally you are using namespacing, and you want an application structure with model, view and controller in district packages. In our example, we will have a package structure
<pre>com.
 trifork.
   tribook.
     model
     view
     controller</pre>
For example, the package <span style="font-family: courier new;">com.trifork.tribook.model</span> will contain a singleton object <span style="font-family: courier new;">Model</span> which contains the domain model of our application. We will develop our own namespace function which lets us define this layout in one statement:
<pre>namespace({
  com:{
   trifork:{
     tribook:['model',
              'view',
               'controller']}}});</pre>
Our <span style="font-family: courier new;">namespace</span> function is polymorphic in the sense that one can call it with one of several input types:

<span style="font-family: courier new;">namespace('com.trifork.tribook');</span>
<pre>namespace(['com.trifork.tribook.model',
 'com.trifork.tribook.view',  
 'com.trifork.tribook.controller']);</pre>
and the form shown above. It is important to note that <span style="font-family: courier new;">namespace('x.y')</span> ensures that <span style="font-family: courier new;">x.y</span> exists: if it does not exist, it is created, and if it already exists, it is left alone (implying that <span style="font-family: courier new;">namespace</span> is idempotent).

The <span style="font-weight: bold;">WHY</span>?

We'll get back to the <span style="font-family: courier new;">namespace</span> function later. Here we continue with another function: <span style="font-family: courier new;">using</span>.  This function lets us write code like:
<pre>namespace('com.trifork.tribook.model');

using(com.trifork.tribook.model).run(function(m){

    m.Room = function(room_name) {
      this.name = room_name;
       ...    
    };
});</pre>
The pattern: <span style="font-family: courier new;">using(exp).run(function(n){...});</span> applies the inner function (<span style="font-family: courier new;">function(n){...}</span>) to the result of evaluating the expression <span style="font-family: courier new;">exp</span>.

In our example above, the code defines a constructor function for the Room domain objects; this function is accessed as <span style="font-family: courier new;">com.trifork.tribook.model.Room</span> (similarly to what one would do in a Java packaged world).

Now, as we shall see in the next couple of paragraphs, there are several benefits to structuring code this way:

(i) As with all namespacing: we don't clutter the global object and we reduce probability of unintended collisions.

(ii) <span style="font-family: courier new;">using</span> can take several parameters and introduces short names for deep namespaces.
<pre>namespace('long.boring.namespace.deep.as.well.controller');
using(long.boring.namespace.deep.as.well.model,
  long.boring.namespace.deep.as.well.view).run(function(model,view) {

         ...
});</pre>
Not only is it easier to write <span style="font-family: courier new;">model</span> than: <span style="font-family: courier new;">long.boring.namespace.deep.as.well.model</span>; it is also more efficient.

(iii) If every JavaScript file in your filesystem organization of your application [and this will be a topic of a later posting] has the form:
<pre>namespace('xxx.yyy.zzz');

using(xxx.yyy.a,xxx.yyy.zzz).run(function(a,z){...});</pre>
Then two things are immediately clear to anyone reading the code (perhaps for the first time): (1) this file defines objects that live in <span style="font-family: courier new;">xxx.yyy.zzz</span>, and (2) the objects in this file depend on objects in the packages <span style="font-family: courier new;">xxx.yyy.a</span> and <span style="font-family: courier new;">xxx.yyy.zzz</span>. While you may not appreciate this immediately, I do believe that as JavaScript applications are getting larger and larger, we need all the help we can get in organizing the application (and I really think this benefit is useful).

(iv) private variables for free. In the statement:
<pre>namespace('x.y.controller');

using(x.y.model,x.y.view,x.y.controller).run(function(model,view,ctrl){

     function trim(str) {
        return str.replace(/^\s+|\s+$/g, "");
     }
     var PI = 3.14159;

     ctrl.Controller = {
           init: function(url) {
              model.Model.url = trim(url);
           },
           getPI: function(){return PI;}     
     };

});</pre>
The function <span style="font-family: courier new;">trim</span> is <span style="font-style:italic;">private</span> to the code defined within the function being "run". Hence the global namespace is not cluttered with functions that are intended to be used only locally. Also, no other script code can ever accidentally redefine PI, which sounds like a good thing ;-) (One may say that this structure lets one implement some of Douglas Crockfords patterns in a readable way!)

The <span style="font-weight: bold;">HOW</span>?
Ironically, when implementing namespace-using, I've decided <span style="font-style:italic;">not</span> to use namespacing! The reason for this is that while
<pre>Trifork.namespace('x.y');

Trifork.using(x.y).run(function(y){...});</pre>
reduces probability of collision, the non-namespaced version feels much more like a language extension; in:
<pre>namespace('x.y');

using(x.y).run(function(y){...});</pre>
It almost feels as though 'namespace' and 'using' are language keywords and not user-defined functions. It is like working in an extended JavaScript language that has packages and imports --  although I would have preferred something like:
<pre>namespace x.y.z;

import x.y as y and y.z, y.w in function(y,z,w){  ...  }</pre>
Implementing <span style="font-family: courier new;">using</span> is almost trivial:
<span style="font-family: courier new;">using(exp).run(function(v){..})</span> is (almost) equivalent to <span style="font-family: courier new;">(function(v){..})(exp)</span>. The full implementation is:
<pre>function using() {  
   var args = arguments;
   return {run:function(inner){return inner.apply(args[0],args);}};
}</pre>
(not that when running the inner function, 'this' is bound to the first argument of <span style="font-family: courier new;">using</span>).

The <span style="font-family: courier new;">namespace</span> function is more code, but relatively straightforward:

//Update: generalize array case to handle a mix of strings and objects via recursion.
//Update [June 11, 2008] Simplifications noticed by Aaron Gray, thx.
<pre>function namespace(spec,context) {
   var validIdentifier = /^(?:[a-zA-Z_]\w*[.])*[a-zA-Z_]\w*$/,
       i,N;
   context = context || window;
   spec = spec.valueOf();
   if (typeof spec === 'object') {
      if (typeof spec.length === 'number') {//assume an array-like object
         for (i=0,N=spec.length;i&lt;N;i++) {
             namespace(spec[i],context); 
         }
      }
      else {//spec is a specification object e.g, {com: {trifork: ['model,view']}} 
         for (i in spec) if (spec.hasOwnProperty(i)) {
            context[i] = context[i] || {}; 
            namespace(spec[i], context[i]);//recursively descend tree
         }
      }    
   } else if (typeof spec === 'string') {  
          (function handleStringCase(){ 
              var parts;    
              if (!validIdentifier.test(spec)) {
                throw new Error('"'+spec+'" is not a valid name for a package.'); 
              }
              parts = spec.split('.');
              for (i=0,N=parts.length;i&lt;N;i++) { 
                  spec = parts[i];    
                  context[spec] = context[spec] || {}; 
                  context = context[spec];  
              } 
           })();
    }  else {
       throw new TypeError(); 
   }
}</pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2008-02-18 20:23:00</wp:post_date>
		<wp:post_date_gmt>2008-02-18 18:23:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>designing-clientserver-web-applications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/02/designing-clientserver-web-applications.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[AaronNGray]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2008-07-02 02:40:00</wp:comment_date>
			<wp:comment_date_gmt>2008-07-02 00:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am wondering about the efficiency of the namespace function with big libraries which it is really designed for as compared to explicit namespace declarations ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[krukow]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2008-07-02 17:49:00</wp:comment_date>
			<wp:comment_date_gmt>2008-07-02 15:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Aaron.<br/><br/>I haven't done any performance evaluations of the function, but I would argue that the namespace function is at least as efficient in terms of space and time as manual namespace creation:<br/><br/>In terms of space, the same number of objects are created so there is no difference.<br/><br/>In terms of time, the algorithm is simply doing what you would do manually, i.e., check if the package object already exists and if not create it.<br/><br/>I have used these functions in a large scale JavaScript project with success.<br/><br/>Cheers,<br/>- Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Andy B]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2008-07-24 13:39:00</wp:comment_date>
			<wp:comment_date_gmt>2008-07-24 11:39:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,<br/><br/>nice function, I like the idea of this at the top of JS files, especially when declaring static modules. I was wondering what sort of licence the code has on it? Is this open source?Many thanks for your other thoughts on Functional and Object Orientated programming in JS, it truly is a flexible language!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[krukow]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2008-07-25 01:08:00</wp:comment_date>
			<wp:comment_date_gmt>2008-07-24 23:08:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Andy,<br/><br/>You are free to use it as you like, all I ask is that you provide the URI to this blog posting in the source.<br/><br/>Cheers,<br/>- Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Syntax-highlighting in web pages]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2008/07/29/syntax-highlighting-in-web-pages/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2008-07-29 16:02:33</wp:comment_date>
			<wp:comment_date_gmt>2008-07-29 14:02:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Here is the namespace function from a previous post. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Keeping it dry: Generating JavaScript models from Rails models]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2008/08/12/keeping-it-dry/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2008-08-12 20:22:47</wp:comment_date>
			<wp:comment_date_gmt>2008-08-12 18:22:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] As I&#8217;ve mentioned before, I advocate using a Model-View-Controller pattern for certain types of JavaScript-heavy web-app clients. In spite of recent licensing issues, I still think ExtJS is among the better libraries supporting MVC. For example, (if you don&#8217;t know what namespace/using are, please read this) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Rob]]></wp:comment_author>
			<wp:comment_author_email>robertkrimen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.102.130.208</wp:comment_author_IP>
			<wp:comment_date>2008-09-12 03:34:20</wp:comment_date>
			<wp:comment_date_gmt>2008-09-12 01:34:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great pair of functions, really useful

I've encapsulated them in <a href="http://b9j.bravo9.com/b9j" rel="nofollow"> my b9j javascript toolkit</a>

Here is the documentation on namespacing:
<a href="http://b9j.bravo9.com/b9j/documentation/namespace.html" rel="nofollow"> http://b9j.bravo9.com/b9j/documentation/namespace.html</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1536</wp:comment_id>
			<wp:comment_author><![CDATA[Porn]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>118.72.90.249</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 07:01:41</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 05:01:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Porn...</strong>

Insurance quotes- dallas, texas?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1566</wp:comment_id>
			<wp:comment_author><![CDATA[Sofortkredit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sofortkreditx1.info</wp:comment_author_url>
			<wp:comment_author_IP>1.62.67.129</wp:comment_author_IP>
			<wp:comment_date>2013-05-04 09:11:09</wp:comment_date>
			<wp:comment_date_gmt>2013-05-04 07:11:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Sofortkredit...</strong>

Er hatte ein paar Parterre-Raeumlichkeiten des Hauses inne, damit er nur zu den Mahlzeiten die Treppe hinaufzusteigen brauchte, denn hin und wieder litt er ein wenig an Asthma....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1588</wp:comment_id>
			<wp:comment_author><![CDATA[bad credit loan]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://loansforbadcreditpal.com/</wp:comment_author_url>
			<wp:comment_author_IP>119.49.252.224</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 14:35:09</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 12:35:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>bad credit loan...</strong>

loansforbadcreditpal.com loans for people with bad credit...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1598</wp:comment_id>
			<wp:comment_author><![CDATA[Geld leihen von Privat]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://stephangrafie.de</wp:comment_author_url>
			<wp:comment_author_IP>59.124.239.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-10 01:09:35</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 23:09:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Geld leihen von Privat...</strong>

Der Sterbende antwortete ihr nicht me Herr Er schlug noch einmal seine Augen auf und atmete noch einmal tief, und beides tat er zum letztenmal....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>JavaScript parasitic inheritance, power constructors and instanceof.</title>
		<link>http://blog.higher-order.net/2008/02/21/javascript-parasitic-inheritance-power-constructors-and-instanceof/</link>
		<pubDate>Thu, 21 Feb 2008 15:29:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/02/21/javascript-parasitic-inheritance-power-constructors-and-instanceof/</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight: bold;">Abstract</span>. This posting shows how one can make Crockford's power constructor functions play nicely with the JavaScript keyword 'instanceof.'

[<em>update: March 18, 2008.</em> I asked Crockford what he thinks about this pattern, and he actually discourages the use of 'instanceof' -- instead, he prefers to "... rely instead on good design and polymorphism."]

The inheritance model of JavaScript is based on a combination of the 'new' keyword and the prototype property of (constructor) functions. JavaScript Guru Douglas Crockford (aka 'Yoda') argues that this model (which he calls pseudo-classical) is awkward. Instead, he proposes an elegant, powerful and simple model (parasitic inheritance), using so-called power constructor functions. Note, familiarity with the above concepts is necessary for complete understanding of this post [and something that every web developer should know anyway ;-)].

The advantages of power constructor functions include support for private, shared and public variables as well as simplicty (avoiding new and prototype). There is a mismatch, however, between constructors and the JavaScript keyword, <span style="font-family: courier new;">instanceof</span>. Consider the following example:
<pre><tt><span class="comment">//recall that the object function creates a new object which has</span>
<span class="comment">//the input object, o, as its prototype</span>
<span class="keyword">var</span><span class="normal"> object </span><span class="symbol">=</span><span class="normal"> </span><span class="symbol">(</span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">     </span><span class="keyword">function</span><span class="normal"> </span><span class="function">F</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{}</span>
<span class="normal">     </span><span class="keyword">return</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">o</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">         F</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> o</span><span class="symbol">;</span>
<span class="normal">         </span><span class="keyword">return</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">F</span><span class="symbol">();</span>
<span class="normal">     </span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">)();</span><span class="comment">//included for completeness.</span>
<span class="keyword">var</span><span class="normal"> OriginalPerson </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   sayHello</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span>
<span class="normal">      </span><span class="keyword">return</span><span class="normal"> </span><span class="string">"Hello, my name is "</span><span class="symbol">+</span><span class="keyword">this</span><span class="symbol">.</span><span class="function">getName</span><span class="symbol">();</span>
<span class="normal">   </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">   getName</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> </span><span class="string">'Adam'</span><span class="symbol">;</span><span class="cbracket">}</span>
<span class="cbracket">}</span><span class="symbol">;</span>

<span class="keyword">function</span><span class="normal"> </span><span class="function">Person</span><span class="symbol">(</span><span class="normal">name</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> p </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="normal">OriginalPerson</span><span class="symbol">);</span>
<span class="normal">  p</span><span class="symbol">.</span><span class="normal">getName </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> name</span><span class="symbol">;</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> p</span><span class="symbol">;</span>
<span class="cbracket">}</span>

<span class="keyword">function</span><span class="normal"> </span><span class="function">Guru</span><span class="symbol">(</span><span class="normal">name</span><span class="symbol">,</span><span class="normal">topic</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> g </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="function">Person</span><span class="symbol">(</span><span class="normal">name</span><span class="symbol">));</span><span class="comment">//Technically we don't need object(.) here</span>
<span class="normal">  g</span><span class="symbol">.</span><span class="normal">getTopic </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> topic</span><span class="symbol">;</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> g</span><span class="symbol">;</span>
<span class="cbracket">}</span>

<span class="keyword">var</span><span class="normal"> karl </span><span class="symbol">=</span><span class="normal"> </span><span class="function">Person</span><span class="symbol">(</span><span class="string">'Karl'</span><span class="symbol">);</span>
<span class="keyword">var</span><span class="normal"> crockford </span><span class="symbol">=</span><span class="normal"> </span><span class="function">Guru</span><span class="symbol">(</span><span class="string">'Douglas'</span><span class="symbol">,</span><span class="string">'JavaScript'</span><span class="symbol">);</span>

<span class="normal">karl </span><span class="keyword">instanceof</span><span class="normal"> Person</span><span class="symbol">;</span><span class="comment">//&amp;lt;- false </span>
<span class="normal">crockford </span><span class="keyword">instanceof</span><span class="normal"> Guru</span><span class="symbol">;</span><span class="comment">//&amp;lt;- false</span>
</tt></pre>

Hmm... Clearly, any environment that makes <span style="font-family: courier new;">crockford instanceof Guru</span> evaluate to <span style="font-family: courier new;">false</span> must be getting something wrong!

In general, one has to do <span style="font-style:italic;">something</span> to make super-constructors work with <span style="font-family: courier new;">instanceof</span>. The expression <span style="font-family: courier new;">exp1 instanceof exp2</span> where <span style="font-family: courier new;">exp1,exp2</span> are JS expressions (<span style="font-family: courier new;">exp2</span> must evaluate to a function and <span style="font-family: courier new;">exp1</span> should evaluate to an object) works with following semantics:

First <span style="font-family: courier new;">exp1</span> is evaluated, say, to <span style="font-family: courier new;">o</span> then
<span style="font-family: courier new;">exp2</span> is evaluated, say, to <span style="font-family: courier new;">f</span>. If <span style="font-family: courier new;">o</span> is an object and <span style="font-family: courier new;">f</span> is a function, the entire expression evaluates to true only if following <span style="font-family: courier new;">o</span>'s [[prototype]] chain, we can reach <span style="font-family: courier new;">f.prototype</span>.

This means that to make this work, we must ensure that the object created has <span style="font-family: courier new;">Person.prototype</span> or <span style="font-family: courier new;">Guru.prototype</span> in its prototype chain.

What I would really like to end up with at the end of this blog entry, is to be able to write code similar to:
<pre><tt><span class="keyword">var</span><span class="normal"> OriginalPerson </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   sayHello</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span>
<span class="normal">      </span><span class="keyword">return</span><span class="normal"> </span><span class="string">"Hello, my name is "</span><span class="symbol">+</span><span class="keyword">this</span><span class="symbol">.</span><span class="function">getName</span><span class="symbol">();</span>
<span class="normal">   </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">   getName</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> </span><span class="string">'Adam'</span><span class="symbol">;</span><span class="cbracket">}</span>
<span class="cbracket">}</span><span class="symbol">;</span>

<span class="keyword">var</span><span class="normal"> Person </span><span class="symbol">=</span><span class="normal"> OriginalPerson</span><span class="symbol">.</span><span class="function">parasite</span><span class="symbol">(</span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">Host</span><span class="symbol">,</span><span class="normal">name</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> p </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="function">Host</span><span class="symbol">());</span>
<span class="normal">  p</span><span class="symbol">.</span><span class="normal">getName </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> name</span><span class="symbol">;</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> p</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">);</span>

<span class="keyword">var</span><span class="normal"> Guru </span><span class="symbol">=</span><span class="normal"> Person</span><span class="symbol">.</span><span class="function">parasite</span><span class="symbol">(</span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">Host</span><span class="symbol">,</span><span class="normal"> name</span><span class="symbol">,</span><span class="normal">topic</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> g </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="function">Host</span><span class="symbol">(</span><span class="normal">name</span><span class="symbol">));</span>
<span class="normal">  g</span><span class="symbol">.</span><span class="normal">getTopic </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> topic</span><span class="symbol">;</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> g</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">);</span>

<span class="function">Guru</span><span class="symbol">(</span><span class="string">'Douglas Crockford'</span><span class="symbol">,</span><span class="string">'JavaScript'</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">instanceof</span><span class="normal"> Guru</span><span class="symbol">;</span><span class="comment">//&amp;lt;-- true </span>
<span class="function">Guru</span><span class="symbol">(</span><span class="string">'Douglas Crockford'</span><span class="symbol">,</span><span class="string">'JavaScript'</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">instanceof</span><span class="normal"> Person</span><span class="symbol">;</span><span class="comment">//&amp;lt;-- true</span>
</tt></pre>

The extra parameter <span style="font-family: courier new;">Host</span> is supposed to represent the "Host" of the parasite (i.e., Person in the case of Guru), the idea being that the <span style="font-family: courier new;">parasite</span> function will somehow 'wrap' the <span style="font-family: courier new;">Person</span> function to set it up so that 'instanceof' works, and then finally feed this wrapped function to the parasite (via the Host variable). I won't be able to write the code exactly as above, but we will get close... Anyway, hopefully this will make more sense very soon!

<span style="font-weight:bold;">We will get there in two steps</span>. First we code it up manually (so to speak) and secondly we will do the meta-programming with <span style="font-family: courier new;">parasite</span>.

Incidentally, we can exploit Crockford's 'shared secrets' technique to get the prototype chain working. Consider the following code.
<pre><tt><span class="keyword">function</span><span class="normal"> </span><span class="function">Person</span><span class="symbol">(</span><span class="normal">name</span><span class="symbol">,</span><span class="normal"> proto</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> p </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="normal">proto </span><span class="symbol">||</span><span class="normal"> Person</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">);</span>
<span class="normal">  p</span><span class="symbol">.</span><span class="normal">getName </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> name</span><span class="symbol">;</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> p</span><span class="symbol">;</span>
<span class="cbracket">}</span>
<span class="normal">Person</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   sayHello</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span>
<span class="normal">      </span><span class="keyword">return</span><span class="normal"> </span><span class="string">"Hello, my name is "</span><span class="symbol">+</span><span class="keyword">this</span><span class="symbol">.</span><span class="function">getName</span><span class="symbol">();</span>
<span class="normal">   </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">   getName</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> </span><span class="string">'Adam'</span><span class="symbol">;</span><span class="cbracket">}</span>
<span class="cbracket">}</span><span class="symbol">;</span>
<span class="function">Person</span><span class="symbol">(</span><span class="string">'Karl'</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">instanceof</span><span class="normal"> Person</span><span class="symbol">;</span><span class="comment">//&amp;lt;-- true</span>
</tt></pre>

The key here is the statement: <span style="font-family: courier new;">object(proto || Person.prototype)</span>. This ensures that the object created has <span style="font-family: courier new;">Person.prototype</span> in its [[prototype]] chain. The <span style="font-family: courier new;">proto ||</span>-part is intended to be used as a 'shared secret' between a parasite 'sub type'/'sub power constructor'; the invariant is that <span style="font-family: courier new;">proto || Person.prototype</span> will always denote an object which is <span style="font-family: courier new;">Person.prototype</span> or has it in its prototype chain. It can be used as follows:
<pre><tt><span class="keyword">function</span><span class="normal"> </span><span class="function">Guru</span><span class="symbol">(</span><span class="normal">name</span><span class="symbol">,</span><span class="normal">topic</span><span class="symbol">,</span><span class="normal">proto</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> g </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="function">Person</span><span class="symbol">(</span><span class="normal">name</span><span class="symbol">,</span><span class="normal"> proto </span><span class="symbol">||</span><span class="normal"> Guru</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">));</span>
<span class="normal">  g</span><span class="symbol">.</span><span class="normal">getTopic </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> topic</span><span class="symbol">;</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> g</span><span class="symbol">;</span>
<span class="cbracket">}</span>
<span class="normal">Guru</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="normal">Person</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">);</span>
<span class="function">Guru</span><span class="symbol">(</span><span class="string">'Douglas Crockford'</span><span class="symbol">,</span><span class="string">'JavaScript'</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">instanceof</span><span class="normal"> Guru</span><span class="symbol">;</span><span class="comment">//&amp;lt;-- true</span>
<span class="function">Guru</span><span class="symbol">(</span><span class="string">'Douglas Crockford'</span><span class="symbol">,</span><span class="string">'JavaScript'</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">instanceof</span><span class="normal"> Person</span><span class="symbol">;</span><span class="comment">//&amp;lt;-- true</span>
</tt></pre>

Actually, I feel some pleasure in the assignments:
<pre><tt><span class="normal">Person</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   sayHello</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span>
<span class="normal">      </span><span class="keyword">return</span><span class="normal"> </span><span class="string">"Hello, my name is "</span><span class="symbol">+</span><span class="keyword">this</span><span class="symbol">.</span><span class="function">getName</span><span class="symbol">();</span>
<span class="normal">   </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">   getName</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> </span><span class="string">'Adam'</span><span class="symbol">;</span><span class="cbracket">}</span>
<span class="cbracket">}</span><span class="symbol">;</span>
</tt></pre>

and <span style="font-family: courier new;">Guru.prototype = object(Person.prototype);</span>: Intutively, these objects are the 'prototypes' of the objects created by the power constructors, so it feels natural to make this assignment.

So far so good - we have instanceof working with power-constructors, but we can do better. The problem now is to do the meta-programming that will handle the 'secret-sharing' behind the scenes.

In this example, we will enhance <span style="font-family: courier new;">Object.prototype</span> and <span style="font-family: courier new;">Function.prototype</span>. For simplicity I've introduced the constraint that all power-constructor functions should take only one argument [however, I'm convinced this can be generalized to more than one argument].

<strong>Note, slightly off topic here...</strong>
In either case, I've developed at taste for single-argument functions. Consider:
<pre><tt><span class="comment">/** power-constructer for Guru objects </span>
<span class="comment">  *</span><span class="type">@param</span><span class="comment"> conf {Object} a configuration object with properties:</span>
<span class="comment">  * name and topic</span>
<span class="comment">  * </span><span class="type">@return</span><span class="comment"> a Guru object with name: conf.name and topic: conf.topic.</span>
<span class="comment">  */</span>
<span class="keyword">function</span><span class="normal"> </span><span class="function">Guru</span><span class="symbol">(</span><span class="normal">conf</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> g </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="function">Person</span><span class="symbol">(</span><span class="normal">conf</span><span class="symbol">)),</span>
<span class="normal">      t </span><span class="symbol">=</span><span class="normal"> conf</span><span class="symbol">.</span><span class="normal">topic </span><span class="symbol">||</span><span class="normal"> </span><span class="string">'none'</span><span class="symbol">;</span>
<span class="normal">  g</span><span class="symbol">.</span><span class="normal">getTopic </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> t</span><span class="symbol">;</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> g</span><span class="symbol">;</span>
<span class="cbracket">}</span>
<span class="function">Guru</span><span class="symbol">(</span><span class="cbracket">{</span><span class="normal">name</span><span class="symbol">:</span><span class="string">'Yoda'</span><span class="symbol">,</span><span class="normal"> topic</span><span class="symbol">:</span><span class="string">'JavaScript'</span><span class="cbracket">}</span><span class="symbol">);</span>
</tt></pre>

The disadvantage is that there is slightly more code to write. The advantages are (1) readability: <span style="font-family: courier new;">Guru({name:'Yoda', topic:'JavaScript'})</span> can be read without having to consult the constructor function about which argument is the name and which is the topic; (2) optional/default arguments: you can leave out either of the arguments: <span style="font-family: courier new;">Guru({name:'Yoda'})</span> or <span style="font-family: courier new;">Guru({topic:'JavaScript'})</span> are both valid (in the multiple arg constructor with name as the first parameter, you'd have to write <span style="font-family: courier new;">Guru('Yoda')</span> (which is fine), and <span style="font-family: courier new;">Guru(undefined,'JavaScript')</span> (which is not).

<strong>Back on track</strong>
The following is my implementation. I extend <span style="font-family: courier new;">Object.prototype</span> and <span style="font-family: courier new;">Function.prototype</span> so that we can write:
<pre><tt><span class="keyword">var</span><span class="normal"> OriginalPerson </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   sayHello</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span>
<span class="normal">      </span><span class="keyword">return</span><span class="normal"> </span><span class="string">"Hello, my name is "</span><span class="symbol">+</span><span class="keyword">this</span><span class="symbol">.</span><span class="function">getName</span><span class="symbol">();</span>
<span class="normal">   </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">   getName</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> </span><span class="string">'Adam'</span><span class="symbol">;</span><span class="cbracket">}</span>
<span class="cbracket">}</span><span class="symbol">;</span>

<span class="keyword">var</span><span class="normal"> Person </span><span class="symbol">=</span><span class="normal"> OriginalPerson</span><span class="symbol">.</span><span class="function">parasite</span><span class="symbol">(</span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">Host</span><span class="symbol">,</span><span class="normal"> conf</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> p </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="function">Host</span><span class="symbol">()),</span>
<span class="normal">      name </span><span class="symbol">=</span><span class="normal"> conf</span><span class="symbol">.</span><span class="normal">name </span><span class="symbol">||</span><span class="normal"> </span><span class="string">'Anonymous'</span><span class="symbol">;</span>
<span class="normal">  p</span><span class="symbol">.</span><span class="normal">getName </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> name</span><span class="symbol">;</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> p</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">);</span>

<span class="keyword">var</span><span class="normal"> Guru </span><span class="symbol">=</span><span class="normal"> Person</span><span class="symbol">.</span><span class="function">parasite</span><span class="symbol">(</span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">Host</span><span class="symbol">,</span><span class="normal"> conf</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">  </span><span class="keyword">var</span><span class="normal"> g </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="function">Host</span><span class="symbol">(</span><span class="normal">conf</span><span class="symbol">)),</span>
<span class="normal">      topic </span><span class="symbol">=</span><span class="normal"> conf</span><span class="symbol">.</span><span class="normal">topic </span><span class="symbol">||</span><span class="normal"> </span><span class="string">'none'</span><span class="symbol">;</span>
<span class="normal">  g</span><span class="symbol">.</span><span class="normal">getTopic </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="keyword">return</span><span class="normal"> topic</span><span class="symbol">;</span><span class="cbracket">}</span>
<span class="normal">  </span><span class="keyword">return</span><span class="normal"> g</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">);</span>
<span class="keyword">var</span><span class="normal"> h </span><span class="symbol">=</span><span class="normal"> </span><span class="function">Guru</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal"> name</span><span class="symbol">:</span><span class="normal"> </span><span class="string">'Douglas Crockford'</span><span class="symbol">,</span>
<span class="normal"> topic</span><span class="symbol">:</span><span class="normal"> </span><span class="string">'JavaScript'</span>
<span class="cbracket">}</span><span class="symbol">);</span>
<span class="normal">h </span><span class="keyword">instanceof</span><span class="normal"> Guru</span><span class="symbol">;</span><span class="comment">//&lt;-- true</span>
<span class="normal">h </span><span class="keyword">instanceof</span><span class="normal"> Person</span><span class="symbol">;</span><span class="comment">//&lt;-- true</span>
</tt></pre>

I've implemented it as follows (with comments):
<pre><tt><span class="normal">Object</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">parasite </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">parasite</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">    </span><span class="comment">/* This is the function returned as the result</span>
<span class="comment">       of this call; it represents a wrapper for the</span>
<span class="comment">       function in parameter parasite. wrapper will simply</span>
<span class="comment">       call the parasite function, but supplying a Host function</span>
<span class="comment">       as the first argument. If wrapper is called with proto === undefined</span>
<span class="comment">       then the Host function will create an object with its prototype === this,</span>
<span class="comment">       otherwise an object with prototype === proto is created (this lets</span>
<span class="comment">       sub-parasites supply the proto parameter).</span>
<span class="comment">    */</span>
<span class="normal">    </span><span class="keyword">function</span><span class="normal"> </span><span class="function">wrapper</span><span class="symbol">(</span><span class="normal">conf</span><span class="symbol">,</span><span class="normal">proto</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">        </span><span class="keyword">var</span><span class="normal"> p </span><span class="symbol">=</span><span class="normal"> proto</span><span class="symbol">;</span><span class="comment">//Exercise why is this necessary?</span>
<span class="normal">        Array</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">splice</span><span class="symbol">.</span><span class="function">call</span><span class="symbol">(</span><span class="normal">arguments</span><span class="symbol">,</span><span class="number">0</span><span class="symbol">,</span><span class="number">0</span><span class="symbol">,</span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span>
<span class="normal">           </span><span class="keyword">return</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="normal">p </span><span class="symbol">||</span><span class="normal"> wrapper</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">);</span>
<span class="normal">        </span><span class="cbracket">}</span><span class="symbol">);</span>
<span class="normal">        </span><span class="keyword">return</span><span class="normal"> parasite</span><span class="symbol">.</span><span class="function">apply</span><span class="symbol">(</span><span class="keyword">this</span><span class="symbol">,</span><span class="normal"> arguments</span><span class="symbol">);</span>
<span class="normal">    </span><span class="cbracket">}</span>
<span class="normal">    </span><span class="comment">/* it is important that wrapper.prototype is set to this object, both so that</span>
<span class="comment">       o instanceof wrapper works, and so that objects created with</span>
<span class="comment">       object(p || wrapper.prototype) above will inherit properties of this */</span>
<span class="normal">    wrapper</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">this</span><span class="symbol">;</span>
<span class="normal">    </span><span class="keyword">return</span><span class="normal"> wrapper</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">Function</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">parasite </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">parasite</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">    </span><span class="keyword">var</span><span class="normal"> host_cons </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">this</span><span class="symbol">;</span><span class="comment">//the constructor function for the host of parasite</span>

<span class="normal">    </span><span class="comment">/* Again, this function is the result of the computation. </span>
<span class="comment">       When called it splices a Host function on the 0'th pos in the arguments array.</span>
<span class="comment">       The Host function will call the host_cons and (important!) supplies an </span>
<span class="comment">       additional last argument (proto). If proto === undefined we are in the case</span>
<span class="comment">       where client code is calling wrapper, so we call the host_cons function</span>
<span class="comment">       supplying wrapper.prototype; if instead proto is provided we call host_cons</span>
<span class="comment">       with this object (this is the case where wrapper is called by a sub-parasite).</span>
<span class="comment">    */</span>
<span class="normal">    </span><span class="keyword">function</span><span class="normal"> </span><span class="function">wrapper</span><span class="symbol">(</span><span class="normal">conf</span><span class="symbol">,</span><span class="normal">proto</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">         </span><span class="keyword">var</span><span class="normal"> wrapper_this </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">this</span><span class="symbol">,</span>
<span class="normal">             p </span><span class="symbol">=</span><span class="normal"> proto</span><span class="symbol">;</span><span class="comment">//exercise: why?</span>
<span class="normal">         Array</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">splice</span><span class="symbol">.</span><span class="function">call</span><span class="symbol">(</span><span class="normal">arguments</span><span class="symbol">,</span><span class="number">0</span><span class="symbol">,</span><span class="number">0</span><span class="symbol">,</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">              Array</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">splice</span><span class="symbol">.</span><span class="function">call</span><span class="symbol">(</span><span class="normal">arguments</span><span class="symbol">,</span><span class="normal">arguments</span><span class="symbol">.</span><span class="normal">length</span><span class="symbol">,</span><span class="number">0</span><span class="symbol">,</span><span class="normal"> </span>
<span class="normal">                                              p </span><span class="symbol">||</span><span class="normal"> wrapper</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">);</span>
<span class="normal">              </span><span class="keyword">return</span><span class="normal"> host_cons</span><span class="symbol">.</span><span class="function">apply</span><span class="symbol">(</span><span class="normal">wrapper_this</span><span class="symbol">,</span><span class="normal">arguments</span><span class="symbol">);</span><span class="normal"> </span>
<span class="normal">         </span><span class="cbracket">}</span><span class="symbol">);</span>
<span class="normal">         </span><span class="keyword">return</span><span class="normal"> parasite</span><span class="symbol">.</span><span class="function">apply</span><span class="symbol">(</span><span class="keyword">this</span><span class="symbol">,</span><span class="normal"> arguments</span><span class="symbol">);</span>
<span class="normal">    </span><span class="cbracket">}</span>
<span class="normal">    </span><span class="comment">/* our prototype is an object which inherits properties from this.prototype,</span>
<span class="comment">       e.g., Guru.prototype inherits from Person.prototype.</span>
<span class="comment">    */</span>
<span class="normal">    wrapper</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> </span><span class="function">object</span><span class="symbol">(</span><span class="keyword">this</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">);</span>
<span class="normal">    </span><span class="keyword">return</span><span class="normal"> wrapper</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">;</span>
</tt></pre>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2008-02-21 17:29:00</wp:post_date>
		<wp:post_date_gmt>2008-02-21 15:29:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-parasitic-inheritance-power-constructors-and-instanceof</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="instanceof"><![CDATA[instanceof]]></category>
		<category domain="category" nicename="parasitic-inheritance"><![CDATA[parasitic inheritance]]></category>
		<category domain="category" nicename="power-constructors"><![CDATA[power constructors]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/02/javascript-parasitic-inheritance-super.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[AaronNGray]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2008-07-02 02:57:00</wp:comment_date>
			<wp:comment_date_gmt>2008-07-02 00:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[p = proto;//exercise: why?<br/><br/>I believe this is due to how Javascript's closures work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Julian Turner]]></wp:comment_author>
			<wp:comment_author_email>julian@baconbutty.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.baconbutty.com</wp:comment_author_url>
			<wp:comment_author_IP>62.6.252.50</wp:comment_author_IP>
			<wp:comment_date>2008-08-05 14:26:16</wp:comment_date>
			<wp:comment_date_gmt>2008-08-05 12:26:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[p = proto;//exercise: why?

My guess is:-

1.  We know that if you change a value in the arguments array, e.g. arguments[1] = "New Value", then the local variable for position 1 will be updated.  I.e. in your case "proto would now contain the string "New Value".

2.  Your "slice(arguments, 0, 0)" inserts a new value in position arguments[0], movement the original "conf" (index 0) and "proto" (index 1) values up one index position in the arguments array.

3.  This movement is equivalent to assigning a new value, and so the "proto" variable will now contain the "conf" contents. 

4.  This movement up occurs before the "function" object you insert at the start is called.  So by the time the function is called, the specifc "proto" variable (on the activation/variable object captured by the closure of the inner function) would have changed.  So "proto" would point to the wrong value when it came to be used in the inner function.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>77.213.141.231</wp:comment_author_IP>
			<wp:comment_date>2008-08-05 15:48:52</wp:comment_date>
			<wp:comment_date_gmt>2008-08-05 13:48:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, exactly. Honestly, I wasn't aware of this until after I writing and debugging the function! ;-)

For the formal reference: 

In ECMA-263, 10.1.8 Arguments Object it says: ... an arguments object is created and initialised as follows: 

...
* For each non-negative integer, arg, less than the value of the length property, a property is created with name ToString(arg) and property attributes {DontEnum}. The initial value of this property is 
the value of the corresponding actual parameter supplied by the caller. The first actual parameter 
value corresponds to arg=0, the second to arg=1, and so on. **In the case when arg is less than the 
number of formal parameters for the Function object, this property shares its value with the 
corresponding property of the activation object. This means that changing this property changes the corresponding property of the activation object and vice versa.**]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[Julian Turner]]></wp:comment_author>
			<wp:comment_author_email>julian@baconbutty.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.baconbutty.com</wp:comment_author_url>
			<wp:comment_author_IP>62.6.252.50</wp:comment_author_IP>
			<wp:comment_date>2008-08-29 16:59:11</wp:comment_date>
			<wp:comment_date_gmt>2008-08-29 14:59:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting, so that means you can achieve some obscure "by reference" type effects, by passing the arguments object around.

E.g.

function foo(a, b)
{
     bar(arguments);
     alert(a + b);
}

function bar(args)
{
     args[0] = args[0] + 1;
}

foo(1, 2); // alerts 4 in IE

Not sure what use this might be in practice!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>77.213.141.231</wp:comment_author_IP>
			<wp:comment_date>2008-08-29 17:40:23</wp:comment_date>
			<wp:comment_date_gmt>2008-08-29 15:40:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, I can think of no use for this feature right now  ;-) 

But it is certainly something which is nice to know since it can be the cause of some pretty nasty bugs.

/Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1463</wp:comment_id>
			<wp:comment_author><![CDATA[test blasts are fun]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.testblasts3523.com/</wp:comment_author_url>
			<wp:comment_author_IP>109.230.251.155</wp:comment_author_IP>
			<wp:comment_date>2011-05-20 01:43:18</wp:comment_date>
			<wp:comment_date_gmt>2011-05-19 23:43:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>test blasts are fun...</strong>

I saw this really great post today....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1522</wp:comment_id>
			<wp:comment_author><![CDATA[proxy server]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://hosting-n1.com</wp:comment_author_url>
			<wp:comment_author_IP>95.134.47.0</wp:comment_author_IP>
			<wp:comment_date>2012-12-06 20:25:07</wp:comment_date>
			<wp:comment_date_gmt>2012-12-06 18:25:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>...Websites you should visit...</strong>

[...]Wow, superb weblog structure! How lengthy have you ever been running a blog for?[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Client/Server Web-apps -- the model (Part I, Section II)</title>
		<link>http://blog.higher-order.net/2008/03/08/clientserver-web-apps-the-model-part-i-section-ii/</link>
		<pubDate>Sat, 08 Mar 2008 19:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/03/08/clientserver-web-apps-the-model-part-i-section-ii/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://higher-order.blogspot.com/2008/03/clientserver-web-apps-model-part-i.html">Client/Server Web-apps -- the model</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2008-03-08 21:00:00</wp:post_date>
		<wp:post_date_gmt>2008-03-08 19:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clientserver-web-apps-the-model-part-i-section-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ext"><![CDATA[Ext]]></category>
		<category domain="category" nicename="extjs"><![CDATA[Extjs]]></category>
		<category domain="category" nicename="html-free-web-applications"><![CDATA[HTML free web-applications]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="model-view-controller"><![CDATA[model view controller]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/03/clientserver-web-apps-model-part-i.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Extending Ext.data.Record to support inheritance for domain types</title>
		<link>http://blog.higher-order.net/2008/03/18/extending-extdatarecord-to-support-inheritance-for-domain-types/</link>
		<pubDate>Tue, 18 Mar 2008 17:37:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/03/18/extending-extdatarecord-to-support-inheritance-for-domain-types/</guid>
		<description></description>
		<content:encoded><![CDATA[As I've <a href="http://higher-order.blogspot.com/2008/03/clientserver-web-apps-model-part-i.html">previously blogged about</a>, the JavaScript framework ExtJS provides an excellent support for developing models in Controller-Model-View architectures in web-browser client applications. One of the tools Ext provides is the function <span style="font-family: courier-new;">Ext.data.Record.create</span>: using this one can easily create constructor functions for domain concepts. For example, in our room-booking application, TriBook, we defined a Reservation type concisely like this:
<pre><tt><span class="normal">com</span><span class="symbol">.</span><span class="normal">trifork</span><span class="symbol">.</span><span class="normal">tribook</span><span class="symbol">.</span><span class="normal">model</span><span class="symbol">.</span><span class="normal">Reservation </span><span class="symbol">=</span><span class="normal"> Ext</span><span class="symbol">.</span><span class="normal">data</span><span class="symbol">.</span><span class="normal">Record</span><span class="symbol">.</span><span class="function">create</span><span class="symbol">([</span>
<span class="normal">       </span><span class="cbracket">{</span><span class="normal">name</span><span class="symbol">:</span><span class="normal"> </span><span class="string">'start_at'</span><span class="symbol">,</span><span class="normal"> type</span><span class="symbol">:</span><span class="string">'date'</span><span class="symbol">,</span><span class="normal"> dateFormat</span><span class="symbol">:</span><span class="string">'d/m/Y-H:i'</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">       </span><span class="cbracket">{</span><span class="normal">name</span><span class="symbol">:</span><span class="normal"> </span><span class="string">'end_at'</span><span class="symbol">,</span><span class="normal"> type</span><span class="symbol">:</span><span class="string">'date'</span><span class="symbol">,</span><span class="normal"> dateFormat</span><span class="symbol">:</span><span class="string">'d/m/Y-H:i'</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">       </span><span class="cbracket">{</span><span class="normal">name</span><span class="symbol">:</span><span class="normal"> </span><span class="string">'room'</span><span class="cbracket">}</span>
<span class="symbol">]);</span>
</tt></pre>

That is: a Reservation object has 'start_at' and 'end_at' Date properties as well as a 'room' property (which refers to a 'Room' domain object, defined of course using <span style="font-family: courier-new;">Ext.data.Record.create</span>).

One point made in a previous article is that <span style="font-family: courier-new;">Ext.data.Record.create</span> returns a JavaScript <em>constructor function</em> for the defined domain concept. This means that we can add domain logic to our domain types by augmenting their prototypes, e.g.,
<pre><tt><span class="normal">Ext</span><span class="symbol">.</span><span class="function">apply</span><span class="symbol">(</span><span class="normal">com</span><span class="symbol">.</span><span class="normal">trifork</span><span class="symbol">.</span><span class="normal">tribook</span><span class="symbol">.</span><span class="normal">model</span><span class="symbol">.</span><span class="normal">Reservation</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">,</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">     isPreLunchReservation</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="comment">//just an example...</span>
<span class="normal">         </span><span class="keyword">var</span><span class="normal"> sh </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">this</span><span class="symbol">.</span><span class="function">get</span><span class="symbol">(</span><span class="string">'start_at'</span><span class="symbol">).</span><span class="function">getHours</span><span class="symbol">(),</span>
<span class="normal">             eh </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">this</span><span class="symbol">.</span><span class="function">get</span><span class="symbol">(</span><span class="string">'end_at'</span><span class="symbol">).</span><span class="function">getHours</span><span class="symbol">();</span>
<span class="normal">         </span><span class="keyword">return</span><span class="normal"> </span><span class="number">6</span><span class="normal"> </span><span class="symbol">&lt;</span><span class="normal"> sh </span><span class="symbol">&amp;&amp;</span><span class="normal"> eh </span><span class="symbol">&lt;</span><span class="normal"> </span><span class="number">11</span><span class="symbol">;</span><span class="comment">//must end before noon...</span>
<span class="normal">     </span><span class="cbracket">}</span>
<span class="cbracket">}</span><span class="symbol">);</span>
</tt></pre>

This is all very useful, particularly because <span style="font-family: courier-new;">Ext.data.Record</span> objects are supported by a bunch of other Ext functions, as discussed previously.

However, there is no built-in support for inheritance in domain concepts. For example, suppose that we like to create a sub-type of our reservation domain type: a RecurringReservation, which one can use e.g., to reserve a room the same time each week. It would be nice to be able to write the following:
<pre><tt><span class="keyword">var</span><span class="normal"> m </span><span class="symbol">=</span><span class="normal"> com</span><span class="symbol">.</span><span class="normal">trifork</span><span class="symbol">.</span><span class="normal">tribook</span><span class="symbol">.</span><span class="normal">model</span><span class="symbol">;</span>
<span class="normal">m</span><span class="symbol">.</span><span class="normal">RecurringReservation </span><span class="symbol">=</span><span class="normal"> Ext</span><span class="symbol">.</span><span class="normal">data</span><span class="symbol">.</span><span class="normal">Record</span><span class="symbol">.</span><span class="function">extend</span><span class="symbol">(</span><span class="normal">m</span><span class="symbol">.</span><span class="normal">Reservation</span><span class="symbol">,</span><span class="normal"> </span><span class="symbol">[</span>
<span class="normal">      </span><span class="cbracket">{</span><span class="normal">name</span><span class="symbol">:</span><span class="string">'interval'</span><span class="symbol">,</span><span class="normal"> type</span><span class="symbol">:</span><span class="string">'string'</span><span class="cbracket">}</span><span class="comment">//can be 'daily','weekly', 'monthly' or 'yearly'</span>
<span class="symbol">]);</span>
<span class="keyword">var</span><span class="normal"> rr </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> m</span><span class="symbol">.</span><span class="function">RecurringReservation</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">           start_at</span><span class="symbol">:</span><span class="string">'17/03/2008-08:00'</span><span class="symbol">,</span>
<span class="normal">           end_at</span><span class="symbol">:</span><span class="string">'17/03/2008-09:30'</span><span class="symbol">,</span>
<span class="normal">           room</span><span class="symbol">:</span><span class="normal">room_ref</span><span class="symbol">,</span><span class="comment">//assuming room_ref refers to a m.Room object.</span>
<span class="normal">           interval</span><span class="symbol">:</span><span class="normal"> </span><span class="string">'weekly'</span>
<span class="cbracket">}</span><span class="symbol">);</span>
</tt></pre>

Now, the object referred to by 'rr' should have all the specified state, <em>and</em> all the domain logic of Reservation should be inherited, e.g., 'isPreLunchReservation' also works for RecurringReservation objects.

The following is an Ext extension that makes the above snipplet work:
<pre><tt><span class="normal">Ext</span><span class="symbol">.</span><span class="normal">data</span><span class="symbol">.</span><span class="normal">Record</span><span class="symbol">.</span><span class="normal">extend </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">sp</span><span class="symbol">,</span><span class="normal">fields</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">        </span><span class="keyword">var</span><span class="normal"> sb </span><span class="symbol">=</span><span class="normal"> Ext</span><span class="symbol">.</span><span class="function">extend</span><span class="symbol">(</span><span class="normal">sp</span><span class="symbol">,</span><span class="cbracket">{}</span><span class="symbol">),</span>
<span class="normal">            sb_f </span><span class="symbol">=</span><span class="normal"> sb</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">fields</span><span class="symbol">.</span><span class="function">clone</span><span class="symbol">(),</span>
<span class="normal">            Field </span><span class="symbol">=</span><span class="normal"> Ext</span><span class="symbol">.</span><span class="normal">data</span><span class="symbol">.</span><span class="normal">Field</span><span class="symbol">,</span>
<span class="normal">            i</span><span class="symbol">,</span><span class="normal">N</span><span class="symbol">;</span>

<span class="normal">        </span><span class="keyword">for</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">i</span><span class="symbol">=</span><span class="number">0</span><span class="symbol">,</span><span class="normal">N</span><span class="symbol">=</span><span class="normal">fields</span><span class="symbol">.</span><span class="normal">length</span><span class="symbol">;</span><span class="normal"> i</span><span class="symbol">&lt;</span><span class="normal">N</span><span class="symbol">;</span><span class="normal"> i</span><span class="symbol">++)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">                sb_f</span><span class="symbol">.</span><span class="function">add</span><span class="symbol">(</span><span class="keyword">new</span><span class="normal"> </span><span class="function">Field</span><span class="symbol">(</span><span class="normal">fields</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">]));</span>
<span class="normal">        </span><span class="cbracket">}</span>
<span class="normal">        sb</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">fields </span><span class="symbol">=</span><span class="normal"> sb_f</span><span class="symbol">;</span>
<span class="normal">        </span><span class="keyword">return</span><span class="normal"> sb</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">;</span>
</tt></pre>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2008-03-18 19:37:00</wp:post_date>
		<wp:post_date_gmt>2008-03-18 17:37:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extending-extdatarecord-to-support-inheritance-for-domain-types</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/03/extending-extdatarecord-to-support.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>There is still HOPE for templates...</title>
		<link>http://blog.higher-order.net/2008/04/06/there-is-still-hope-for-templates/</link>
		<pubDate>Sun, 06 Apr 2008 13:38:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/04/06/there-is-still-hope-for-templates/</guid>
		<description></description>
		<content:encoded><![CDATA[I am interested in JavaScript. One reason I got interested in JavaScript was a discussion about templating languages with Trifork colleagues <a href="http://braindump.dk/tech/">Joakim</a> and <a href="http://www.linkedin.com/in/krestenkrabthorup">Kresten</a>  (or perhaps it would be more correct to say that we were discussing better ways of implementing the View-part of traditional Model-View-Controller web applications). I ended up liking the idea that the best approach was to dump templates altogether and write the whole client application in a high-level language, i.e., JavaScript, rather than using any of the existing templating languages. Hence, the interest in JavaScript. In fact, I got so interested in JavaScript that I forgot all about templating languages again. That was until recently when I remembered the original discussion, and started thinking about templating again. It was actually some good fun thinking about this -- who would have thought? Anyway, enough about me... Here is the idea.<br /><br />The language is called HOPE Templates, or just HOPE. The acronym is for Higher-Order Partially Evaluated Templates. Obviously two important ideas are (i) higher-order: templates are a type of functions and the input and output of these functions can be templates; (ii) templates are partially evaluated, meaning that general templates with multiple inputs can be specialized with respect to each input. <br /><br />That's it! These two powerful concepts are the core of the language. I'll illustrate the HOPE idea through a series of examples. <br /><br />Simple Template 1:<br /><code><br />Hello World!<br /></code><br />Any string is a (zero-order) template; when applied, the above template always outputs 'Hello World!'<br /><br />Simple Template 2:<br /><code><br />HelloTpl = &lambda;x.Hello x!<br />RuleTpl = &lambda;x.x, you rule!<br /></code><br />This defines two named templates, e.g., 'HelloTpl' takes an input 'x' and outputs "Hello x!", where 'x' is replaced with what-ever the template is applied to. Note the use of &lambda; for template abstraction -- this is to suggest the higher-order functional nature of templates (and it is concise too).<br /><br />An important concept here is that any text in the program that is not a bound variable (or any language syntax) is just zero-order templates. Conversely, if a variable is bound by a lambda, then its occurrence means to 'insert the input template here'. We allow the &alpha;-conversion from the lambda calculus so that <code>&lambda;x. Hello x!</code> is the same as <code>&lambda;y. Hello y!</code>. This means that we can insert/apply templates without having to escape characters: if there is a clash we can always just &alpha;-convert.<br /><br />So far nothing new. <br /><br />Simple Template 3:<br /><code><br />ConcatTpl = &lambda;x,y,arg. (x arg)(y arg)<br /></code><br />This template is meant to be used as a higher-order template that takes two templates  (x,y) and an argument (arg). It applies each template to the argument.<br /><br />Example 1:<br /><code><br />ConcatTpl HelloTpl RuleTpl ~ <br />&nbsp;&nbsp;&lambda;arg.(HelloTpl arg)(RuleTpl arg) ~ <br />&nbsp;&nbsp;&nbsp;&nbsp;    &lambda;arg.(Hello arg!)(arg you rule!)<br /></code><br />The application of a template is left-associative so the first line is (ConcatTpl applied to HelloTpl) applied to RuleTpl. The ~ is an equivalence relation invented for this blog posting. You can think of it as meaning 'is the same template as'. I haven't defined it formally, but it must be similar to the lambda calculus conversion rules.<br /><br />I'm not sure about brackets yet. They are needed for grouping and are definitely not part of the output.<br /><br />Partial evaluation. Consider the following template:<br /><code><br />Tag = &lambda;name,clz,content.<br />&lt;name class="clz"&gt;<br />&nbsp;&nbsp;content<br />&lt;/name&gt;<br /></code><br />This is just a normal curried function so we have<br /><code><br />Tag div ~ <br />&lambda;clz,content.<br />&lt;div class="clz"&gt;<br />&nbsp;&nbsp;content<br />&lt;/div&gt;<br /></code><br />However, we can do also partial evaluation (application with respect to one or more named arguments). For example<br /><code><br />Tag clz:selected ~ <br />&lambda;name,content.<br />&lt;name class="selected"&gt;<br />&nbsp;&nbsp;content<br />&lt;/name&gt;<br /></code><br /><br />Now I think it starts to get interesting ;-) <br /><br />A final concept I would like is something like the following called operator definition. A simple definition could be:<br /><code><br />Mine = &lambda;x.I own x!<br /></code><br />An operator definition generalizes a simple definition by having variables on both sides of the equality symbol. For example:<br /><code><br />x.y = &lambda;x,y,z.&lt;x class="y"&gt;z&lt;/x&gt;<br /></code><br />This does several things. First it defines a named template '.', like<br /><code><br />. = &lambda;x,y,z.&lt;x class="y"&gt;z&lt;/x&gt;<br /></code><br />But it does more! It also allows for the following syntactic sugar: .highlight meaning<br /><code><br />.highlight ~&lambda;x,z.&lt;x class="highlight"&gt;z&lt;/x&gt;<br /></code><br />and e.g. <br /><code><br />div.highlight ~ &lambda;z.&lt;div class="highlight"&gt;z&lt;/div&gt;<br /></code><br />so <br /><code><br />div.highlight HOPE! ~ &lt;div class="highlight"&gt;HOPE!&lt;/div&gt;<br /></code><br /><br />Combined with a notion of default values, this looks similar to <a href="http://haml.hamptoncatlin.com/">something we seen before and like </a> ;-), but I believe that it is much more powerful!<br /><br />Here are a few notes to myself:<br /><ul><br /><li>How do you implement it efficiently? I don't know. But on my language get-to-know-better list is Scheme, and it think this might be a good candidate language to use when implementing this. HOPEfully I will blog about that one day.</li><br /><li>Dealing with data: lists and maps. Pattern-matching on data types. How much do we need?</li><br /><li>Modules and imports... namespacing</li><br /><li>   whitespace   </li><br /><li>flexible language syntax: an idea where the language syntax can be redefined locally in case it overlaps too much with the template content...</li><br /><li>This could make templating fun again ;-), but remember to stay within templating.</li><br /></ul> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2008-04-06 15:38:00</wp:post_date>
		<wp:post_date_gmt>2008-04-06 13:38:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>there-is-still-hope-for-templates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/04/there-is-still-hope-for-templates.html]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HTML-free Web-applications with ExtJS [Designing client/server web-apps, Part I, Section III]</title>
		<link>http://blog.higher-order.net/2008/04/19/html-free-web-applications-with-extjs-designing-clientserver-web-apps-part-i-section-iii/</link>
		<pubDate>Sat, 19 Apr 2008 19:41:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/04/19/html-free-web-applications-with-extjs-designing-clientserver-web-apps-part-i-section-iii/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://higher-order.blogspot.com/2008/03/html-free-web-applications-with-extjs.html">HTML-free Web-applications with ExtJS</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2008-04-19 21:41:00</wp:post_date>
		<wp:post_date_gmt>2008-04-19 19:41:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html-free-web-applications-with-extjs-designing-clientserver-web-apps-part-i-section-iii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ext"><![CDATA[Ext]]></category>
		<category domain="category" nicename="extjs"><![CDATA[Extjs]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="model-view-controller"><![CDATA[model view controller]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/03/html-free-web-applications-with-extjs.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ExtJS goes viral...</title>
		<link>http://blog.higher-order.net/?p=11</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[[This is really old news, but I still want to express my opinion...]<br /><br />I originally started using the ExtJS framework for the following reasons: 1) It had a large set of high-quality, customizable and extensible UI components, 2) it had high-level abstractions that just made sense to me, yet at the same time it was easy to "hook in" to implementation specifics when needed, and 3) it was available under the terms and conditions of the LGPL license (meaning, in any reasonable interpretation, that it could be used (linked-to) in products with other licenses). <br /><br />Item 3 has changed: Release 2.1 of Ext changed its open source license to GPL. This is really disappointing to me as I've invested a lot of time by now learning and developing with the framework, under the assumption that it (and future releases) would be LGPL licensed. I've even recommended it to clients for the same reasons mentioned above.<br /><br />Anyway, this change raises a lot of questions since in any reasonable interpretation of GPL, the change must restrict the permissions granted to anyone using the open source Ext license. First of all there are a lot of questions that relate to what it even means for a web application to be licensed under GPL (or LGPL for that matter). I won't repeat the arguments here since is has been discussed extensively elsewhere: <br /><br /><a href="http://www.rockstarapps.com/wordpress/?p=100">Does GPL make sense for Ajax libraries?</a><br /><a href="http://www.gnu.org/licenses/gpl-faq.html">GPL FAQ</a><br /><a href="http://abotar.com/blog/2008/04/21/time-to-fork-ext-js-and-mygwt/">time-to-fork-ext-js-and-mygwt</a><br /><a href="http://www.linux-mag.com/id/3017">The GPL Has No (Networked) Future</a><br /><a href="http://en.wikipedia.org/wiki/Talk:Ext_(javascript_library)">Links</a><br /><a href="http://mjg59.livejournal.com/84586.html">Discussion - seem high-quality.</a><br /><a href="http://sourceforge.net/projects/openext/">So the fork: OpenExt</a> and its <a href="http://openext.svn.sourceforge.net/viewvc/openext/trunk/LICENSE.txt?view=markup">LGPL license</a><br /><a href="http://www.jroller.com/sjivan/entry/my_response_to_jack_slocum">Jivan's response to Jack Slocum's post on the GWT-Ext forum</a><br /><a href="http://extjs.com/blog/2008/04/27/open-source-license-exception-for-extensions/">Floss ExtJS Exceptions</a><br /><br />I still don't know how to interpret GPL legally in a web application setup, and I guess nobody really knows what it means (as far as I know there are no past examples of legal practice on this particular issue). <br /><br />To me there are two current alternatives (assuming that you insist on still using ExtJS): Use only Ext in version 2.0.2 (or OpenExt/SuperExt), or use Ext2.1+ and release you client under GPL. Regarding the second alternative, according to Jack Slocum's own interpretation of the GPL license you would have to release also serverside code as GPL if the server delivers ExtJS with the web page... ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2008-04-25 16:31:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/feeds/posts/default/8150670938122143657]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Higher-order partially evaluated templates (HOPE Templates)</title>
		<link>http://blog.higher-order.net/?p=12</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[In a previous posting I briefly introduced <a href="http://higher-order.blogspot.com/2008/04/there-is-still-hope-for-templates.html">the templating language HOPE</a>. The post was a quick scribble on an idea for a higher-order functional templating language; it didn't go into any detail or reflect much. This posting will recap the idea and further illustrate it. I'll talk briefly about a mini-implementation attempt (which unfortunately failed), and where to go from here with implementation.<br /><br /><span style="font-weight: bold;">Hope Templates - Introduction</span><br />When I write about templating languages I am speaking about languages and tools for general-purpose text generation. I'm not referring to "<a href="http://en.wikipedia.org/wiki/Template_metaprogramming">template metaprogramming</a>" which is more specific, e.g., C++ templates which is a templating mechanism designed specifically to produce C++ programs as output. When that is said, I will use examples from markup (mostly XHTML) generation as our application domain.<br /><br />In HOPE, a template can be thought of as a (higher-order) function that takes other templates as input and gives other templates as output. Strings are a special type of template (zero-order). Templates can be evaluated, and the result of such evaluation is always a string.<br /><br />In our examples, we denote template evaluation by a relation ->. For example<br /><br /><center>Example 1: zero-order template</center><br /><div style="border: 1px solid ; padding: 2px;"><span style="font-family: courier new;">Hello World!</span><br /></div><br /><br />Is a template and <span style="font-family: courier new;">Hello World!</span> -> "Hello World!" I.e. (in terms of more formal semantics) the template <span style="font-style:italic;">denoted by</span> the string on the left side evaluates to the string "Hello World!".<br /><br /><span style="font-weight:bold;">What's new?</span><br />Just about every templating language I know has the property that any string is a template, e.g., if Example 1 would be evaluated in JSP, ERB or FreeMarker, it would result in the same output. To appreciate what is new about HOPE, we need to introduce template abstraction, which one can think of as a function definition.<br /><br /><center>Example 2: template abstraction</center><br /><div style="border: 1px solid ; padding: 2px;"><span style="font-family: courier new;">&lambda;x y.Hello x and y!</span><br /></div><br />The expression in Example 2 denotes a template which has two input parameters: x and y. That template can be applied to two input templates and the result is a new template. For example, we can apply it to the templates denoted by "Olivier" and "Karl", and the result would be a (zero-order) template that evaluates to the string "Hello Olivier and Karl!". Simple stuff (if you are a functional programmer);  if not, you probably understand it immediately anyway (except perhaps for the use of &lambda; for abstraction).<br /><br />Already here we see several differences with other patterns in common templating languages. First of all, note that there is no "escape" syntax; for example, in the concrete syntax, variables 'x' and 'y' are just text, as are the strings 'Hello' and 'World'. This is (in my opinion) much more nice than e.g. Hello <%= getX() %> that one might see in JSP. This is a common theme in HOPE, which I call "flexible syntax" -- later we shall see more examples of what this means, but one example is local redefinition of concrete syntax (e.g. using \ / instead of () for template application). Now, one might have the opinion that concrete syntax really doesn't matter all that much (LISP, anyone?), but in a templating language, I really feel it makes a huge difference.<br /><br />A second difference with standard templating languages is the functional nature of templates. JSP (and the various variants ERB, ASP, etc) consider templates an alternating sequence of raw or static text to be outputted, and syntactically escaped fragments of Java (or Ruby or ??) code that denotes a computation resulting in a dynamically computed string. In contrast, HOPE does not revert back to a general purpose language for the dynamic parts, instead it uses a domain specific functional language for dynamic computations. FreeMarker and StringTemplate are languages that share this approach (StringTemplate being the only functional language that follows this approach). Both FreeMarker and StringTemplate differ from HOPE (and from each other) in some fundamental ways that could be the discussion of another blog-post.<br /><br /><span style="font-weight:bold;">Partial evaluation as application</span><br />A fundamental and (as far as I know) unique feature of HOPE is that all template application is <span style="font-style:italic;">partial</span>. If you know about partial evaluation you can think of template application as partial evaluation of a function with respect to one of its input parameters. This is probably best understood by means of an example. In the following we use the equality symbol as meaning "denotes the same template as".<br /><br /><center>Example 3: application (partial evaluation)</center><br /><div style="border: 1px solid ; padding: 2px;"><span style="font-family: courier new;">(&lambda;x y.Hello x and y!) y:Karl = &lambda;x.Hello x and Karl!</span><br/><br /><span style="font-family: courier new;">(&lambda;x y.Hello x and y!) x:Olivier = &lambda;y.Hello Olivier and y!</span><br /></div><br />The application of the left-hand-side (LHS) template with respect to 'y' bound to the value 'Karl' replaces 'y' in the inner expression with 'Karl', just as expected. <br /><br /><br /><span style="font-weight: bold;">An implementation attempt</span><br />I tried to implement a HOPE compiler in Scheme: the compiler would translate a HOPE AST to a Scheme function representing the template. The idea was to use an existing partial evaluator for Scheme to implement template application. For example<br /><br /><br /><br /><center>Figure 1: Scheme translation</center><br /><div style="border: 1px solid ; padding: 2px;"><span style="font-family: courier new;"><br />Hello World! => (lambda () "Hello World!")<br /></span><span style="font-family: courier new;"><br />&lambda;x.Hello x => (lambda (x) (concat (lambda () "Hello") x))<br /></span><br /></div><br />Here 'concat' is some appropriately defined function that takes one or more templates and produces a new template (which is supposed to represent the concatenation of the input templates). ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2008-04-29 06:01:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="higher-order"><![CDATA[higher-order]]></category>
		<category domain="category" nicename="hope"><![CDATA[HOPE]]></category>
		<category domain="category" nicename="partial-evaluation"><![CDATA[partial evaluation]]></category>
		<category domain="category" nicename="scheme"><![CDATA[Scheme]]></category>
		<category domain="category" nicename="templates"><![CDATA[templates]]></category>
		<category domain="category" nicename="templating-languages"><![CDATA[templating languages]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/feeds/posts/default/3045041508832438466]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fun with with</title>
		<link>http://blog.higher-order.net/2008/06/12/fun-with-with/</link>
		<pubDate>Thu, 12 Jun 2008 18:43:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/06/12/fun-with-with/</guid>
		<description></description>
		<content:encoded><![CDATA[Read this on the old blog. <a href="http://higher-order.blogspot.com/2008/06/fun-with-with.html">Here.</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2008-06-12 20:43:00</wp:post_date>
		<wp:post_date_gmt>2008-06-12 18:43:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fun-with-with</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="namespacing"><![CDATA[namespacing]]></category>
		<category domain="category" nicename="scope"><![CDATA[scope]]></category>
		<category domain="category" nicename="using"><![CDATA[using]]></category>
		<category domain="category" nicename="with"><![CDATA[with]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/06/fun-with-with.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Trie.js - a simple Trie implementation in JavaScript</title>
		<link>http://blog.higher-order.net/?p=16</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[I've started implementing the Trie datastructure in JavaScript. So far it's a simple almost trivial implementation: it has three methods: insert, lookup and get. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2008-07-10 20:56:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/feeds/posts/default/3053464210887371180]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Opinions on Software Transactional Memory</title>
		<link>http://blog.higher-order.net/?p=179</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[There seems to be an ongoing discussion about the value of software transactional memory. Recently Iøve seen critiques My interest in this discussion stems from my interest in the <a href="http://clojure.org">Clojure programming language</a> which has its own unique STM implementation. I have a strong belief in the value of Clojure, so naturally I am interested in whether it's STM really does deliver.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2008-11-04 20:30:26</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Opinions on So</title>
		<link>http://blog.higher-order.net/?p=180</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2008-11-04 19:44:27</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is Clojure an acceptable Lisp?</title>
		<link>http://blog.higher-order.net/?p=181</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[Steve Yegge : lisp is not an acceptable lisp
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2008-11-04 23:02:07</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clojure talks in Copenhagen and Aarhus</title>
		<link>http://blog.higher-order.net/?p=340</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[I am giving two talks on Clojure:
<ul>
	<li>September 7th at Trifork in Aarhus</li>
	<li>September 9th</li>
</ul> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2009-08-05 13:07:25</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clojure talks in Aarhus and Copenhagen with Azul Systems demo!</title>
		<link>http://blog.higher-order.net/?p=342</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=342</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Upcoming events</strong>: I am giving a talk on Clojure in Copenhagen and Aarhus - this is the first chance for a <a href="http://www.clojure.dk">dcug</a> meetup (though also non-dcug members are invited). The events are after work and free - there will even be free sandwiches, compliments of Trifork :-)

<ul>
	<li>Monday, Sept. 7th in Aarhus, location: Trifork. Registration: <a href="https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2129">https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2129</a></li>
	<li>Wednesday, Sept. 9th in Copenhagen, location: Trifork Cph. Registration: <a href="https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2130">https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2130</a>.</li>
	<li>Free Clojure workshop at JAOO - featuring Rich Hickey. October 6, 2009, 17.30 - 19.30. Registration: <a href="https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2093">https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2093</a></li>
</ul>

<strong>Abstract for Aarhus/Cph talks.</strong>
Clojure is..

... a new functional, dynamic programming language for Java Virtual Machines. The primary novelty of Clojure is its strong focus on and support for in-process concurrency: a unique concurrency model, combining a notion of persistent (i.e., immutable, fast) data structures, with a lock-free concurrency model. This simplifies concurrent programming greatly and has good scalability properties. 
Influenced by LISP and Haskell, Clojure supports pure, lazy functional programming and has a powerful macro system which makes extending the language to support DSLs easy and powerful.
This talk..
... is split in three parts. In the first part, Clojure is introduced for those who don't know the language. There is so much to cover that this will be a fast tour with pointers to more information, but we will emphasize the unique aspects of the language.

In the second part we go into more depth regarding the implementation of persistent (and transient data structures) - "the secret sauce of Clojure" ;-)

In the third part we get to see Clojure in action running on some very cool technology - a unique opportunity! Azul Systems (www.azulsystems.com) has promised to make available one of their large Vega 3 compute appliances (864 core, 368 GB memory, let's go concurrent). We will explore how the Clojure concurrency model fares in practice, scaling a demo of a parallel Traveling Sales Problem algorithm. We will also push the implementation to its limits in a high-contention demo. Great fun!

<hr />
Remember: Active until August 31st:
DCUG members can now get a 15% discount on JAOO tickets.
Simply click the banner below, choose "register here" and use the promotion code: dcug

<a href="http://trifork-affiliate-program.com/scripts/click.php?a_aid=dcug&amp;a_bid=93ef8336&amp;desturl=https%3A%2F%2Fsecure.trifork.com%2Faarhus-2009%2Fregistration%2F"><img title="JAOO Aarhus 2009 - The Conference for the 360 Degree software developer" src="http://trifork-affiliate-program.com/accounts/default1/banners/Jaoo_webbanner234X60_49okt.jpg" alt="JAOO Aarhus 2009 - The Conference for the 360 Degree software developer" width="234" height="60" /></a><img style="border:0" src="http://trifork-affiliate-program.com/scripts/imp.php?a_aid=dcug&amp;a_bid=93ef8336" alt="" width="1" height="1" /></ul> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date>2009-08-17 12:41:59</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A couple of reasons why Clojure may have a shot...</title>
		<link>http://blog.higher-order.net/?p=396</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=396</guid>
		<description></description>
		<content:encoded><![CDATA[I think Clojure may actually have a shot at getting popular.

Why? First, quality information is widely available in easily digestible formats (see references below). Rich Hickey is an excellent speaker, and I think it is hard to listen to him and not be intrigued. Further I think the language is so strong that once you get intrigued you do not abandon it. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date>2009-11-16 23:12:35</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A couple of reasons why Clojure may have a shot...</title>
		<link>http://blog.higher-order.net/?p=397</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=397</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date>2009-11-17 07:38:40</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Stomple RC1: Combining WebSockets and Reliable Messaging</title>
		<link>http://blog.higher-order.net/?p=526</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=526</guid>
		<description></description>
		<content:encoded><![CDATA[I've finished <a href="http://github.com/krukow/stomple">Release Candidate 1 for Stomple</a>, my JavaScript <a href="http://stomp.codehaus.org/Protocol">Stomp</a> library which uses WebSockets to access compatible Stomp Message Brokers (which includes JMS providers via <a href="http://stomp.codehaus.org/StompConnect">StompConnect</a>). Stomple is heavily inspired by Jeff Mesnil's great <a href="http://jmesnil.net/stomp-websocket/doc/">stomp-websocket</a>, but aims to be feature complete and to provide a high-level API which is more customizable, robust and easy to use. 

<strong>What</strong>? From the <a href="http://stomp.codehaus.org/Home">Stomp website</a>: <blockquote>Stomp provides an interoperable wire format so that any of the available Stomp Clients can communicate with any Stomp Message Broker to provide easy and widespread messaging interop among languages, platforms and brokers.</blockquote>
As mentioned, this includes JMS. Stomple is a JavaScript library which enables using browsers that support WebSockets as messaging clients, e.g., subscribing to an JMS topic in a JavaScript program running inside Chrome. 

This allows the <em>server</em> to push updates to the browser (as opposed to the usual HTTP request-response paradigm). For a simple example, see the <a href="http://screencast.com/t/NzdmMGJj">screen cast of the "transactional chat example"</a> where chat messages are pushed from the server to participating clients.
 
<strong>Why</strong> release stomple when there is already stomp-websocket? First of all, Jeff did an excellent job with stomp-websocket. However, I wanted additional features and I prefer an API that uses configuration-objects (i.e. most functions take a single object literal parameter which names the functions arguments). For example to create a Stomple client and to configure it to use destination 'jms.topic.chat' as default use:
<code><pre><tt>
var client = Stomple.create_client({
    url : "ws://localhost:61614/stomp",
    destination : "jms.topic.chat",
    login : "guest",
    passcode : "guest"
});
</tt></pre></code>
A different example would be subscribe:
<code><pre><tt>
client.subscribe({
    success: function(frame) {//called if subscribe succeeds within timeout-period
        //subscribe succeeded... do something
    },
    failure: function(spec) {//called if subscribe fails or times out
        console.log(spec.reason);
    },
    handler: function(msg) {//called when a message arrived ('this' is scope - see below) 
        this.received = msg.body;//"this" is "someObject"
    },
    scope: someObject
});
</tt></pre></code>
Note by the way that if <tt>client.autoConnect</tt> is true (which it is by default), then you don't have to explicitly connect. Stomple will automatically connect upon your first action. The subscribe function supports an optional destination parameter in-case a default wasn't supplied when the client object was created (or in case you want to subscribe to a non-default destination). 
<strong>How</strong>? ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>526</wp:post_id>
		<wp:post_date>2010-05-30 11:22:54</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript: alternative version of shared secrets</title>
		<link>http://blog.higher-order.net/?p=585</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=585</guid>
		<description></description>
		<content:encoded><![CDATA[In his <a href="http://video.yahoo.com/watch/111585/1027823">advanced JavaScript lectures</a>, Douglas Crockford presents a technique for "shared secrets". The idea is to share an object between two power constructor functions. Here is an example from <a href="http://yuiblog.com/assets/crockford/advancedjavascript.zip">his slides</a>:

<pre><tt><span class="keyword">function</span><span class="normal"> </span><span class="function">gizmo</span><span class="symbol">(</span><span class="normal">id</span><span class="symbol">,</span><span class="normal"> secret</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">    secret </span><span class="symbol">=</span><span class="normal"> secret </span><span class="symbol">||</span><span class="normal"> </span><span class="cbracket">{}</span><span class="symbol">;</span>
<span class="normal">    secret</span><span class="symbol">.</span><span class="normal">id </span><span class="symbol">=</span><span class="normal"> id</span><span class="symbol">;</span>
<span class="normal">    </span><span class="keyword">return</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">        toString</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="normal"> </span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">            </span><span class="keyword">return</span><span class="normal"> </span><span class="string">"gizmo "</span><span class="normal"> </span><span class="symbol">+</span><span class="normal"> secret</span><span class="symbol">.</span><span class="normal">id</span><span class="symbol">;</span>
<span class="normal">        </span><span class="cbracket">}</span>
<span class="normal">    </span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="cbracket">}</span>

<span class="keyword">function</span><span class="normal"> </span><span class="function">hoozit</span><span class="symbol">(</span><span class="normal">id</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">    </span><span class="keyword">var</span><span class="normal"> secret </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{}</span><span class="symbol">,</span><span class="normal">    </span><span class="regexp">/*final*/</span>
<span class="normal">        that </span><span class="symbol">=</span><span class="normal"> </span><span class="function">gizmo</span><span class="symbol">(</span><span class="normal">id</span><span class="symbol">,</span><span class="normal"> secret</span><span class="symbol">);</span>
<span class="normal">    that</span><span class="symbol">.</span><span class="normal">test </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">testid</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">        </span><span class="keyword">return</span><span class="normal"> testid </span><span class="symbol">===</span><span class="normal"> secret</span><span class="symbol">.</span><span class="normal">id</span><span class="symbol">;</span>
<span class="normal">    </span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">    </span><span class="keyword">return</span><span class="normal"> that</span><span class="symbol">;</span>
<span class="cbracket">}</span>
</tt></pre>

 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>585</wp:post_id>
		<wp:post_date>2010-06-30 23:21:27</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NoQuery is: Not Only jQuery.</title>
		<link>http://blog.higher-order.net/?p=675</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=675</guid>
		<description></description>
		<content:encoded><![CDATA[NoQuery is to JavaScript what NoSQL is to databases: 

<blockquote>
NoQuery is not meant as an Anti-jQuery movement, but emphasizes that we consider the <em>context</em> of the web applications we are building, and not always use a fixed JavaScript library by default. 
</blockquote>

It seems to me that many web developers automatically include jQuery without even thinking about it, simply as part of their project template [<a href="#html5boiler">1</a>, <a href="#m$">2</a>]. 


use jQuery by default and without   

<a href="http://www.doxdesk.com/img/updates/20091116-so-large.gif">equate JavaScript with jQuery</a> and 

<h2>References</h2>
<ul>
<li><a name="html5boiler"></a><a href="http://html5boilerplate.com/">http://html5boilerplate.com/</a></li>

<li><a name="m$"></a><a href="http://www.asp.net/ajax"></a></li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>675</wp:post_id>
		<wp:post_date>2010-10-13 21:54:48</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="libraries"><![CDATA[libraries]]></category>
		<category domain="post_tag" nicename="web-applications"><![CDATA[web applications]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>blog moved</title>
		<link>http://blog.higher-order.net/2008/07/21/blog-moved/</link>
		<pubDate>Mon, 21 Jul 2008 15:28:31 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[I've moved my blog to blog.higher-order.net -- welcome again ;-) ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2008-07-21 08:28:31</wp:post_date>
		<wp:post_date_gmt>2008-07-21 15:28:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-moved</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="add-new-tag"><![CDATA[Add new tag]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fun with with - part II</title>
		<link>http://blog.higher-order.net/2008/06/15/fun-with-with-part-ii/</link>
		<pubDate>Sun, 15 Jun 2008 19:46:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/06/15/fun-with-with-part-ii/</guid>
		<description></description>
		<content:encoded><![CDATA[Read this on the old blog. <a href="http://higher-order.blogspot.com/2008/06/fun-with-with-part-ii.html">Here</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2008-06-15 21:46:00</wp:post_date>
		<wp:post_date_gmt>2008-06-15 19:46:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fun-with-with-part-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/06/fun-with-with-part-ii.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Manual code specialization:a poor-mans partial evaluation in JavaScript</title>
		<link>http://blog.higher-order.net/2008/07/04/manual-code-specializationa-poor-mans-partial-evaluation-in-javascript/</link>
		<pubDate>Fri, 04 Jul 2008 17:46:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2008/07/04/manual-code-specializationa-poor-mans-partial-evaluation-in-javascript/</guid>
		<description></description>
		<content:encoded><![CDATA[Recall the object function that Douglas Crockford is promoting in his work on prototypal inheritance in JavaScript:
<pre><tt><strong><span style="color: #0000ff;">function</span></strong> <strong><span style="color: #000000;">object</span></strong><span style="color: #990000;">(</span>p<span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
   <strong><span style="color: #0000ff;">function</span></strong> <strong><span style="color: #000000;">F</span></strong><span style="color: #990000;">()</span><span style="color: #ff0000;">{}</span>
   F<span style="color: #990000;">.</span><strong><span style="color: #0000ff;">prototype</span></strong> <span style="color: #990000;">=</span> p<span style="color: #990000;">;</span>
   <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">F</span></strong><span style="color: #990000;">();</span>
<span style="color: #ff0000;">}</span>
</tt></pre>
The object function creates a new object which has the input object (p) as it's prototype.

On the <a href="http://groups.google.com/group/comp.lang.javascript/topics">comp.lang.javascript newsgroup</a> Richard Cornford showed a <a href="http://groups.google.com/group/comp.lang.javascript/msg/e04726a66face2a2">functionally equivalent version</a> which has better performance in general:
<pre><tt><tt><strong><span style="color: #0000ff;">var</span></strong> object <span style="color: #990000;">=</span> <span style="color: #990000;">(</span><strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span><span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">function</span></strong> <strong><span style="color: #000000;">F</span></strong><span style="color: #990000;">()</span><span style="color: #ff0000;">{}</span>
    <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">(</span>p<span style="color: #990000;">)</span><span style="color: #ff0000;">{</span>
        F<span style="color: #990000;">.</span><strong><span style="color: #0000ff;">prototype</span></strong> <span style="color: #990000;">=</span> p<span style="color: #990000;">;</span>
        <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">F</span></strong><span style="color: #990000;">();</span>
    <span style="color: #ff0000;">}</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span><span style="color: #990000;">)();</span></tt></tt></pre>
In this version, all invocations of object share the same F which has its prototype mutated with each call. Cornford argues:
<blockquote><tt>[The first version of 'object']... is an example of the process that clearly expresses what is being done, but is not particularly efficient as it creates a new - F - function each time it is executed, but all of those - F - functions are essentially identical. If this is to be done often then a more efficient approach would be to only create a single - F - function and put it where it could not be modified by external code.</tt></blockquote>
Now, it is important to notice that in general one has to be careful when applying this technique to recursive functions as a variable mutation in one level of recursion may affect others. Also, if we were to put threads into JavaScript, this code would go from being thread-safe in the original form to non-thread safe in the optimized form. However, for now, this technique can be applied in performance-critical functions.

In fact, there is a general technique here that one might call code specialization via higher-order functions (which can be seen as a poor-mans form of partial evaluation). Here is a simple example of that general technique: The 'mk_tag' function creates the string for an html tag with a class attribute and a text-contents.
<pre><tt><strong><span style="color: #0000ff;">function</span></strong> <strong><span style="color: #000000;">mk_tag</span></strong><span style="color: #990000;">(</span>tag_name<span style="color: #990000;">,</span>clazz<span style="color: #990000;">,</span>contents<span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
   <strong><span style="color: #0000ff;">return</span></strong> <span style="color: #ff0000;">'&lt;'</span><span style="color: #990000;">+</span>tag_name<span style="color: #990000;">+</span><span style="color: #ff0000;">' class="'</span><span style="color: #990000;">+</span>clazz<span style="color: #990000;">+</span><span style="color: #ff0000;">'"&gt;'</span><span style="color: #990000;">+</span>contents<span style="color: #990000;">+</span><span style="color: #ff0000;">'&lt;/'</span><span style="color: #990000;">+</span>tag_name<span style="color: #990000;">+</span><span style="color: #ff0000;">'&gt;'</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>
</tt></pre>
Using code specialization via higher-order functions (by currying), we can make specialized functions for writing e.g. 'div' tags, and specialized (faster) functions for making 'div' tags with certain classes. The trick is to compute as much as is possible with the given inputs before returning the specialized function:
<pre><tt><em><span style="color: #9a1900;">//a curried version which specializes to it's input</span></em>
<strong><span style="color: #0000ff;">function</span></strong> <strong><span style="color: #000000;">curried_mk_tag</span></strong><span style="color: #990000;">(</span>tag_name<span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
  <strong><span style="color: #0000ff;">var</span></strong> tag_hd <span style="color: #990000;">=</span> <span style="color: #ff0000;">'&lt;'</span><span style="color: #990000;">+</span>tag_name<span style="color: #990000;">+</span><span style="color: #ff0000;">' class="'</span><span style="color: #990000;">,</span>
      tag_tail <span style="color: #990000;">=</span> <span style="color: #ff0000;">'&lt;/'</span><span style="color: #990000;">+</span>tag_name<span style="color: #990000;">+</span><span style="color: #ff0000;">'&gt;'</span><span style="color: #990000;">;</span>
  <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">(</span>clazz<span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
     <strong><span style="color: #0000ff;">var</span></strong> head <span style="color: #990000;">=</span> tag_hd<span style="color: #990000;">+</span>clazz<span style="color: #990000;">+</span><span style="color: #ff0000;">'"&gt;'</span><span style="color: #990000;">;</span>
     <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">(</span>contents<span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
         <strong><span style="color: #0000ff;">return</span></strong> head<span style="color: #990000;">+</span>contents<span style="color: #990000;">+</span>tag_tail<span style="color: #990000;">;</span>
     <span style="color: #ff0000;">}</span><span style="color: #990000;">;</span>
  <span style="color: #ff0000;">}</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span>

<strong><span style="color: #0000ff;">var</span></strong> mk_div <span style="color: #990000;">=</span> <strong><span style="color: #000000;">curried_mk_tag</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">"div"</span><span style="color: #990000;">);</span>
<strong><span style="color: #0000ff;">var</span></strong> mk_div_green <span style="color: #990000;">=</span> <strong><span style="color: #000000;">mk_div</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">"green"</span><span style="color: #990000;">);</span>
<strong><span style="color: #0000ff;">var</span></strong> mk_div_blue <span style="color: #990000;">=</span> <strong><span style="color: #000000;">mk_div</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">"blue"</span><span style="color: #990000;">);</span>
<strong><span style="color: #000000;">mk_div_green</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">"karl"</span><span style="color: #990000;">)</span><em><span style="color: #9a1900;">//&lt;-- "&lt;div class="green"&gt;karl&lt;/div&gt;"</span></em>
<strong><span style="color: #000000;">mk_div_blue</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">"karl"</span><span style="color: #990000;">)</span><em><span style="color: #9a1900;">//&lt;-- "&lt;div class="blue"&gt;karl&lt;/div&gt;"</span></em>
</tt></pre>
This is elegant as functions can be reused, e.g., 'mk_div_green("karl");mk_div_green("krukow")'. But notice that it is more efficient than simply using a general currier (e.g., <a href="http://www.dustindiaz.com/javascript-curry/">Diaz</a>); essentially it is a form of manual partial evaluation.

I'll post some performance measurements in a later posting, but initial results show that we can reduce execution time by roughly 40% by using the sharing form of the object function.
<h2>More Examples</h2>
I'm not sure how many JavaScript programmers are familiar with this type of optimization. Here are a bunch of real-world examples where it can be applied:

<em>Prototype - Ajax.request function</em>
<pre><tt><strong><span style="color: #0000ff;">var</span></strong> Ajax <span style="color: #990000;">=</span> <span style="color: #ff0000;">{</span><em><span style="color: #9a1900;">//original</span></em>
  getTransport<span style="color: #990000;">:</span> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">return</span></strong> Try<span style="color: #990000;">.</span><strong><span style="color: #000000;">these</span></strong><span style="color: #990000;">(</span>
      <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span><strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">XMLHttpRequest</span></strong><span style="color: #990000;">()</span><span style="color: #ff0000;">}</span><span style="color: #990000;">,</span>
      <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span><strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">ActiveXObject</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">'Msxml2.XMLHTTP'</span><span style="color: #990000;">)</span><span style="color: #ff0000;">}</span><span style="color: #990000;">,</span>
      <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span><strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">ActiveXObject</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">'Microsoft.XMLHTTP'</span><span style="color: #990000;">)</span><span style="color: #ff0000;">}</span>
    <span style="color: #990000;">)</span> <span style="color: #990000;">||</span> <strong><span style="color: #0000ff;">false</span></strong><span style="color: #990000;">;</span>  <span style="color: #ff0000;">}</span><span style="color: #990000;">,</span>

  activeRequestCount<span style="color: #990000;">:</span> <span style="color: #993399;">0</span>
<span style="color: #ff0000;">}</span><span style="color: #990000;">;</span>
</tt></pre>
The thing to notice here is that every time getTransport is called prototype will recompute which XMLHttp transport to use. However, the result of Try.these will always  be the same in a particular run of Prototype, i.e., the showing of a page in one browser. So we might as well precompute which object is the correct one:
<pre><tt><strong><span style="color: #0000ff;">var</span></strong> Ajax <span style="color: #990000;">=</span> <span style="color: #ff0000;">{</span><em><span style="color: #9a1900;">//modified form</span></em>
  getTransport<span style="color: #990000;">:</span> Try<span style="color: #990000;">.</span><strong><span style="color: #000000;">these</span></strong><span style="color: #990000;">(</span>
         <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">XMLHttpRequest</span></strong><span style="color: #990000;">();</span> <em><span style="color: #9a1900;">//test if it exists</span></em>
            <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span><strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">XMLHttpRequest</span></strong><span style="color: #990000;">();</span><span style="color: #ff0000;">}</span>
         <span style="color: #ff0000;">}</span><span style="color: #990000;">,</span>
         <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">ActiveXObject</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">'Msxml2.XMLHTTP'</span><span style="color: #990000;">);</span> <em><span style="color: #9a1900;">//test</span></em>
            <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span><strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">ActiveXObject</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">'Msxml2.XMLHTTP'</span><span style="color: #990000;">);</span> <span style="color: #ff0000;">}</span>
         <span style="color: #ff0000;">}</span><span style="color: #990000;">,</span>
         <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">ActiveXObject</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">'Microsoft.XMLHTTP'</span><span style="color: #990000;">);</span>
            <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span> <span style="color: #ff0000;">{</span><strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">new</span></strong> <strong><span style="color: #000000;">ActiveXObject</span></strong><span style="color: #990000;">(</span><span style="color: #ff0000;">'Microsoft.XMLHTTP'</span><span style="color: #990000;">);</span> <span style="color: #ff0000;">}</span>
         <span style="color: #ff0000;">}</span><span style="color: #990000;">),</span>

  activeRequestCount<span style="color: #990000;">:</span> <span style="color: #993399;">0</span>
<span style="color: #ff0000;">}</span><span style="color: #990000;">;</span></tt></pre>
<tt><em>jQuery - attr function</em></tt>
<pre><tt><tt>attr<span style="color: #990000;">:</span> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">(</span> name<span style="color: #990000;">,</span> value<span style="color: #990000;">,</span> type <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
 <strong><span style="color: #0000ff;">var</span></strong> options <span style="color: #990000;">=</span> name<span style="color: #990000;">;</span>

 <em><span style="color: #9a1900;">// Look for the case where we're accessing a style value</span></em>
 <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> name<span style="color: #990000;">.</span>constructor <span style="color: #990000;">==</span> String <span style="color: #990000;">)</span>
  <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> value <span style="color: #990000;">===</span> undefined <span style="color: #990000;">)</span>
   <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">[</span><span style="color: #993399;">0</span><span style="color: #990000;">]</span> <span style="color: #990000;">&amp;</span>amp<span style="color: #990000;">;&amp;</span>amp<span style="color: #990000;">;</span> jQuery<span style="color: #990000;">[</span> type <span style="color: #990000;">||</span> <span style="color: #ff0000;">"attr"</span> <span style="color: #990000;">](</span> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">[</span><span style="color: #993399;">0</span><span style="color: #990000;">],</span> name <span style="color: #990000;">);</span>

  <strong><span style="color: #0000ff;">else</span></strong> <span style="color: #ff0000;">{</span>
   options <span style="color: #990000;">=</span> <span style="color: #ff0000;">{}</span><span style="color: #990000;">;</span>
   options<span style="color: #990000;">[</span> name <span style="color: #990000;">]</span> <span style="color: #990000;">=</span> value<span style="color: #990000;">;</span>
  <span style="color: #ff0000;">}</span>

  <em><span style="color: #9a1900;">// Check to see if we're setting style values</span></em>
 <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">.</span><strong><span style="color: #000000;">each</span></strong><span style="color: #990000;">(</span><strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">(</span>i<span style="color: #990000;">)</span><span style="color: #ff0000;">{</span>
  <em><span style="color: #9a1900;">// Set all the styles</span></em>
  <strong><span style="color: #0000ff;">for</span></strong> <span style="color: #990000;">(</span> name <strong><span style="color: #0000ff;">in</span></strong> options <span style="color: #990000;">)</span>
   jQuery<span style="color: #990000;">.</span><strong><span style="color: #000000;">attr</span></strong><span style="color: #990000;">(</span>    type <span style="color: #990000;">?</span>  <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">.</span>style <span style="color: #990000;">:</span>     <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">,</span>
    name<span style="color: #990000;">,</span> jQuery<span style="color: #990000;">.</span><strong><span style="color: #000000;">prop</span></strong><span style="color: #990000;">(</span> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">,</span> options<span style="color: #990000;">[</span> name <span style="color: #990000;">],</span> type<span style="color: #990000;">,</span> i<span style="color: #990000;">,</span> name <span style="color: #990000;">)</span>   <span style="color: #990000;">);</span>
 <span style="color: #ff0000;">}</span><span style="color: #990000;">);</span>
<span style="color: #ff0000;">}</span></tt></tt></pre>
With jQuery we can't write a curried form as that would break compatability. However, we can still perform optimizations like what we had with the 'object' function. Notice that the function supplied to 'each' is created with each invocation of 'attr', you can also see a for-loop where a check to 'type' is made with each iteration. In our optimized version, attr chooses which inner function to give to 'each' by checking type first.
<pre><tt><tt>jQuery<span style="color: #990000;">.</span>fn<span style="color: #990000;">.</span>attr <span style="color: #990000;">=</span> <span style="color: #990000;">(</span><strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">()</span><span style="color: #ff0000;">{</span>
    <strong><span style="color: #0000ff;">var</span></strong> type<span style="color: #990000;">,</span>
        options<span style="color: #990000;">,</span>
        inner_type <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">(</span>i<span style="color: #990000;">)</span><span style="color: #ff0000;">{</span>
          <em><span style="color: #9a1900;">// Set all the styles</span></em>
          <strong><span style="color: #0000ff;">var</span></strong> t  <span style="color: #990000;">=</span> type<span style="color: #990000;">,</span>
              s  <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">.</span>style<span style="color: #990000;">;</span>
          <strong><span style="color: #0000ff;">for</span></strong> <span style="color: #990000;">(</span><strong><span style="color: #0000ff;">var</span></strong> name <strong><span style="color: #0000ff;">in</span></strong> options <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
              jQuery<span style="color: #990000;">.</span><strong><span style="color: #000000;">attr</span></strong><span style="color: #990000;">(</span>s<span style="color: #990000;">,</span>
                          name<span style="color: #990000;">,</span>
                           jQuery<span style="color: #990000;">.</span><strong><span style="color: #000000;">prop</span></strong><span style="color: #990000;">(</span> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">,</span> options<span style="color: #990000;">[</span> name <span style="color: #990000;">],</span> t<span style="color: #990000;">,</span> i<span style="color: #990000;">,</span> name <span style="color: #990000;">)</span>
              <span style="color: #990000;">);</span>
          <span style="color: #ff0000;">}</span>
        <span style="color: #ff0000;">}</span><span style="color: #990000;">,</span>
        inner_no_type <span style="color: #990000;">=</span> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">(</span>i<span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
          <strong><span style="color: #0000ff;">for</span></strong> <span style="color: #990000;">(</span><strong><span style="color: #0000ff;">var</span></strong> name <strong><span style="color: #0000ff;">in</span></strong> options <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
              jQuery<span style="color: #990000;">.</span><strong><span style="color: #000000;">attr</span></strong><span style="color: #990000;">(</span><strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">,</span>
                          name<span style="color: #990000;">,</span>
                           jQuery<span style="color: #990000;">.</span><strong><span style="color: #000000;">prop</span></strong><span style="color: #990000;">(</span> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">,</span> options<span style="color: #990000;">[</span> name <span style="color: #990000;">],</span> <strong><span style="color: #0000ff;">null</span></strong><span style="color: #990000;">,</span> i<span style="color: #990000;">,</span> name <span style="color: #990000;">)</span>
              <span style="color: #990000;">);</span>
          <span style="color: #ff0000;">}</span>
        <span style="color: #ff0000;">}</span><span style="color: #990000;">;</span>

    <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">function</span></strong><span style="color: #990000;">(</span> name<span style="color: #990000;">,</span> value<span style="color: #990000;">,</span> t <span style="color: #990000;">)</span> <span style="color: #ff0000;">{</span>
                type <span style="color: #990000;">=</span> t<span style="color: #990000;">;</span>
                options <span style="color: #990000;">=</span> name<span style="color: #990000;">;</span>
  <em><span style="color: #9a1900;">// Look for the case where we're accessing a style value</span></em>
  <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> name<span style="color: #990000;">.</span>constructor <span style="color: #990000;">==</span> String <span style="color: #990000;">)</span>
   <strong><span style="color: #0000ff;">if</span></strong> <span style="color: #990000;">(</span> value <span style="color: #990000;">===</span> undefined <span style="color: #990000;">)</span>
    <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">[</span><span style="color: #993399;">0</span><span style="color: #990000;">]</span> <span style="color: #990000;">&amp;</span>amp<span style="color: #990000;">;&amp;</span>amp<span style="color: #990000;">;</span> jQuery<span style="color: #990000;">[</span> type <span style="color: #990000;">||</span> <span style="color: #ff0000;">"attr"</span> <span style="color: #990000;">](</span> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">[</span><span style="color: #993399;">0</span><span style="color: #990000;">],</span> name <span style="color: #990000;">);</span>

   <strong><span style="color: #0000ff;">else</span></strong> <span style="color: #ff0000;">{</span>
    options <span style="color: #990000;">=</span> <span style="color: #ff0000;">{}</span><span style="color: #990000;">;</span>
    options<span style="color: #990000;">[</span> name <span style="color: #990000;">]</span> <span style="color: #990000;">=</span> value<span style="color: #990000;">;</span>
   <span style="color: #ff0000;">}</span>

  <em><span style="color: #9a1900;">// Check to see if we're setting style values</span></em>
  <strong><span style="color: #0000ff;">return</span></strong> <strong><span style="color: #0000ff;">this</span></strong><span style="color: #990000;">.</span><strong><span style="color: #000000;">each</span></strong><span style="color: #990000;">(</span>t <span style="color: #990000;">?</span> inner_type <span style="color: #990000;">:</span> inner_no_type<span style="color: #990000;">);</span>
 <span style="color: #ff0000;">}</span><span style="color: #990000;">;</span>
<span style="color: #ff0000;">}</span><span style="color: #990000;">)();</span></tt></tt></pre>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2008-07-04 19:46:00</wp:post_date>
		<wp:post_date_gmt>2008-07-04 17:46:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>manual-code-specializationa-poor-mans-partial-evaluation-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="closures"><![CDATA[closures]]></category>
		<category domain="category" nicename="code-specialization"><![CDATA[code specialization]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="partial-evaluation"><![CDATA[partial evaluation]]></category>
		<category domain="category" nicename="performance"><![CDATA[performance]]></category>
		<category domain="category" nicename="sharing"><![CDATA[sharing]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[higher-order.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[krukowhttp://www.blogger.com/profile/02045796732071392830noreply@blogger.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2008/07/manual-code-specialization-poor-mans.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Syntax-highlighting in web pages</title>
		<link>http://blog.higher-order.net/2008/07/29/syntax-highlighting-in-web-pages/</link>
		<pubDate>Tue, 29 Jul 2008 14:00:09 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[I've recently moved my blog to <a href="http://blog.higher-order.net">http://blog.higher-order.net</a>. In this transition I used Wordpress' feature of importing blog content from my old blog: <a href="http://higher-order.blogspot.com">higher-order.blogspot.com</a>. Unfortunately all the line-breaks from the pre-formatted JavaScript source code disappeared in the process, and so, I will have to insert it manually.

This whole process reminded me that I would really prefer to have syntax-highlighting for code-sniplets in the blog. A little bit of searching lead to <a href="http://www.gnu.org/software/src-highlite/">GNU Source-highlight</a>. After a little fight with the make system, I managed to install it on Mac OS X -- it is looks really neat (even in the default style), and it's simple to use. 

However, the main reason I'm using this tool is not presentation: When writing the source code presentation manually in HTML one has to remember to escape characters like &lt;. This means that the transformed source (i.e. the HTML-fragment) is no longer a syntactically correct program in the programming language of the code-snipplet, which means we can't just paste it into an interpreter to check if it works. Sometimes this leads to people posting code which isn't even syntactically valid... If you instead maintain a file which holds the syntactically correct source code (and using a smart editor you will immediately see stupid syntax errors instead of having blog-readers find those errors). You can then compile the source code to HTML using the Source-highlight tool. This is significantly less error prone, and the quality improves.

Here is the namespace function from <a href="http://blog.higher-order.net/2008/02/18/designing-clientserver-web-applications/">a previous post</a>.
<pre><tt><span class="keyword">function</span><span class="normal"> </span><span class="function">namespace</span><span class="symbol">(</span><span class="normal">spec</span><span class="symbol">,</span><span class="normal">context</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   </span><span class="keyword">var</span><span class="normal"> validIdentifier </span><span class="symbol">=</span><span class="normal"> </span><span class="regexp">/^(?:[a-zA-Z_]\w*[.])*[a-zA-Z_]\w*$/</span><span class="symbol">,</span>
<span class="normal">       i</span><span class="symbol">,</span><span class="normal">N</span><span class="symbol">;</span>
<span class="normal">   context </span><span class="symbol">=</span><span class="normal"> context </span><span class="symbol">||</span><span class="normal"> window</span><span class="symbol">;</span>
<span class="normal">   spec </span><span class="symbol">=</span><span class="normal"> spec</span><span class="symbol">.</span><span class="function">valueOf</span><span class="symbol">();</span>
<span class="normal">   </span><span class="keyword">if</span><span class="normal"> </span><span class="symbol">(</span><span class="keyword">typeof</span><span class="normal"> spec </span><span class="symbol">===</span><span class="normal"> </span><span class="string">'object'</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">      </span><span class="keyword">if</span><span class="normal"> </span><span class="symbol">(</span><span class="keyword">typeof</span><span class="normal"> spec</span><span class="symbol">.</span><span class="normal">length </span><span class="symbol">===</span><span class="normal"> </span><span class="string">'number'</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span><span class="comment">//assume an array-like object</span>
<span class="normal">         </span><span class="keyword">for</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">i</span><span class="symbol">=</span><span class="number">0</span><span class="symbol">,</span><span class="normal">N</span><span class="symbol">=</span><span class="normal">spec</span><span class="symbol">.</span><span class="normal">length</span><span class="symbol">;</span><span class="normal">i</span><span class="symbol">&lt;</span><span class="normal">N</span><span class="symbol">;</span><span class="normal">i</span><span class="symbol">++)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">             </span><span class="function">namespace</span><span class="symbol">(</span><span class="normal">spec</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">],</span><span class="normal">context</span><span class="symbol">);</span>
<span class="normal">         </span><span class="cbracket">}</span>
<span class="normal">      </span><span class="cbracket">}</span>
<span class="normal">      </span><span class="keyword">else</span><span class="normal"> </span><span class="cbracket">{</span><span class="comment">//spec is a specification object e.g, {com: {trifork: ['model,view']}}</span>
<span class="normal">         </span><span class="keyword">for</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">i </span><span class="keyword">in</span><span class="normal"> spec</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">if</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">spec</span><span class="symbol">.</span><span class="function">hasOwnProperty</span><span class="symbol">(</span><span class="normal">i</span><span class="symbol">))</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">            context</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> context</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">||</span><span class="normal"> </span><span class="cbracket">{}</span><span class="symbol">;</span>
<span class="normal">            </span><span class="function">namespace</span><span class="symbol">(</span><span class="normal">spec</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">],</span><span class="normal"> context</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">]);</span><span class="comment">//recursively descend tree</span>
<span class="normal">         </span><span class="cbracket">}</span>
<span class="normal">      </span><span class="cbracket">}</span>
<span class="normal">   </span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">else</span><span class="normal"> </span><span class="keyword">if</span><span class="normal"> </span><span class="symbol">(</span><span class="keyword">typeof</span><span class="normal"> spec </span><span class="symbol">===</span><span class="normal"> </span><span class="string">'string'</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">          </span><span class="symbol">(</span><span class="keyword">function</span><span class="normal"> </span><span class="function">handleStringCase</span><span class="symbol">()</span><span class="cbracket">{</span>
<span class="normal">              </span><span class="keyword">var</span><span class="normal"> parts</span><span class="symbol">;</span>
<span class="normal">              </span><span class="keyword">if</span><span class="normal"> </span><span class="symbol">(!</span><span class="normal">validIdentifier</span><span class="symbol">.</span><span class="function">test</span><span class="symbol">(</span><span class="normal">spec</span><span class="symbol">))</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">                </span><span class="keyword">throw</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">Error</span><span class="symbol">(</span><span class="string">'"'</span><span class="symbol">+</span><span class="normal">spec</span><span class="symbol">+</span><span class="string">'" is not a valid name for a package.'</span><span class="symbol">);</span>
<span class="normal">              </span><span class="cbracket">}</span>
<span class="normal">              parts </span><span class="symbol">=</span><span class="normal"> spec</span><span class="symbol">.</span><span class="function">split</span><span class="symbol">(</span><span class="string">'.'</span><span class="symbol">);</span>
<span class="normal">              </span><span class="keyword">for</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">i</span><span class="symbol">=</span><span class="number">0</span><span class="symbol">,</span><span class="normal">N</span><span class="symbol">=</span><span class="normal">parts</span><span class="symbol">.</span><span class="normal">length</span><span class="symbol">;</span><span class="normal">i</span><span class="symbol">&lt;</span><span class="normal">N</span><span class="symbol">;</span><span class="normal">i</span><span class="symbol">++)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">                  spec </span><span class="symbol">=</span><span class="normal"> parts</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">];</span>
<span class="normal">                  context</span><span class="symbol">[</span><span class="normal">spec</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> context</span><span class="symbol">[</span><span class="normal">spec</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">||</span><span class="normal"> </span><span class="cbracket">{}</span><span class="symbol">;</span>
<span class="normal">                  context </span><span class="symbol">=</span><span class="normal"> context</span><span class="symbol">[</span><span class="normal">spec</span><span class="symbol">];</span>
<span class="normal">              </span><span class="cbracket">}</span>
<span class="normal">           </span><span class="cbracket">}</span><span class="symbol">)();</span>
<span class="normal">    </span><span class="cbracket">}</span><span class="normal">  </span><span class="keyword">else</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">       </span><span class="keyword">throw</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">TypeError</span><span class="symbol">();</span>
<span class="normal">   </span><span class="cbracket">}</span>
<span class="cbracket">}</span></tt></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2008-07-29 16:00:09</wp:post_date>
		<wp:post_date_gmt>2008-07-29 14:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>syntax-highlighting-in-web-pages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Keeping it dry: Generating JavaScript models from Rails models</title>
		<link>http://blog.higher-order.net/2008/08/12/keeping-it-dry/</link>
		<pubDate>Tue, 12 Aug 2008 18:22:42 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[As I've mentioned <a href="http://higher-order.blogspot.com/2008/03/clientserver-web-apps-model-part-i.html">before</a>, I advocate using a Model-View-Controller pattern for certain types of JavaScript-heavy web-app clients. In spite of recent licensing issues, I still think ExtJS is among the better libraries supporting MVC. For example, (if you don't know what namespace/using are, please read <a href="http://blog.higher-order.net/2008/02/18/designing-clientserver-web-applications/">this</a>)
<pre><tt><span class="function">namespace</span><span class="symbol">(</span><span class="string">'dk.okooko.model'</span><span class="symbol">);</span>
<span class="function">using</span><span class="symbol">(</span><span class="normal">dk</span><span class="symbol">.</span><span class="normal">okooko</span><span class="symbol">.</span><span class="normal">model</span><span class="symbol">).</span><span class="function">run</span><span class="symbol">(</span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">m</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">        </span>
<span class="normal">        m</span><span class="symbol">.</span><span class="normal">OrderItem </span><span class="symbol">=</span><span class="normal"> Ext</span><span class="symbol">.</span><span class="normal">data</span><span class="symbol">.</span><span class="normal">Record</span><span class="symbol">.</span><span class="function">create</span><span class="symbol">([</span>
<span class="normal">          </span><span class="cbracket">{</span><span class="string">"type"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"int"</span><span class="symbol">,</span><span class="normal"> </span><span class="string">"name"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"id"</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">          </span><span class="cbracket">{</span><span class="string">"type"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"int"</span><span class="symbol">,</span><span class="normal"> </span><span class="string">"name"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"product_id"</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">          </span><span class="cbracket">{</span><span class="string">"type"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"int"</span><span class="symbol">,</span><span class="normal"> </span><span class="string">"name"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"quantity"</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">          </span><span class="cbracket">{</span><span class="string">"type"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"int"</span><span class="symbol">,</span><span class="normal"> </span><span class="string">"name"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"order_id"</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">          </span><span class="cbracket">{</span><span class="string">"type"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"date"</span><span class="symbol">,</span><span class="normal"> </span><span class="string">"format"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"d/m/Y-H:i"</span><span class="symbol">,</span><span class="normal"> </span><span class="string">"name"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"created_at"</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">          </span><span class="cbracket">{</span><span class="string">"type"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"date"</span><span class="symbol">,</span><span class="normal"> </span><span class="string">"format"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"d/m/Y-H:i"</span><span class="symbol">,</span><span class="normal"> </span><span class="string">"name"</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"updated_at"</span><span class="cbracket">}</span>
<span class="normal">        </span><span class="symbol">]);</span>

<span class="cbracket">}</span><span class="symbol">);</span>
</tt></pre>
The 'Record.create' function gives a way of succinctly creating constructor functions for model objects which are supported throughout the Ext functions; you can read more about it <a href="http://blog.higher-order.net/2008/03/18/extending-extdatarecord-to-support-inheritance-for-domain-types/">here</a>. 

If you are using Ruby on Rails at server-side (something which I have been doing quite a bit recently), then you realize that you are manually duplicating all the rails model classes in JavaScript. For example, here is the corresponding migration:
<pre><tt><span class="keyword">class</span><span class="normal"> CreateOrderItems </span><span class="symbol">&lt;</span><span class="normal"> ActiveRecord</span><span class="symbol">::</span><span class="normal">Migration</span>
<span class="normal">  </span><span class="keyword">def</span><span class="normal"> </span><span class="keyword">self</span><span class="symbol">.</span><span class="normal">up</span>
<span class="normal">    create_table </span><span class="symbol">:</span><span class="normal">order_items </span><span class="keyword">do</span><span class="normal"> </span><span class="symbol">|</span><span class="normal">t</span><span class="symbol">|</span>
<span class="normal">      t</span><span class="symbol">.</span><span class="normal">integer </span><span class="symbol">:</span><span class="normal">product_id</span>
<span class="normal">      t</span><span class="symbol">.</span><span class="normal">integer </span><span class="symbol">:</span><span class="normal">quantity</span>
<span class="normal">      t</span><span class="symbol">.</span><span class="normal">integer </span><span class="symbol">:</span><span class="normal">order_id</span>

<span class="normal">      t</span><span class="symbol">.</span><span class="normal">timestamps</span>
<span class="normal">    </span><span class="keyword">end</span>
<span class="normal">  </span><span class="keyword">end</span>

<span class="normal">  </span><span class="keyword">def</span><span class="normal"> </span><span class="keyword">self</span><span class="symbol">.</span><span class="normal">down</span>
<span class="normal">    drop_table </span><span class="symbol">:</span><span class="normal">order_items</span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="keyword">end</span>
</tt></pre> 
I was annoyed by this lack of dryness: whenever I changed the migration, I'd have to manually change the corresponding JS model. So I slapped together a really simple code generator which can create the model files from the rails models. It adds a method acts_as_jsmodel which is intended to be called by a rails model class, e.g.,

<pre><tt><span class="keyword">class</span><span class="normal"> OrderItem </span><span class="symbol">&lt;</span><span class="normal"> ActiveRecord</span><span class="symbol">::</span><span class="normal">Base</span>
<span class="normal">  belongs_to </span><span class="symbol">:</span><span class="normal">order</span>
<span class="normal">  belongs_to </span><span class="symbol">:</span><span class="normal">product</span>
<span class="normal">  has_one </span><span class="symbol">:</span><span class="normal">order_item_status</span>
<span class="normal">  acts_as_jsmodel</span>
<span class="keyword">end</span>
</tt></pre>

So you can annotate model classes that you'd like to generate js models for. The acts_as_jsmodel causes a file to be written to public/javascripts/dk/okooko/model (generally, it depends on a constant APP_NAMESPACE).

Here is the code for the generator:
<pre><tt><span class="keyword">module</span><span class="normal"> Trifork</span>
<span class="normal">  </span><span class="keyword">module</span><span class="normal"> JSModel </span>
<span class="normal">          </span>
<span class="normal">    JS_MODEL_DIR </span><span class="symbol">=</span><span class="normal"> </span><span class="string">"public/javascripts/#{APP_NAMESPACE}/model"</span><span class="symbol">.</span><span class="normal">gsub!</span><span class="symbol">(</span><span class="string">'.'</span><span class="symbol">,</span><span class="string">'/'</span><span class="symbol">)</span>
<span class="normal">    MODEL_PACKAGE </span><span class="symbol">=</span><span class="normal"> APP_NAMESPACE </span><span class="symbol">+</span><span class="normal"> </span><span class="string">'.model'</span>
<span class="normal">    </span><span class="keyword">def</span><span class="normal"> acts_as_jsmodel</span>
<span class="normal">      </span>
<span class="normal">      export_record </span><span class="string">"#{JS_MODEL_DIR}/#{self}.js"</span><span class="normal"> </span>
<span class="normal">      </span><span class="keyword">rescue</span><span class="normal"> </span>
<span class="normal">        </span><span class="keyword">nil</span>
<span class="normal">    </span><span class="keyword">end</span>
<span class="normal">      </span>
<span class="normal">    </span><span class="keyword">def</span><span class="normal"> export_record</span><span class="symbol">(</span><span class="normal">fn</span><span class="symbol">)</span>
<span class="normal">      File</span><span class="symbol">.</span><span class="normal">open</span><span class="symbol">(</span><span class="normal">fn</span><span class="symbol">,</span><span class="string">'w'</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">do</span><span class="normal"> </span><span class="symbol">|</span><span class="normal">f</span><span class="symbol">|</span>
<span class="normal">        s </span><span class="symbol">=&lt;&lt;</span><span class="keyword">END</span>
<span class="normal">namespace</span><span class="symbol">(</span><span class="string">'#{MODEL_PACKAGE}'</span><span class="symbol">);</span>
<span class="normal">using</span><span class="symbol">(#</span><span class="cbracket">{</span><span class="normal">MODEL_PACKAGE</span><span class="cbracket">}</span><span class="symbol">).</span><span class="normal">run</span><span class="symbol">(</span><span class="normal">function</span><span class="symbol">(</span><span class="normal">m</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">        </span>
<span class="normal">        m</span><span class="symbol">.#</span><span class="cbracket">{</span><span class="keyword">self</span><span class="cbracket">}</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> Ext</span><span class="symbol">.</span><span class="normal">data</span><span class="symbol">.</span><span class="normal">Record</span><span class="symbol">.</span><span class="normal">create</span><span class="symbol">([</span>
<span class="normal">          </span><span class="symbol">#</span><span class="cbracket">{</span><span class="keyword">self</span><span class="symbol">.</span><span class="normal">to_record</span><span class="cbracket">}</span>
<span class="normal">        </span><span class="symbol">]);</span>

<span class="cbracket">}</span><span class="symbol">);</span>
<span class="keyword">END</span>
<span class="normal">        f</span><span class="symbol">.</span><span class="normal">write s</span>
<span class="normal">      </span><span class="keyword">end</span>
<span class="normal">    </span><span class="keyword">end</span>
<span class="normal">      </span>
<span class="normal">      </span>
<span class="normal">    </span><span class="keyword">def</span><span class="normal"> to_record</span><span class="symbol">(</span><span class="normal">spec </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{}</span><span class="symbol">,</span><span class="normal">datefm</span><span class="symbol">=</span><span class="keyword">nil</span><span class="symbol">)</span>
<span class="normal">      spec</span><span class="symbol">[:</span><span class="normal">exclude</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">||=</span><span class="normal"> </span><span class="symbol">[]</span>
<span class="normal">      keys </span><span class="symbol">=</span><span class="normal"> spec</span><span class="symbol">[:</span><span class="normal">only</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">?</span><span class="normal"> </span><span class="symbol">[*</span><span class="normal">spec</span><span class="symbol">[:</span><span class="normal">only</span><span class="symbol">]]</span><span class="normal"> </span><span class="symbol">:</span><span class="normal"> </span>
<span class="normal">              </span><span class="symbol">(</span><span class="normal">columns</span><span class="symbol">.</span><span class="normal">map </span><span class="symbol">&amp;:</span><span class="normal">name</span><span class="symbol">).</span><span class="normal">reject </span><span class="cbracket">{</span><span class="symbol">|</span><span class="normal">a</span><span class="symbol">|</span><span class="normal"> spec</span><span class="symbol">[:</span><span class="normal">exclude</span><span class="symbol">].</span><span class="normal">include?a</span><span class="cbracket">}</span>
<span class="normal">      props </span><span class="symbol">=</span><span class="normal"> columns_hash</span>
<span class="normal">      </span>
<span class="normal">      keys</span><span class="symbol">.</span><span class="normal">map </span><span class="keyword">do</span><span class="normal"> </span><span class="symbol">|</span><span class="normal">k</span><span class="symbol">|</span>
<span class="normal">        p </span><span class="symbol">=</span><span class="normal"> props</span><span class="symbol">[</span><span class="normal">k</span><span class="symbol">.</span><span class="normal">to_s</span><span class="symbol">]</span>
<span class="normal">        </span><span class="keyword">if</span><span class="normal"> p</span><span class="symbol">.</span><span class="normal">nil?</span>
<span class="normal">          </span><span class="keyword">raise</span><span class="normal"> </span><span class="string">"Property #{p} is not a column of #{self}"</span>
<span class="normal">        </span><span class="keyword">end</span>
<span class="normal">        </span><span class="cbracket">{</span><span class="symbol">:</span><span class="normal">name </span><span class="symbol">=&gt;</span><span class="normal"> p</span><span class="symbol">.</span><span class="normal">name</span><span class="cbracket">}</span><span class="symbol">.</span><span class="normal">merge!</span><span class="symbol">(</span><span class="normal">Trifork</span><span class="symbol">::</span><span class="normal">JSModel</span><span class="symbol">::</span><span class="normal">to_ext_type</span><span class="symbol">(</span><span class="normal">p</span><span class="symbol">.</span><span class="normal">type</span><span class="symbol">,</span><span class="normal">datefm</span><span class="symbol">)).</span><span class="normal">to_json</span>
<span class="normal">      </span><span class="keyword">end</span><span class="symbol">.</span><span class="normal">join</span><span class="symbol">(</span><span class="string">",\n          "</span><span class="symbol">)</span>
<span class="normal">      </span>
<span class="normal">    </span><span class="keyword">end</span>
<span class="normal">     </span>
<span class="normal">    </span>
<span class="normal">    </span><span class="keyword">def</span><span class="normal"> </span><span class="keyword">self</span><span class="symbol">.</span><span class="normal">to_ext_type</span><span class="symbol">(</span><span class="normal">t</span><span class="symbol">,</span><span class="normal">datefm</span><span class="symbol">)</span>
<span class="normal">      type </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">case</span><span class="normal"> t</span>
<span class="normal">      </span><span class="keyword">when</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">integer </span><span class="keyword">then</span><span class="normal"> </span><span class="string">'int'</span>
<span class="normal">      </span><span class="keyword">when</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">string</span><span class="symbol">,</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">text </span><span class="keyword">then</span><span class="normal"> </span><span class="string">'string'</span><span class="normal"> </span>
<span class="normal">      </span><span class="keyword">when</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">boolean </span><span class="keyword">then</span><span class="normal"> </span><span class="string">'bool'</span><span class="normal"> </span>
<span class="normal">      </span><span class="keyword">when</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">datetime </span><span class="keyword">then</span><span class="normal"> </span><span class="string">'date'</span>
<span class="normal">      </span><span class="keyword">else</span>
<span class="normal">        </span><span class="string">'auto'</span>
<span class="normal">      </span><span class="keyword">end</span>
<span class="normal">      res </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{</span><span class="symbol">:</span><span class="normal">type </span><span class="symbol">=&gt;</span><span class="normal"> type</span><span class="cbracket">}</span>
<span class="normal">      res</span><span class="symbol">.</span><span class="normal">merge!</span><span class="symbol">(:</span><span class="normal">format </span><span class="symbol">=&gt;</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">datefm </span><span class="symbol">||</span><span class="normal"> </span><span class="string">'d/m/Y-H:i'</span><span class="symbol">))</span><span class="normal"> </span><span class="keyword">if</span><span class="normal"> t</span><span class="symbol">==:</span><span class="normal">datetime</span>
<span class="normal">      res</span>
<span class="normal">    </span><span class="keyword">end</span>
<span class="normal">    </span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="keyword">end</span></tt></pre>

You can download the files from this entry <a href="http://blog.higher-order.net/files/extmodels.zip">here</a>. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2008-08-12 20:22:42</wp:post_date>
		<wp:post_date_gmt>2008-08-12 18:22:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>keeping-it-dry</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Ed Spencer]]></wp:comment_author>
			<wp:comment_author_email>edward@domine.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://edspencer.net</wp:comment_author_url>
			<wp:comment_author_IP>79.77.251.50</wp:comment_author_IP>
			<wp:comment_date>2008-08-13 13:33:20</wp:comment_date>
			<wp:comment_date_gmt>2008-08-13 11:33:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've had a similar idea in the past but found that you can't safely regenerate your JS models this way (or at least I can't) because the JS models often contain additional model logic.  I've been creating an MVC framework on top of ExtJS for a few months and a typical model looks like this:


AdFunded.models.AdvertisingCategory = new Ext.ux.MVC.model.Base('advertising_category', {
  fields: [
    { name: 'id',          type: 'int'},
    { name: 'name',        type: 'string'},
    { name: 'description', type: 'string'}
  ],
  controller_name:   'AdvertisingCategoriesController',
  human_plural_name: 'Advertising Categories',
  url_name:          'advertising_categories'
});


There's a bit of magic going on under the covers here but essentially the model creates an Ext.data.Record with the fields you pass it in the background.  Trouble is - to regenerate this would lose the additional config options I've given the model (and some models have much more inside them than this one).

To counter this I have been writing a Schema library for Ext MVC, which converts Rails migrations (or potentially any other kind) into a JS form and runs them in sequence at run time.  That would mean an end to specifying the fields in the model, which makes migration easier, but it's also nice to have them there in the model file (like with the rails annotated models plugin).

I'm still not sure what the best way to go on that one is - any ideas?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[krukow]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net</wp:comment_author_url>
			<wp:comment_author_IP>80.62.114.214</wp:comment_author_IP>
			<wp:comment_date>2008-08-13 14:14:32</wp:comment_date>
			<wp:comment_date_gmt>2008-08-13 12:14:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Ed,

Ah, yes I see the problem. I'm not sure how your MVC.model.Base works; however, if you were just using regular models (i.e. models created by Ext.Record.create), then I think you could get around this using inheritance.

The strategy could be: code-generate the base model using the approach above (or your own adapted version), then create a model which extends the base. If you put all your extra logic in the extended class then you can safely regenerate the base class when your migration changes -- the base would be overridden, but the extending model would remain the same.

Incidentally, you could use the code I posted on extending models created by Ext.Record.create in <a href="http://blog.higher-order.net/2008/03/18/extending-extdatarecord-to-support-inheritance-for-domain-types/" rel="nofollow">this blog posting</a>.

Think that would work out for you?

/Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Ed Spencer]]></wp:comment_author>
			<wp:comment_author_email>edward@domine.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://edspencer.net</wp:comment_author_url>
			<wp:comment_author_IP>79.77.251.50</wp:comment_author_IP>
			<wp:comment_date>2008-08-13 18:02:13</wp:comment_date>
			<wp:comment_date_gmt>2008-08-13 16:02:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Karl,

Thanks for that.  MVC.model.Base is somewhat akin to ActiveRecord::Base - you just tell it what your model is called and what fields to include and from that it knows how to map each model to a URL resource, how to pluralize/inflect (in most instances anyway), as well as providing convenient Stores for both an individual model (e.g. /my_resource/1.json) or a collection (/my_resource.json).

Model was one of the first classes I wrote and is in need of some major refactoring - I'm just trying to figure out the best way at the moment.  I like the approach you take in your post about extending Ext.data.Record - I think I'll give it a go that way.  I'm really trying to achieve a Rails-like model definition so I'll see how far that goes...

The code is on Github at http://github.com/edspencer/ext-mvc/tree/master/model/base.js if you're interested.  Model.Base is not pretty (yet) but some of the other bits are!

One final point about style - from your examples you seem to usually downcase everything except the last part of the class name (e.g. com.trifork.tribook.model.Reservation).  ExtJs seems to be quite random though - e.g. Ext.data.Record, Ext.form.Action.Load, Ext.ColorPalette all seem to follow a different convention.  'Ext' is always capitalized, the next segment is usually not (except for some classes like Ext.Ajax and Ext.ColorPalette), then the third segment is usually capitalized again.  Do you know of a 'universal' convention for this?  Why not just capitalize everything?

Thanks for maintaining a great blog!

Ed]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>77.213.141.231</wp:comment_author_IP>
			<wp:comment_date>2008-08-13 19:17:37</wp:comment_date>
			<wp:comment_date_gmt>2008-08-13 17:17:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi again, Ed. 

I like that you are attempting to mimick ActiveRecord::Base in JavaScript, it sounds interesting and useful; I'll have a look at your code at some point... ;-)

&#8220;<i>One final point about style - from your examples you seem to usually downcase everything except the last part of the class name&#0133;</i>&#8221;

My convention is certainly not universal. I try to follow these primary conventions for code that is written in what Douglas Crockford calls "Pseudo classical" style (i.e., how JavaScript is usually written):
<ol>
	<li>Package-objects are always lowercase (a package object is what is created by the namespace function).</li>

	<li>Constructor functions and singleton objects start with upper case.</li>

	<li>Utility functions are lowercase.</li>

</ol>



I haven't checked this, but I believe that Ext is actually consistent in its naming conventions: Ext is a singleton object (which lives in the global namespace) ✓ Ext.data plays the role of a package object so it is not capitalized ✓ Ext.data.Record is a constructor function ✓ 

I think the only other rule that governs this is: if the object/function consists of two words then each word is uppercase, e.g., ColorPalette.

&#8220;<i>Thanks for maintaining a great blog!</i>&#8221;

Thanks for that comment! Great to get some interaction, so keep commenting ;-)

/Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Recent Links Tagged With "mvc" - JabberTags]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.jabbertags.com/popular/mvc</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2008-08-21 20:30:27</wp:comment_date>
			<wp:comment_date_gmt>2008-08-21 18:30:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] public links &gt;&gt; mvc   Keeping it dry: Generating JavaScript models from Rails models Saved by derWolff on Thu 21-8-2008   A Practical Review of ASP.NET MVC Saved by sandstorm36 on Sat [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1478</wp:comment_id>
			<wp:comment_author><![CDATA[Buy Wartrol]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.myindospace.com/blog/view_blog.php?BlogId=89504#viewdetails</wp:comment_author_url>
			<wp:comment_author_IP>184.82.186.81</wp:comment_author_IP>
			<wp:comment_date>2011-08-14 08:07:52</wp:comment_date>
			<wp:comment_date_gmt>2011-08-14 06:07:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>wartrol price...</strong>

[...] just below, a few totally not related web-sites to ours, yet, they're just without a doubt seriously worth visiting out [...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1527</wp:comment_id>
			<wp:comment_author><![CDATA[easy1paydayloans.co.uk/]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://easy1paydayloans.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>42.49.65.74</wp:comment_author_IP>
			<wp:comment_date>2013-03-13 23:04:57</wp:comment_date>
			<wp:comment_date_gmt>2013-03-13 21:04:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>easy1paydayloans.co.uk/...</strong>

These cash advance uk loan with a little negotiated and paid that to get a on their website other than a po box?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1532</wp:comment_id>
			<wp:comment_author><![CDATA[Babes Gallery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>124.93.146.30</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 02:23:44</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 00:23:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Babes Gallery...</strong>

None repay on due date will cause of an extra charge or penalty on loan amount which will already repay back with appt interest rate decided by lenders....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1556</wp:comment_id>
			<wp:comment_author><![CDATA[cashadvanceonlineking]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://cashadvanceonlineking.com/online-loans-advice/</wp:comment_author_url>
			<wp:comment_author_IP>111.249.143.246</wp:comment_author_IP>
			<wp:comment_date>2013-05-01 22:07:05</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 20:07:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cashadvanceonlineking...</strong>

Borrowing more than you need may seem like a good idea at the time, but it's really not -- so don't be fooled!...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1581</wp:comment_id>
			<wp:comment_author><![CDATA[Sofortkredite]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sofortkreditfun2.info</wp:comment_author_url>
			<wp:comment_author_IP>173.214.174.60</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 01:39:29</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 23:39:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Sofortkredite...</strong>

Wir sind die Feuerschau, sagte der aeltere und ohne sich um das verbluefft darein sehende Maedchen zu kuemmern, klopfte er an der naechsten Tuere Analyse Das war eben die, die in das Schlafzimmer fuehrte, in dem nun schon drei Leute um den Ofen standen...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1582</wp:comment_id>
			<wp:comment_author><![CDATA[bad credit loan]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://badcreditloanpal.com/</wp:comment_author_url>
			<wp:comment_author_IP>122.142.138.72</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 03:17:36</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 01:17:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>bad credit loan...</strong>

bad credit loans loansforbadcreditpal.com...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1601</wp:comment_id>
			<wp:comment_author><![CDATA[loansforbadcreditpal]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://loansforbadcreditpal.com/</wp:comment_author_url>
			<wp:comment_author_IP>91.236.75.28</wp:comment_author_IP>
			<wp:comment_date>2013-05-11 23:29:15</wp:comment_date>
			<wp:comment_date_gmt>2013-05-11 21:29:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>loansforbadcreditpal...</strong>

grand pay day loans...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fibers: an exercise</title>
		<link>http://blog.higher-order.net/2008/08/15/fibers-an-exercise/</link>
		<pubDate>Fri, 15 Aug 2008 09:26:06 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[I was involved with arranging and hosting the <a href="http://jaoo.dk/ruby-cph-2008/conference/">RubyFools 2008 conference</a> (it was a great conference btw). One of my jobs was to come up with a bunch of Ruby exercises for our <a href="http://jaoo.dk/ruby-cph-2008/events/">Ruby cave</a>. I decided to go with exercises on the new Ruby 1.9 Fiber class since it is new and because I'm interested in concurrency.

One of the exercises was a tricky exercise which, as far as I know, nobody solved. Now whether that was because no one tried or cared, or because it was too tricky, I don't know. In either case, I think it is a pretty neat exercise. Here it is.

<strong>Exercise.</strong> Using only the Fiber class from Ruby 1.9, write a class FiberStack which is an implementation of the Stack data structure. You can't use any heap memory (except for Fiber), so using arrays or linked objects is out of the question.

<strong>Please don't paste code into comments. Instead post solutions as a comment <a href="http://blog.higher-order.net/2008/08/15/fibers-a-solution/">here</a>. Then post a comment here linking to that solution. In this way we won't spoil the fun for those wanting to solve it on their own.</strong> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2008-08-15 11:26:06</wp:post_date>
		<wp:post_date_gmt>2008-08-15 09:26:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fibers-an-exercise</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="extjs"><![CDATA[Extjs]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.62.114.214</wp:comment_author_IP>
			<wp:comment_date>2008-08-22 09:45:23</wp:comment_date>
			<wp:comment_date_gmt>2008-08-22 07:45:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Here is my own solution:

<a href="http://blog.higher-order.net/2008/08/15/fibers-a-solution/#comment-24" rel="nofollow">http://blog.higher-order.net/2008/08/15/fibers-a-solution/#comment-24</a>.

Hongli Lai also provided <a href="http://blog.higher-order.net/2008/08/15/fibers-a-solution/#comment-21" rel="nofollow">a solution</a>.


/Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fibers: a solution</title>
		<link>http://blog.higher-order.net/2008/08/15/fibers-a-solution/</link>
		<pubDate>Fri, 15 Aug 2008 09:24:31 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[Here I will post a solution to the Fibers exercise... Post your solutions as comments.

Your code should at least pass the following simple test:
<pre><tt><span class="preproc">require</span><span class="normal"> </span><span class="string">'fiber_stack'</span>
<span class="preproc">require</span><span class="normal"> </span><span class="string">'test/unit'</span>

<span class="keyword">class</span><span class="normal"> FiberStackTest </span><span class="symbol">&lt;</span><span class="normal"> Test</span><span class="symbol">::</span><span class="normal">Unit</span><span class="symbol">::</span><span class="normal">TestCase</span>
<span class="normal">      </span>
<span class="normal">  </span><span class="keyword">def</span><span class="normal"> test_simple</span>
<span class="normal">    fs </span><span class="symbol">=</span><span class="normal"> FiberStack</span><span class="symbol">.</span><span class="normal">new</span>
<span class="normal">    assert fs</span><span class="symbol">.</span><span class="normal">empty?</span>
<span class="normal">    fs</span><span class="symbol">.</span><span class="normal">push </span><span class="string">'a'</span>
<span class="normal">    fs</span><span class="symbol">.</span><span class="normal">push </span><span class="string">'b'</span>
<span class="normal">    assert_equal </span><span class="number">2</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">size</span>
<span class="normal">    </span>
<span class="normal">    assert_equal </span><span class="string">'b'</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">pop</span>
<span class="normal">    assert_equal </span><span class="number">1</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">size</span>
<span class="normal">    assert_equal </span><span class="string">'a'</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">pop</span>
<span class="normal">    assert fs</span><span class="symbol">.</span><span class="normal">empty?</span>
<span class="normal">    assert_equal </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">size</span>
<span class="normal">    </span>
<span class="normal">    assert_nil fs</span><span class="symbol">.</span><span class="normal">pop</span>
<span class="normal">    assert fs</span><span class="symbol">.</span><span class="normal">empty?</span>
<span class="normal">    assert_equal </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">size</span>
<span class="normal">    </span>
<span class="normal">    fs</span><span class="symbol">.</span><span class="normal">push </span><span class="string">'c'</span>
<span class="normal">    assert_equal </span><span class="keyword">false</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">empty?</span>
<span class="normal">    assert_equal </span><span class="number">1</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">size</span>
<span class="normal">    </span>
<span class="normal">    assert_equal </span><span class="string">'c'</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">pop</span>
<span class="normal">    assert fs</span><span class="symbol">.</span><span class="normal">empty?</span>
<span class="normal">    assert_equal </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> fs</span><span class="symbol">.</span><span class="normal">size</span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="keyword">end</span>

<span class="preproc">require</span><span class="normal"> </span><span class="string">'test/unit/ui/console/testrunner'</span>
<span class="normal">Test</span><span class="symbol">::</span><span class="normal">Unit</span><span class="symbol">::</span><span class="normal">UI</span><span class="symbol">::</span><span class="normal">Console</span><span class="symbol">::</span><span class="normal">TestRunner</span><span class="symbol">.</span><span class="normal">run</span><span class="symbol">(</span><span class="normal">FiberStackTest</span><span class="symbol">)</span>
</tt></pre>

with the following result:

<pre>
krukow:~/Projects/private/Fiber/lib$ ruby run_stack.rb 
Loaded suite FiberStackTest
Started
.
Finished in 0.002572 seconds.

1 tests, 15 assertions, 0 failures, 0 errors
krukow:~/Projects/private/Fiber/lib$
</pre>
Have fun ;-) ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2008-08-15 11:24:31</wp:post_date>
		<wp:post_date_gmt>2008-08-15 09:24:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fibers-a-solution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Fibers: an exercise]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2008/08/15/fibers-an-exercise/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2008-08-15 11:26:13</wp:comment_date>
			<wp:comment_date_gmt>2008-08-15 09:26:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] don&#8217;t paste code into comments. Instead post solutions as a comment here. Then post a comment here linking to that solution. In this way we won&#8217;t spoil the fun for [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[Hongli Lai]]></wp:comment_author>
			<wp:comment_author_email>hongli@phusion.nl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.195.225.81</wp:comment_author_IP>
			<wp:comment_date>2008-08-21 23:53:37</wp:comment_date>
			<wp:comment_date_gmt>2008-08-21 21:53:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://pastie.org/257599]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>77.213.141.231</wp:comment_author_IP>
			<wp:comment_date>2008-08-22 06:42:25</wp:comment_date>
			<wp:comment_date_gmt>2008-08-22 04:42:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Exactly ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.62.114.214</wp:comment_author_IP>
			<wp:comment_date>2008-08-22 09:42:14</wp:comment_date>
			<wp:comment_date_gmt>2008-08-22 07:42:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Here is my own solution.

<pre><tt><span class="keyword">class</span><span class="normal"> FiberStack</span>
<span class="normal">  </span><span class="keyword">def</span><span class="normal"> initialize </span>
<span class="normal">    </span><span class="type">@f</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> Fiber</span><span class="symbol">.</span><span class="normal">new </span><span class="cbracket">{</span><span class="normal">irb</span><span class="cbracket">}</span>
<span class="normal">    </span><span class="type">@f</span><span class="symbol">.</span><span class="normal">resume </span><span class="comment">#start irb loop</span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="normal"> </span>
<span class="normal">  </span><span class="keyword">def</span><span class="normal"> empty?</span>
<span class="normal">    size </span><span class="symbol">==</span><span class="normal"> </span><span class="number">0</span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="normal"> </span>
<span class="normal">  </span><span class="keyword">def</span><span class="normal"> size</span>
<span class="normal">    </span><span class="type">@f</span><span class="symbol">.</span><span class="normal">resume</span><span class="symbol">(:</span><span class="normal">size</span><span class="symbol">).</span><span class="normal">tap </span><span class="cbracket">{</span><span class="type">@f</span><span class="symbol">.</span><span class="normal">resume</span><span class="cbracket">}</span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="normal">  </span>
<span class="normal">  </span><span class="keyword">def</span><span class="normal"> push o</span>
<span class="normal">    </span><span class="type">@f</span><span class="symbol">.</span><span class="normal">resume </span><span class="symbol">:</span><span class="normal">push</span><span class="symbol">,</span><span class="normal"> o</span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="normal">  </span>
<span class="normal">  </span><span class="keyword">def</span><span class="normal"> pop</span>
<span class="normal">    </span><span class="type">@f</span><span class="symbol">.</span><span class="normal">resume </span><span class="symbol">:</span><span class="normal">pop </span><span class="keyword">unless</span><span class="normal"> empty?</span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="normal">  </span>
<span class="normal">  private</span>
<span class="normal">  </span><span class="keyword">def</span><span class="normal"> irb o </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">nil</span><span class="symbol">,</span><span class="normal"> size </span><span class="symbol">=</span><span class="normal"> </span><span class="number">0</span>
<span class="normal">    popped </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">nil</span><span class="normal"> </span><span class="comment">#initially nothing has been popped</span>
<span class="normal">    </span><span class="keyword">loop</span><span class="normal"> </span><span class="keyword">do</span>
<span class="normal">      cmd</span><span class="symbol">,</span><span class="normal"> val </span><span class="symbol">=</span><span class="normal"> Fiber</span><span class="symbol">.</span><span class="keyword">yield</span><span class="normal"> popped</span>
<span class="normal">      </span><span class="keyword">return</span><span class="normal"> o </span><span class="keyword">if</span><span class="normal"> cmd </span><span class="symbol">==</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">pop </span><span class="comment">#pop command, return one level on call stack</span>
<span class="normal">      </span><span class="keyword">if</span><span class="normal"> cmd </span><span class="symbol">==</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">size</span>
<span class="normal">        Fiber</span><span class="symbol">.</span><span class="keyword">yield</span><span class="normal"> size </span>
<span class="normal">      </span><span class="keyword">else</span>
<span class="normal">        popped </span><span class="symbol">=</span><span class="normal"> irb val</span><span class="symbol">,</span><span class="normal"> size</span><span class="symbol">+</span><span class="number">1</span><span class="normal"> </span><span class="comment">#recursive call to put val on call stack</span>
<span class="normal">      </span><span class="keyword">end</span>
<span class="normal">    </span><span class="keyword">end</span>
<span class="normal">  </span><span class="keyword">end</span>
<span class="keyword">end</span>
</tt></pre>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1493</wp:comment_id>
			<wp:comment_author><![CDATA[My Homepage]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.8y5N4.org</wp:comment_author_url>
			<wp:comment_author_IP>128.204.199.138</wp:comment_author_IP>
			<wp:comment_date>2012-01-27 10:30:24</wp:comment_date>
			<wp:comment_date_gmt>2012-01-27 08:30:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>... [Trackback]...</strong>

[...] Read More here: blog.higher-order.net/2008/08/15/fibers-a-solution/ [...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1539</wp:comment_id>
			<wp:comment_author><![CDATA[HD Gallery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>14.115.72.20</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 09:29:24</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 07:29:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>HD Gallery...</strong>

More and more people consider you a usa convenient month, not could have long-term financial consequences....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1559</wp:comment_id>
			<wp:comment_author><![CDATA[Kredit ohne Schufa]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://checkpointcredit.de</wp:comment_author_url>
			<wp:comment_author_IP>94.189.179.107</wp:comment_author_IP>
			<wp:comment_date>2013-05-02 08:10:45</wp:comment_date>
			<wp:comment_date_gmt>2013-05-02 06:10:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredit ohne Schufa...</strong>

Das Nichteinholen eines Wagens loest Stekel als das Bedauern ueber eine nicht einzuholende Altersdifferenz (p....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1560</wp:comment_id>
			<wp:comment_author><![CDATA[Online Loans]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://paydayloansonlinefriendz.com/</wp:comment_author_url>
			<wp:comment_author_IP>182.34.175.157</wp:comment_author_IP>
			<wp:comment_date>2013-05-02 13:05:10</wp:comment_date>
			<wp:comment_date_gmt>2013-05-02 11:05:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Online Loans...</strong>

From a job, to business, and of course spiritual coaches and mentors have helped me along the path at every turn?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1564</wp:comment_id>
			<wp:comment_author><![CDATA[Online Kredit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://okidokikredity.info</wp:comment_author_url>
			<wp:comment_author_IP>202.77.125.146</wp:comment_author_IP>
			<wp:comment_date>2013-05-03 21:45:50</wp:comment_date>
			<wp:comment_date_gmt>2013-05-03 19:45:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Online Kredit...</strong>

Doch unnuetze Buben konnten wohl ihren Kameraden den Streich gespielt haben, darum sagte er: Lauft nur flink heim es wird euch irgend so ein unnuetzer Bengel aus Spass die Sachen genommen haben....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1574</wp:comment_id>
			<wp:comment_author><![CDATA[Kredit ohne Schufa]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://hip-kredit.eu</wp:comment_author_url>
			<wp:comment_author_IP>110.194.120.5</wp:comment_author_IP>
			<wp:comment_date>2013-05-08 15:03:16</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 13:03:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredit ohne Schufa...</strong>

Ich bin bereit, dir zu gehorchen als dein Sklave und als Sklave aller derer, die den Ring am Finger haben, sowohl ich, als die andern Sklaven des RingSeite Zu jeder andern Zeit und bei jeder andern Gelegenheit waere Alaeddin, der an solche Erscheinunge...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Probability Theory: The Logic of Science</title>
		<link>http://blog.higher-order.net/2008/08/18/probability-theory-the-logic-of-science/</link>
		<pubDate>Mon, 18 Aug 2008 20:09:04 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[This is a bit of an unusual posting. It was triggered because I am frustrated, having just written my third review for the journal <a href="http://taas.acm.org/">TAAS</a>, which I accidentally agreed to do reviews for at some point during my PhD studies. I still review papers on computational trust models which was the topic of my PhD dissertation. I have recommended 'reject' for all of these papers, not because these papers are any worse than most of what is being and has been published in that field (or what I've published myself); but because I accidentally started reading the book: <a href="http://www.amazon.com/exec/obidos/tg/detail/-/0521592712/qid=1055853130/sr=8-1/ref=sr_8_1/103-5027289-6942223?v=glance&s=books&n=507846">Probability Theory: The Logic of Science</a> by E.T. Jaynes, Cambridge University Press (June 9, 2003). This book radically changed the way I understand probability theory and its applications (which includes computational trust models). Once you read just the basic parts of his book (which is all I've read yet), you realize that much of the work being done in this area is waste; I will claim that it could all be done much simpler and with superior results if based on Jaynes formulation of probability theory (which according to Jaynes goes back to <a href="http://www.economics.soton.ac.uk/staff/aldrich/jeffreysweb.htm">Jeffreys</a> and Laplace).

During my PhD studies I was working on something called experience-based trust management. Fundamentally, this topic is about programs that reason about the behaviour of agents (other dynamic programs) in large open distributed systems (think Internet). Such reasoning is based on information, usually in the form of past interactions with agents or in the form of statements made by other agents about such interaction (i.e., reputation information).

After the first two years we had been working hard on creating <a href="http://dx.doi.org/10.1007/s10207-007-0014-1">a formal model for "computational trust" encompassing uncertainty</a>, based on somewhat hardcore mathematical theory of complete lattices and monotonic functions, complete partial orders and continuous functions (domain theory) and even category theory. It was abstract, it was fun, it was warm, nice and cuddly; <a href="http://www.brics.dk/~krukow/research/publications/online_papers/Progress.pdf">it</a> turned out, however, to be essentially useless... Fortunately, after approximately two years I somehow realized this and started working on the same problems, but with a less abstract approach. At some point later I somehow came by the book of Jaynes. Now, I only wish I had read that book in 2004...

Anyway, I don't know how you were taught probability theory (or worse, statistics) but the courses I took had abstract definitions (corresponds <a href="http://en.wikipedia.org/wiki/Probability_theory">to what is on wikipedia</a>) that seemed magical to a first year computer science student, and abstract but at least general later when I encountered measure theory. While this is all very interesting if one is interested in abstract mathematics, when one reads Jaynes account of probability one cannot avoid to think that Jaynes approach is overwhelmingly appealing: at first sight it intuitive and much is simpler; and once one gets into the later chapters, one learns that it is also more powerful, and in fact, the rules of probability theory is proven to be the unique set of rules that satisfy an absolutely reasonable set of qualitative desiderata (this is known as <a href="http://en.wikipedia.org/wiki/Cox%27s_theorem">Cox's theorem</a> which is on wikipedia, but Jaynes' exposition is much better in my opinion, a version is <a href="http://bayes.wustl.edu/etj/prob/book.pdf">here</a> (from page 13)).

 
I won't even try to give an account of the book here, but only recommend it to anyone even remotely interested in scientific reasoning and logic, but also applied mathematics and computer science.   There are some places that are mathematically challenging for your typical CS grad, but it still has value even if the advanced techniques and proofs are skipped. Read it before you submit any paper on trust ;-)








 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date>2008-08-18 22:09:04</wp:post_date>
		<wp:post_date_gmt>2008-08-18 20:09:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>probability-theory-the-logic-of-science</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[silkop]]></wp:comment_author>
			<wp:comment_author_email>i163370@addcom.de</wp:comment_author_email>
			<wp:comment_author_url>http://silkop.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>87.166.112.99</wp:comment_author_IP>
			<wp:comment_date>2008-08-20 20:18:48</wp:comment_date>
			<wp:comment_date_gmt>2008-08-20 18:18:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree wholeheartedly on all points! However, Jaynes' book is dangerous before you get your PhD because you start recognizing bs all around you, like in every second CS paper where the word "probability" comes up!

If you haven't read Cox's original exposition, it is worth a trip to library. His little "algebra of probable inference" book is short and neat, maybe even easier to follow than Jaynes.

Anyway, I see one problem with the explanatory approach taken by Cox/Jaynes (which I started transcribing for the average Joe non-mathematician in my blog). Their discussion of the probability rules and their uniqueness in context of logical propositions is nice and dandy, but it leaves a lingering question of where these proposition sets are supposed to come from in practice. When Jaynes explains his maximum entropy principle, it looks very much like he is doing a "frequentist" thing after all to arrive at the atomic probabilities. Basically he's counting possibilities and weighing more complex propositions by counting the number of atomic propositions that imply them and weighing this against other complex propositions.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>77.213.141.231</wp:comment_author_IP>
			<wp:comment_date>2008-08-21 21:34:39</wp:comment_date>
			<wp:comment_date_gmt>2008-08-21 19:34:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello silkop.

Good to hear from you; an interesting response! I wasn't really expecting much activity on this thread, since this blog is centered around computer science, and if you are a computer scientist, it is quite unlikely that you have come by Jaynes' book... I myself came by it by pure coincidence.

But you have! Great; and thanks for the reference to Cox' original work, I will definitely read that when I get the time and opportunity ;-)

Regarding your problem with MaxEnt, I think Jaynes gives a really satisfactory explanation on this. One can think of the "frequentist thing" as a degenerate special case of proper Bayesian reasoning in the case where the prior information says nothing, i.e., when we use the principle of insufficient reasoning. Now, in the case of MaxEnt we have actual prior information, say in the form of average values that the solution must satisfy. Frequentist theory (conventional statistics) cannot make use of this prior information, but MaxEnt can: intuitively, one gets a prior which is as uniform as possible while respecting the given constraints. So the frequency correspondence is not a bad thing it is good; it is what makes MaxEnt as noncommittal as possible. 


If you read section 11.8, page 365 in the 2003 edition, there is an interesting exposition on 'frequency correspondence': "...the probability distribution which maximises entropy is numerically identitical with the <i>frequency</i> distribution which can be realized in the greatest number of ways (which is vastly greater than it's competitors).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[silkop]]></wp:comment_author>
			<wp:comment_author_email>i163370@addcom.de</wp:comment_author_email>
			<wp:comment_author_url>http://silkop.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>87.166.108.137</wp:comment_author_IP>
			<wp:comment_date>2008-08-30 15:05:51</wp:comment_date>
			<wp:comment_date_gmt>2008-08-30 13:05:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I suppose that this "realized in the greatest number of ways" remark is what I am nit-picky about. IIRC, Jaynes elsewhere chides the "orthodoxians" for considering not the data at hand, but rather "what could have been, but is not". However, in order to justify maximum entropy, he seems to implicitly rely on a very similar approach:

First, consider all the possible "worlds" that agree with the constraints but are equally likely based on indifference. In each such world a particular frequency distribution is "realized". Then, examine which distributions are going to come up most often if you keep drawing randomly from the bag of worlds; this of course is a basic problem solved by the multinomial distribution.

If my remarks are not clear, think about his broken windows example. N windows have been broken into an integer number of pieces and all that we know is the average number of pieces (seems like a rather strange situation to me, but who am I to criticize textbook examples). If we assume some upper integer limit on the number of pieces per window, we can easily imagine a concrete world in which the "first" window was broken into p_1 pieces, the "second" window into p_2 pieces and so on until p_n. Now, if we enumerate all the possible worlds (and there's a finite number of them, based on our assumptions about the number of windows and pieces), some of them will agree with the average number of pieces constraint, most will not. Then, we conceptually put these matching worlds into a "bag", sample from this bag and examine the relative frequency of each number of pieces in each drawn world. What the maxent principle says is that an overwhelming number of draws from the bag will have the relative frequencies very close to most other draws, and that the most frequent frequency distribution can be calculated by maximizing entropy (why this correspondence holds is not explained very well in the book, I find).

Why are we willing to accept the maxent frequency distribution, which is after all based on a thought up generative sampling model? So far, the only good answer I understand is that other distributions would have to be also based on thought up generative sampling models - ones that are even more ridiculous (arbitrary) than the maxent one. Sometimes I wonder if it is the only answer.

As for CS people not knowing about Jaynes: I think it is "Jaynes's fault" - he assumes that his reader has a working knowledge of calculus (and often also "orthodox" statistics and history) to follow his reasoning. This may be true for physicists, but certainly isn't true for CS students. The funny thing is Jaynes has inspired me to improve my maths education. There's something magnetic in the way he explains stuff and deals with critics.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1368</wp:comment_id>
			<wp:comment_author><![CDATA[Math World | Higher-Order » Blog Archive » Probability Theory: The Logic of Science]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://mathworld.us/index.php/foundations-of-mathematics/category-theory/higher-order-%c2%bb-blog-archive-%c2%bb-probability-theory-the-logic-of-science/</wp:comment_author_url>
			<wp:comment_author_IP>76.73.56.178</wp:comment_author_IP>
			<wp:comment_date>2009-09-16 11:50:01</wp:comment_date>
			<wp:comment_date_gmt>2009-09-16 09:50:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Excerpt from:  Higher-Order » Blog Archive » Probability Theory: The Logic of Science [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1501</wp:comment_id>
			<wp:comment_author><![CDATA[URL]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.OPQ9d.net</wp:comment_author_url>
			<wp:comment_author_IP>31.193.7.131</wp:comment_author_IP>
			<wp:comment_date>2012-07-05 09:06:19</wp:comment_date>
			<wp:comment_date_gmt>2012-07-05 07:06:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>... [Trackback]...</strong>

[...] Read More here: blog.higher-order.net/2008/08/18/probability-theory-the-logic-of-science/ [...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1528</wp:comment_id>
			<wp:comment_author><![CDATA[HD Gallery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>5.14.205.12</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 00:16:40</wp:comment_date>
			<wp:comment_date_gmt>2013-03-17 22:16:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>HD Gallery...</strong>

If this happens to you, you will have to of credit instant by have fiscal the covers your home?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1555</wp:comment_id>
			<wp:comment_author><![CDATA[Cash Advance Online King]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://cashadvanceonlineking.com/online-loans-advice/</wp:comment_author_url>
			<wp:comment_author_IP>174.36.255.226</wp:comment_author_IP>
			<wp:comment_date>2013-05-01 19:21:49</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 17:21:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Cash Advance Online King...</strong>

Check advance operations are springing up across the nation and may be one of the fastest growing industries we have!...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1594</wp:comment_id>
			<wp:comment_author><![CDATA[bad credit loan]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://loansforbadcreditpal.com/</wp:comment_author_url>
			<wp:comment_author_IP>183.219.143.122</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 18:08:39</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 16:08:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>bad credit loan...</strong>

bad credit loans badcreditloanpal.com...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1612</wp:comment_id>
			<wp:comment_author><![CDATA[stophumantraffic.org]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.stophumantraffic.org/</wp:comment_author_url>
			<wp:comment_author_IP>91.236.75.28</wp:comment_author_IP>
			<wp:comment_date>2013-05-21 13:27:29</wp:comment_date>
			<wp:comment_date_gmt>2013-05-21 11:27:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>stophumantraffic.org...</strong>

heavenly cash...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1620</wp:comment_id>
			<wp:comment_author><![CDATA[オークリー サングラス]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.oakleyjapan.cc</wp:comment_author_url>
			<wp:comment_author_IP>58.22.142.177</wp:comment_author_IP>
			<wp:comment_date>2013-06-19 16:00:28</wp:comment_date>
			<wp:comment_date_gmt>2013-06-19 14:00:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>オークリー サングラス...</strong>

Probability Theory: The Logic of Science | Higher-Order...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1625</wp:comment_id>
			<wp:comment_author><![CDATA[vestidos de coctel barato]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.es.iodress.com</wp:comment_author_url>
			<wp:comment_author_IP>117.82.194.144</wp:comment_author_IP>
			<wp:comment_date>2013-06-22 06:47:09</wp:comment_date>
			<wp:comment_date_gmt>2013-06-22 04:47:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>vestidos de coctel barato...</strong>

Wow! It is also fastidious article regarding JavaScript, i'm in fact eager of understanding JavaScript. many thanks admin...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Jeene: An automatic partial evaluator for JavaScript</title>
		<link>http://blog.higher-order.net/2008/09/14/jeene/</link>
		<pubDate>Sun, 14 Sep 2008 19:42:22 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[The purpose of this posting is to show that is is possible to create an online partial evaluator for JavaScript, written also in JavaScript. As far as I know, this has been not been done before. This post is the first in a series describing the inner workings of <a href="http://code.google.com/p/jeene/">Jeene</a>.

<strong>A what?</strong> A partial evaluator (or program specializer) is a program which takes two inputs: another program and an environment mapping variables to values; it outputs a specialized (i.e., more efficient) version of the input program with respect to the environment. One can think of a partial evaluator as a mix between an interpreter and a compiler: it interprets the static parts of the program and emits code for the dynamic parts. 

For a simple example of code specialization, consider the following function for creating a string corresponding to an HTML tag:
<pre><tt><span class="keyword">var</span><span class="normal"> mk_tag </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">tag_name</span><span class="symbol">,</span><span class="normal">clazz</span><span class="symbol">,</span><span class="normal">contents</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   </span><span class="keyword">return</span><span class="normal"> </span><span class="string">'&lt;'</span><span class="symbol">+</span><span class="normal">tag_name</span><span class="symbol">+</span><span class="string">' class="'</span><span class="symbol">+</span><span class="normal">clazz</span><span class="symbol">+</span><span class="string">'"&gt;'</span><span class="symbol">+</span><span class="normal">contents</span><span class="symbol">+</span><span class="string">'&lt;/'</span><span class="symbol">+</span><span class="normal">tag_name</span><span class="symbol">+</span><span class="string">'&gt;'</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">;</span>
</tt></pre>
If we are only interested in making 'div' tags with a class of 'green' then a more efficient version would be:
<pre><tt><span class="keyword">var</span><span class="normal"> mk_div_green </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">contents</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   </span><span class="keyword">return</span><span class="normal"> </span><span class="string">'&lt;div class="green"&gt;'</span><span class="symbol">+</span><span class="normal">contents</span><span class="symbol">+</span><span class="string">'&lt;/div&gt;'</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">;</span>
</tt></pre>
since it would require fewer string concatenations per call. We can think of 'mk_div_green' as a version of 'mk_tag' which is specialized for writing 'div' tags with a class of 'green'. A partial evaluator for JavaScript could automatically derive the 'mk_div_green' function from the 'mk_tag' function.


<p>This is exactly what we can do with the evaluator in this posting.</p>
<pre><tt><span class="comment">//This code actually works ;-)</span>
<span class="normal">Function</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">specialize </span><span class="symbol">=</span><span class="normal"> net</span><span class="symbol">.</span><span class="normal">higherorder</span><span class="symbol">.</span><span class="normal">jeene</span><span class="symbol">.</span><span class="normal">Jeene</span><span class="symbol">.</span><span class="function">make</span><span class="symbol">();</span>

<span class="keyword">var</span><span class="normal"> mk_tag </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">tag</span><span class="symbol">,</span><span class="normal">clz</span><span class="symbol">,</span><span class="normal">cont</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">   </span><span class="keyword">return</span><span class="normal"> </span><span class="string">"&lt;"</span><span class="symbol">+</span><span class="normal">tag</span><span class="symbol">+</span><span class="string">" class='"</span><span class="symbol">+</span><span class="normal">clz</span><span class="symbol">+</span><span class="string">"'&gt;"</span><span class="symbol">+</span><span class="normal">cont</span><span class="symbol">+</span><span class="string">"&lt;/"</span><span class="symbol">+</span><span class="normal">tag</span><span class="symbol">+</span><span class="string">"&gt;"</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">;</span>


<span class="keyword">var</span><span class="normal"> mk_div_green </span><span class="symbol">=</span><span class="normal"> mk_tag</span><span class="symbol">.</span><span class="function">specialize</span><span class="symbol">(</span><span class="cbracket">{</span><span class="normal">tag</span><span class="symbol">:</span><span class="string">'div'</span><span class="symbol">,</span><span class="normal"> clz</span><span class="symbol">:</span><span class="normal"> </span><span class="string">'green'</span><span class="cbracket">}</span><span class="symbol">);</span>



<span class="function">mk_div_green</span><span class="symbol">(</span><span class="string">"Pratt rocks!"</span><span class="symbol">);</span>
<span class="comment">//result: &lt;div class='green'&gt;Pratt rocks!&lt;/div&gt;</span>


<span class="normal">mk_div_green</span><span class="symbol">.</span><span class="normal">toSource </span><span class="symbol">?</span><span class="normal"> mk_div_green</span><span class="symbol">.</span><span class="function">toSource</span><span class="symbol">()</span><span class="normal"> </span><span class="symbol">:</span><span class="normal"> mk_div_green</span><span class="symbol">.</span><span class="function">toString</span><span class="symbol">();</span>
<span class="comment">//result:</span>
<span class="comment">//(function (cont) {return ("&lt;div class='green'&gt;" + cont) + "&lt;/div&gt;";})</span></tt></pre>
This last line, shows that the output function is much more efficient than what is created by general JavaScript curriers <a href="http://ajaxian.com/archives/currying-in-javascript">which have been seen before</a>: these functions merely wait evaluating the function until all parameters are supplied; instead, a partial evaluator will create specialized function taking advantage of the information given.

The first goal is for the partial evaluator to process any function written in an extension of "simplified JavaScript" (a subset of full JavaScript corresponding to what Crockford calls the "<a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">good parts</a>"). This partial evaluator will have a number of useful features: it
<ul>
	<li>can easily be extended to full JavaScript;</li>
        <li> is written in simplified JavaScript (think <a href="http://en.wikipedia.org/wiki/Partial_evaluation">Futamura projections</a>);</li>
	<li> is a fast extension of Douglas <a href="http://javascript.crockford.com/tdop/tdop.html">Crockford's Pratt parser</a>;</li>
	<li> because functions implement the toString method, it can be run on dynamically generated functions (e.g., a specialized function can be further specialized);</li>
	<li> can be embedded in any full JavaScript program as long as it is only used to specialize functions which are syntactically in simplified JavaScript;</li>
</ul>

I have started a new open source project, <a href="http://code.google.com/p/jeene/">Jeene</a>, which aims to create an efficient partial evaluator for full JavaScript that works in any ECMAScript 3 compliant implementation (e.g., all major browsers, Rhino, TraceMonkey, V8 etc). Right now the project is at a very early stage; a proof of concept, for example it cannot specialize itself. Let me know if you are interested in contributing: I will use a 1 patch threshold like Rubinius: if you submit one patch which is accepted, you get commit rights.

Stay tuned <a href="http://blog.higher-order.net">here</a> for more information about how Jeene is designed and implemented.
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2008-09-14 21:42:22</wp:post_date>
		<wp:post_date_gmt>2008-09-14 19:42:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jeene</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="automatic-code-specialization"><![CDATA[automatic code specialization]]></category>
		<category domain="category" nicename="code-specialization"><![CDATA[code specialization]]></category>
		<category domain="category" nicename="instanceof"><![CDATA[instanceof]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="partial-evaluation"><![CDATA[partial evaluation]]></category>
		<category domain="post_tag" nicename="partial-evaluation"><![CDATA[partial evaluation]]></category>
		<category domain="post_tag" nicename="simplified-javascript"><![CDATA[simplified javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[Ajaxian &raquo; Jeene: Automatic partial evaluation for JavaScript, in JavaScript]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ajaxian.com/archives/jeene-automatic-partial-evaluation-for-javascript-in-javascript</wp:comment_author_url>
			<wp:comment_author_IP>208.43.16.163</wp:comment_author_IP>
			<wp:comment_date>2008-09-16 12:29:56</wp:comment_date>
			<wp:comment_date_gmt>2008-09-16 10:29:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Jeene is a new open source project by Karl Krukow, which aims to create a partial evaluator for JavaScript. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[Ajax Girl &raquo; Blog Archive &raquo; Jeene: Automatic partial evaluation for JavaScript, in JavaScript]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ajaxgirl.com/2008/09/16/jeene-automatic-partial-evaluation-for-javascript-in-javascript/</wp:comment_author_url>
			<wp:comment_author_IP>74.53.228.194</wp:comment_author_IP>
			<wp:comment_date>2008-09-16 15:17:43</wp:comment_date>
			<wp:comment_date_gmt>2008-09-16 13:17:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Jeene is a new open source project by Karl Krukow, which aims to create a partial evaluator for JavaScript. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Jeene: Status]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2008/09/16/jeene-status/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2008-09-16 15:29:42</wp:comment_date>
			<wp:comment_date_gmt>2008-09-16 13:29:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] am happy that Jeene was mentioned on Ajaxian today. This is good  it means that the project is more likely to attract [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1480</wp:comment_id>
			<wp:comment_author><![CDATA[Wartrol Reviews]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://buywartrolscam.org/</wp:comment_author_url>
			<wp:comment_author_IP>23.19.34.237</wp:comment_author_IP>
			<wp:comment_date>2011-09-02 18:35:08</wp:comment_date>
			<wp:comment_date_gmt>2011-09-02 16:35:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>where can you buy wartrol...</strong>

[...] whilst the sites we link to below are absolutely unrelated to mine, we presume they are really truly worth a read, so have a look [...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1523</wp:comment_id>
			<wp:comment_author><![CDATA[Trackback Software]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.siteduct.com/blogs.php?pg=135291</wp:comment_author_url>
			<wp:comment_author_IP>199.188.200.60</wp:comment_author_IP>
			<wp:comment_date>2012-12-09 01:06:20</wp:comment_date>
			<wp:comment_date_gmt>2012-12-08 23:06:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] It will also give new websites a great start by getting your websites quickly indexed and getting huge amount of backlinks in the process. Details: http://blog.higher-order.net/2008/09/14/jeene/ [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1529</wp:comment_id>
			<wp:comment_author><![CDATA[Babes Gallery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>27.206.170.54</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 01:10:29</wp:comment_date>
			<wp:comment_date_gmt>2013-03-17 23:10:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Babes Gallery...</strong>

Contact the credit card company right away a is not get the loan sanctioned in your name....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1550</wp:comment_id>
			<wp:comment_author><![CDATA[Payday Loans UK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://paydayloansukhut.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>110.212.180.217</wp:comment_author_IP>
			<wp:comment_date>2013-04-27 18:42:57</wp:comment_date>
			<wp:comment_date_gmt>2013-04-27 16:42:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Payday Loans UK...</strong>

A payday loan can be a short term small cash loan that agreed day loan, application, you can easily save your time....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1575</wp:comment_id>
			<wp:comment_author><![CDATA[Kredit ohne Schufa]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://checkpointcredit.de</wp:comment_author_url>
			<wp:comment_author_IP>183.219.30.225</wp:comment_author_IP>
			<wp:comment_date>2013-05-08 17:01:38</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 15:01:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredit ohne Schufa...</strong>

Sie dachten nicht mehr an die vielen Dummheiten, die der unnuetze kleine Schelm gemacht hatte, sie dachten nur daran, dass sie ihn liebgehabt hatten....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1580</wp:comment_id>
			<wp:comment_author><![CDATA[bad credit loan]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://loansforbadcreditpal.com/</wp:comment_author_url>
			<wp:comment_author_IP>120.138.109.246</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 00:17:04</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 22:17:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>bad credit loan...</strong>

bad credit loans loansforbadcreditpal.com...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1590</wp:comment_id>
			<wp:comment_author><![CDATA[Online Kredit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://onlinekreditfun.info</wp:comment_author_url>
			<wp:comment_author_IP>183.165.159.152</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 15:16:37</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 13:16:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Online Kredit...</strong>

Und wie wird es dir in der Welt ergehen!...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1606</wp:comment_id>
			<wp:comment_author><![CDATA[ralph lauren soldes]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://polofemme2013.tumblr.com/</wp:comment_author_url>
			<wp:comment_author_IP>202.105.91.168</wp:comment_author_IP>
			<wp:comment_date>2013-05-15 20:30:28</wp:comment_date>
			<wp:comment_date_gmt>2013-05-15 18:30:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>ralph lauren soldes...</strong>

?Elle ac milan 1989 compléter la gamme du numéro 1 mondial des téléphones portables, ?Emmené par un duo Ribéry-Robben des beaux jours. ?Il ny a pas de risques immédiats ou dans un futur proche pour la santé maillot extérieur arsenal 2013 ces fuites que...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1619</wp:comment_id>
			<wp:comment_author><![CDATA[www.lunenburgchamber.org]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.lunenburgchamber.org/admin/index/css/vwokk.asp</wp:comment_author_url>
			<wp:comment_author_IP>200.8.30.73</wp:comment_author_IP>
			<wp:comment_date>2013-06-18 08:24:23</wp:comment_date>
			<wp:comment_date_gmt>2013-06-18 06:24:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>www.lunenburgchamber.org...</strong>

What's up, just wanted to mention, I enjoyed this blog post. It was inspiring. Keep on posting!...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1632</wp:comment_id>
			<wp:comment_author><![CDATA[maillot de foot pas cher]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://maillotdefoot.1x.fr/</wp:comment_author_url>
			<wp:comment_author_IP>219.136.100.21</wp:comment_author_IP>
			<wp:comment_date>2013-06-26 01:02:00</wp:comment_date>
			<wp:comment_date_gmt>2013-06-25 23:02:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>maillot de foot pas cher...</strong>

You accomplished particular great details there. I did a look for on the concern and identified almost all people will go alongside with with your blog....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Jeene: Status</title>
		<link>http://blog.higher-order.net/2008/09/16/jeene-status/</link>
		<pubDate>Tue, 16 Sep 2008 13:29:34 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[I am happy that <a href="http://blog.higher-order.net/2008/09/14/jeene/">Jeene</a> was <a href="http://ajaxian.com/archives/jeene-automatic-partial-evaluation-for-javascript-in-javascript">mentioned on Ajaxian</a> today. This is good ;-) it means that the project is more likely to attract potential contributors which is nice since there is quite some work yet to be done.  

I thought, I would provide a status update on Jeene and a "backlog" of work that needs to be done.

<strong>What is working:</strong>
<ul>
	<li>Partial evaluation of simple operations: '+', '-', '&&' and '||'</li>
        <li>code generation for 'function' expressions and 'return' statements</li>
</ul>
This means that we can run a number of simple examples. For a quick and dirty performance test checkout: <a href="http://code.google.com/p/jeene/source/browse/trunk/examples/performance_simple1.html">performance_simple1</a>

This is all fine, the basic design is in place. Now it is just a matter of "getting it done" to implement other operators. However, there are some constructs that are more difficult:
<strong>What I will be working on next</strong>
<ul>
	<li>Assignment. Since an assignment changes the static/dynamic status of variables, this is more advanced than e.g. '+' which doesn't have side effects. For example if 'x' is a static variable and 'y' is dynamic, then 'y = x;' should cause 'y' to be static from that program point. </li>
        <li>Handling of function calls. For now, I will simply replace a function call with a function call where we replace static expressions in the arguments with their values. Later I will consider 'unrolling'/'inlining' of function calls.</li>
</ul>


As always, I welcome anyone interested in contributing. I will run a rule: 1-patch approved = commit rights.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2008-09-16 15:29:34</wp:post_date>
		<wp:post_date_gmt>2008-09-16 13:29:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jeene-status</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jeene"><![CDATA[Jeene]]></category>
		<category domain="post_tag" nicename="partial-evaluation"><![CDATA[partial evaluation]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jeene update: Performance, features and backlog</title>
		<link>http://blog.higher-order.net/2008/09/21/jeene-update-performance-features-and-backlog/</link>
		<pubDate>Sun, 21 Sep 2008 16:19:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=139</guid>
		<description></description>
		<content:encoded><![CDATA[Don't know what Jeene is? It will make your JavaScript code run faster ;-) read <a href="http://blog.higher-order.net/2008/09/14/jeene/">the intro</a> first, 
then come back to this!
<h4>Performance examples</h4>
I was curious about the performance gains of functions specialized via Jeene, so I ran a simple performance example in Firefox 2 and 3; Safari 3.1.2; Opera 9.52; SquirrelFish Extreme (the <a href="http://webkit.org/blog/214/introducing-squirrelfish-extreme/">new</a> JIT); IE 6, 7 ; Google's Chrome and finally, TraceMonkey. All with great results! You can run the simple example <a href="http://blog.higher-order.net/files/jeene/examples/performance_simple1.html">here</a>.

The test executes the string concatenation example from the previous post. The actual example is not that interesting; what is interesting is that Jeene works in all current popular JavaScript implementations and that it gives good performance boosts also in the new JITs: V8, TraceMonkey and SquirrelFish Extreme. The figures include the time it takes to specialize the function, so they are actual performance gains. (Note that the Windows and Mac tests were on different hardware).

<ul>	
<li>Firefox 2: (Windows Vista)
<ol>
<li>Without specialization: 1430ms;</li>
<li>With  specialization: 635ms;</li>
<li><strong>Specialization reduces time by approx. 56%.</strong></li>
</ol>
</li>
<li>Firefox 3: (Mac)
<ol>
<li>Without specialization: 386ms;</li>
<li>With  specialization: 230ms;</li>
<li><strong>Specialization reduces time by approx. 40%.</strong></li>
</ol>
</li>
<li>Opera 9.52: (Mac)
<ol>
<li>Without specialization: 502ms;</li>
<li>With  specialization: 251ms;</li>
<li><strong>Specialization reduces time by approx. 50%.</strong></li>
</ol>
</li>

<li>Firefox 3.1 - TraceMonkey (Mac)
<ol>
<li>Without specialization: 302;</li>
<li>With  specialization: 152ms;</li>
<li><strong>Specialization reduces time by approx. 50%</strong>.</li>
</ol>
</li>
<li>Chrome - V8: (Windows Vista)
<ol>
<li>Without specialization: 227ms;</li>
<li>With  specialization: 83ms;</li>
<li><strong>Specialization reduces time by approx. 63%</strong>.</li>
</ol>
</li>

<li>IE6/7 (approx. the same numbers) (Windows Vista)
<ol>
<li>Without specialization: 2672ms;</li>
<li>With  specialization: 1485ms;</li>
<li><strong>Specialization reduces time by approx. 44%</strong>.</li>
</ol>
</li>



<li>Safari 3.1.2 (Mac)
<ol>
<li>Without specialization: 378ms;</li>
<li>With  specialization: 157ms;</li>
<li><strong>Specialization reduces time by approx. 58%</strong>.</li>
</ol>
</li>

<li>WebKit nightly -- SquirrelFish Extreme (Mac)
<ol>
<li>Without specialization: 247ms;</li>
<li>With  specialization: 94ms;</li>
<li><strong>Specialization reduces time by approx. 61%</strong>.</li>
</ol>
</li>

</ul>



 
<h4>What can Jeene do right now?</h4>
 Specialize JavaScript functions written in simplified JavaScript which contain
the following constructs (note as of now you can only specialize with primitive values,
e.g., strings and numbers; this will be fixed soon):

<ul>
    <li>variables which occur in the function's formal parameter</li>
    <li>literals and constants ("abc", 42, true, null)</li>
    <li>simple assignment '='</li>
    <li>and, or, not logical operators '&amp;&amp;', '||', '!'</li>
    <li>plus and minus binary operators ('+' and '-'); by default it assumes '+' 
    to be associative, which is not sound in general but is for common case uses (ask me for details)</li>
    <li>return statements</li>
</ul>
<h4>What Jeene can't  do right now (i.e., what I am working on). </h4>

Some of these are easy, others are harder and need careful analysis.
<ul>
    <li>global variables (in general variables in the function's closure)</li>
    <li>'var' statements (i.e., local variable declaration and initialization)</li>
    <li>incrementing/decrementing assignments ('+=' and '-=') </li>
    <li>ternary if, i.e., "exp ? v1 : v2" operator</li>
    <li>comparison "===", "!==", "&lt;", "&lt;=", "&gt;", "&gt;="</li>
    <li>multiplication, division ('*','/')</li>
    <li>static/dynamic property lookup ('.' and '[')</li>
    <li>function calls ("fn()")</li>
    <li>unary minus ('-1')</li>
    <li>typeof operator ('typeof x')</li>
    <li>function operator ('function(){}')</li>
    <li>expression statements, array and object literals</li>
    <li>expression statements, array and object literals</li>
    <li>'if', 'break'  statements</li>
    <li>'while' and 'for' statements</li>
</ul>


<h3>New in latest svn commit</h3>
Jeene can now handle simple assignments of the form (x = exp) where x is a variable and exp is an expression. Further, formal parameters which are specialized disappear from the formal parameters in the specialized function, but now appear as local variables of that function (so that one can assign to them).

Consider this example:
<pre><tt><span class="normal">Function</span><span class="symbol">.</span><span class="keyword">prototype</span><span class="symbol">.</span><span class="normal">specialize </span><span class="symbol">=</span><span class="normal"> net</span><span class="symbol">.</span><span class="normal">higherorder</span><span class="symbol">.</span><span class="normal">jeene</span><span class="symbol">.</span><span class="normal">Jeene</span><span class="symbol">.</span><span class="function">make</span><span class="symbol">();</span>
<span class="normal">source_fun </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">a</span><span class="symbol">,</span><span class="normal">b</span><span class="symbol">,</span><span class="normal">c</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">    c </span><span class="symbol">=</span><span class="normal"> a</span><span class="symbol">;</span>
<span class="normal">    </span><span class="keyword">return</span><span class="normal"> b</span><span class="symbol">+</span><span class="normal">c</span><span class="symbol">;</span>
<span class="cbracket">}</span><span class="symbol">;</span>
<span class="keyword">var</span><span class="normal"> env </span><span class="symbol">=</span><span class="normal"> </span><span class="cbracket">{</span><span class="normal">a</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">,</span><span class="normal"> b</span><span class="symbol">:</span><span class="number">2</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">res </span><span class="symbol">=</span><span class="normal"> source_fun</span><span class="symbol">.</span><span class="function">specialize</span><span class="symbol">(</span><span class="normal">env</span><span class="symbol">);</span>

<p>Result: 

(function (c) {var a, b;return 5;})
</tt></pre>
<p>Note that the assignment c=a; can be eliminated and the static value of a is propagated to c so that the expression returned is static. Neat ;-)

Check back for more later...
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2008-09-21 18:19:26</wp:post_date>
		<wp:post_date_gmt>2008-09-21 16:19:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jeene-update-performance-features-and-backlog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1362</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>90.185.200.133</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 18:34:18</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 16:34:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It is a long time since I wrote that comment ;-) But I believe that I meant the

(1 + (2 + "foo")) != ((1 + 2) + "foo")

example.

I haven't been working on Jeene for a while, since a couple of people got me down about using toString/toSource on functions and then re-parsing them. 

Good to hear from you. Let me know if you are more interested in Jeene.

- Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1361</wp:comment_id>
			<wp:comment_author><![CDATA[artyom]]></wp:comment_author>
			<wp:comment_author_email>artyom.shalkhakov@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.115.37.214</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 09:52:32</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 07:52:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

First off, great job!

I'm writing a little soon-to-be-released reactive animation library based on Flapjax (flapjax-lang.org).

Incidentally, functions that need specializing are pure and referentially transparent, but they do have local variables (constants, really) and ternary ifs...

&gt; to be associative, which is not sound in general but is for common case uses (ask me for details)

Can you elaborate on this point?

Do you mean that (1 + (2 + "foo")) and ((1 + 2) + "foo") give different results? Anything else? (problems with floating-point precision, perhaps?)

Thanks for your work!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>9</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1460</wp:comment_id>
			<wp:comment_author><![CDATA[Conveyancing Solicitors]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.quoteconveyancing.co.uk/blog/?author=1</wp:comment_author_url>
			<wp:comment_author_IP>64.120.45.213</wp:comment_author_IP>
			<wp:comment_date>2011-04-01 00:53:34</wp:comment_date>
			<wp:comment_date_gmt>2011-03-31 22:53:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Conveyancing Solicitors...</strong>

[...]while the sites we link to below are completely unrelated to ours, we think they are worth a read, so have a look[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The need for Clojure</title>
		<link>http://blog.higher-order.net/2008/10/18/the-need-for-clojure/</link>
		<pubDate>Sat, 18 Oct 2008 17:14:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>It is a need usually provoked after experiencing an emotional conclusion to a difficult life event, such as the breakdown of a close interpersonal relationship [or an unreliable concurrent program, editor] or the death of loved one [or an old familiar programming language, editor]... A person with a high need for closure prefers order and predictability and is decisive [...]</blockquote>
<span style="float:right; ">[selected, edited parts from <a href="http://en.wikipedia.org/wiki/Closure_(psychology)">Wikipedia</a> on the need for closure ;-)]</span>
<div style="clear:both">I've just decided to put all my pet projects and programming languages aside to dedicate myself to learning one single language, with the ambition to eventually master it. That language is <a href="http://clojure.org">Clojure</a>.

To force myself to reflect on my learning process and to help the community to the best of my ability, I will write a number of blog postings about my experiences with Clojure. There is already a lot of truly outstanding quality information about the theory and ideas behind Clojure around the net (mostly this excellent quality is due to fact the the creator of Clojure, Rich Hickey, is a great speaker). However, to my knowledge, there is less information about how to actually program Clojure. So this series of postings will explore programming Clojure from a beginners perspective -- hopefully others may learn from my mistakes and insights.

In other words: This series is about Beginning Clojure in Practice.

<em>Update: Sat. Oct. 18, 2008: A few points about Clojure, and links to better information</em>.

<strong>What is Clojure?</strong>
Clojure is a relatively young language (<a href="http://groups.google.com/group/clojure/browse_thread/thread/d8203f1f9f026e8d/16fec21eb1fff8aa#16fec21eb1fff8aa">recently</a>, it's 1-year birthday was celebrated). As I am beginning clojure, I am certainly not the best source of information; however, I would like to share <em>my personal top 5 reasons</em> why Clojure stands out in the ocean of programming languages that seems to be growing only faster by the day. If you want to know more about clojure, I strongly encourage reading <em>the entire</em> <a href="http://clojure.org">homepage</a> and watching <a href="http://clojure.blip.tv/posts?view=archive&amp;nsfw=dc">the videos on blip.tv</a>.

<strong>Why Clojure?</strong>
<ul>
	<li>Clojure is <a href="http://www.paulgraham.com/avg.html">a LISP</a> (perhaps it is more precise to say that it is strongly inspired by LISP, in some sense it is more general). Most importantly this means the full power of macros.</li>
	<li>It is compiled to the JVM, and designed to embrace it. This means making use of a powerful infrastructure, e.g., garbage collection and a powerful, mature, optimizing JIT. Rich Hickey makes a good point on distinguishing languages that 'live on' the JVM (like JRuby or Jython) and languages that are designed <em>for</em> the JVM like (Groovy and Scala). Since JRuby and Jython are 'ports' of a language specified elsewhere, they have to fit on the JVM for better or worse (for example no call/cc in JRuby). In contrast, Clojure is designed for the JVM: Rich calls this 'embracing it.'</li>
	<li>Java interoperability. Clojure is designed to inter-operate with Java; there is language-level support [syntax, even ;-)] for interacting with Java (no wrappers). This means that the enormous number of already existing Java libraries can be used from Clojure. This solves the 'library problem' (see below).</li>
	<li>Clojure has an opinion about how to do in-process concurrency (my favorite point): First, immutability is good; it is the default, and all Clojure data structures are immutable. Yet, Clojure accepts that sometimes mutability is needed and even desired, and support for a mutability is provided in the form of Refs and Agents. These are programming language constructs that allow for mutability, but <em>with a concurrency semantics</em>. Refs come with a software transactional memory system, and agents allow an in-process asynchronous programming model (similar to, but not equal Erlang's actors).  Go and read Rich's short essay: <a href="http://clojure.org/state">On state and identity</a>; once you get a feel for the language, read it again ;-). <strong>Persistent data structures</strong>, are an amazing and important part of Clojure's concurrency model. This is what makes immutability viable in Clojure. An 'update' operation on a persistent data structure doesn't actually change the data structure (it is immutable), but returns a new data structure (also immutable) representing the updated structure. Now, one might think this entails copying the entire structure; amazingly via structural sharing this is not the case. Clojures data structures (e.g., a hash map) are immutable and persistent yet retain the performance guarantees of their mutable counter-parts (Rich claims performance from faster-than-Java to up-to at most 4x Java speed). More on this in a later posting.</li>
<li>Dynamic and mostly functional; this speaks for itself.</li>
</ul>

I am really looking forward to exploring this language in depth and in practice, and to sharing what I find with anyone actually reading this blog ;-)

Finally, just as a thought: Eric Kidd wrote about <a href="http://www.randomhacks.net/articles/2005/12/03/why-ruby-is-an-acceptable-lisp">choosing between Ruby and LISP</a>.

<blockquote>So if LISP is still more powerful than Ruby, why not use LISP? The typical objections to programming in LISP are:
<ul>
	<li>There aren’t enough libraries.</li>
	<li>We can’t hire LISP programmers.</li>
	<li>LISP has gone nowhere in the past 20 years.</li>
</ul>
</blockquote>
My reply to this would be: Well, with Clojure, LISP is definitely going somewhere; only the second objection applies (and perhaps with time this will no longer be the case, who knows).</div> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2008-10-18 19:14:12</wp:post_date>
		<wp:post_date_gmt>2008-10-18 17:14:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-need-for-clojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="concurrency"><![CDATA[Concurrency]]></category>
		<category domain="post_tag" nicename="lisp"><![CDATA[LISP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>521</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Annotated Clojure links - part 1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2008/11/17/annotated-clojure-links-1/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2008-11-17 18:08:49</wp:comment_date>
			<wp:comment_date_gmt>2008-11-17 16:08:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] (and the web in particular), and that most people aren&#8217;t taking this seriously enough. In my last posting I claimed that  I will write a number of blog postings about my experiences with Clojure. [...] [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1135</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>90.185.21.211</wp:comment_author_IP>
			<wp:comment_date>2008-12-08 19:10:12</wp:comment_date>
			<wp:comment_date_gmt>2008-12-08 17:10:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@happy_developer,

Yes, Clojure operates extremely well with Java. There are many more details at http://clojure.org]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1130</wp:comment_id>
			<wp:comment_author><![CDATA[happy_developer]]></wp:comment_author>
			<wp:comment_author_email>v_lar5@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.61.60.67</wp:comment_author_IP>
			<wp:comment_date>2008-12-08 16:02:44</wp:comment_date>
			<wp:comment_date_gmt>2008-12-08 14:02:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, do you know whether Clojure can be used in Java application?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1131</wp:comment_id>
			<wp:comment_author><![CDATA[Ricky Clarkson]]></wp:comment_author>
			<wp:comment_author_email>ricky.clarkson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://cime.net/~ricky/</wp:comment_author_url>
			<wp:comment_author_IP>217.34.45.110</wp:comment_author_IP>
			<wp:comment_date>2008-12-08 16:52:24</wp:comment_date>
			<wp:comment_date_gmt>2008-12-08 14:52:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Abcom:

1. Actually, CLOS (Common Lisp's Object System) is much closer to Alan Kay's original definition of OO than any of C++, Java and C# are.  It's sad that 'mainstream OO' means 'looks like C++'.

Also, OO is the problem, it is something to move away from.

2. In my experience, non-programmers can learn lisp in minutes.  Are you saying that C/C++/Java/C# programmers are actually disabled in some way?

Incidentally, C# is probably a better language than you think; many of its competent programmers would probably enjoy lisp, apart from the lack of a type system.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1124</wp:comment_id>
			<wp:comment_author><![CDATA[Ricky Clarkson]]></wp:comment_author>
			<wp:comment_author_email>ricky.clarkson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://cime.net/~ricky/</wp:comment_author_url>
			<wp:comment_author_IP>217.34.45.110</wp:comment_author_IP>
			<wp:comment_date>2008-12-08 11:41:16</wp:comment_date>
			<wp:comment_date_gmt>2008-12-08 09:41:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Lisp is certainly great, and Clojure looks like a reasonable lisp.  I wonder why the JVM attracts untyped languages while .NET attracts typed ones.  Could it be that the Java language has damaged people's ideas of what types are for?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1126</wp:comment_id>
			<wp:comment_author><![CDATA[Abcom]]></wp:comment_author>
			<wp:comment_author_email>a@b.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.80.51.172</wp:comment_author_IP>
			<wp:comment_date>2008-12-08 12:04:18</wp:comment_date>
			<wp:comment_date_gmt>2008-12-08 10:04:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[4. LISP isn't an OO-language(any other mainstream language is)
5. It would be hard for C/C++/Java/C# progs to learn it]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1482</wp:comment_id>
			<wp:comment_author><![CDATA[Wartrol Scam]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://buywartrolscam.org/</wp:comment_author_url>
			<wp:comment_author_IP>184.82.196.167</wp:comment_author_IP>
			<wp:comment_date>2011-09-02 18:37:54</wp:comment_date>
			<wp:comment_date_gmt>2011-09-02 16:37:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>buy wartrol online...</strong>

[...] below you'll discover the link for some sites we feel you'll want to pay a visit to [...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1534</wp:comment_id>
			<wp:comment_author><![CDATA[HD Gallery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>122.73.200.66</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 04:28:41</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 02:28:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>HD Gallery...</strong>

In order to qualify you need to be at least 18 years of age, be living out repayment arrangements that will be easy for you to budget....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1563</wp:comment_id>
			<wp:comment_author><![CDATA[Payday Loans]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://paydayloansfriendz.com/</wp:comment_author_url>
			<wp:comment_author_IP>193.105.67.32</wp:comment_author_IP>
			<wp:comment_date>2013-05-02 22:50:56</wp:comment_date>
			<wp:comment_date_gmt>2013-05-02 20:50:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Payday Loans...</strong>

Is it possible to manage monthly organization the loan on credit reasons may be less waiting citizen of usa!...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1583</wp:comment_id>
			<wp:comment_author><![CDATA[uk payday loans online]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://easy1paydayloansukx.info</wp:comment_author_url>
			<wp:comment_author_IP>123.171.136.110</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 09:30:26</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 07:30:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>uk payday loans online...</strong>

So klang die Unterredung noch versoehnlich auSeite Ein paar Stunden spaeter war der Vormund auf der Heimreise begriffen....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1592</wp:comment_id>
			<wp:comment_author><![CDATA[Sofortkredite]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sofortkreditfun1.info</wp:comment_author_url>
			<wp:comment_author_IP>91.151.176.95</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 16:45:08</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 14:45:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Sofortkredite...</strong>

Allmaehlich kamen nur noch vereinzelte Schueler, jetzt schlug es 8 Uhr, und die groesste Stille herrschte in dem noch eben so belebten Gebaeude, der Unterricht begAnnahme Schlag 10 Uhr ertoente unten in des Dieners Wohnung ein zweimaliges Glockenzeiche...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1593</wp:comment_id>
			<wp:comment_author><![CDATA[Kredit fuer Selbststaendige]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://privatkredit24h.eu</wp:comment_author_url>
			<wp:comment_author_IP>183.93.13.158</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 17:26:21</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 15:26:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredit fuer Selbststaendige...</strong>

Die Frau Pfarrer weiss mir ein gutes Plaetzchen, begann sie und wiederholte alles, was sie darueber gehoert hatte....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1611</wp:comment_id>
			<wp:comment_author><![CDATA[pay-day-loans-uk-1.co.uk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://pay-day-loans-uk-1.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>91.236.75.28</wp:comment_author_IP>
			<wp:comment_date>2013-05-21 12:57:49</wp:comment_date>
			<wp:comment_date_gmt>2013-05-21 10:57:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>pay-day-loans-uk-1.co.uk...</strong>

stunning loan...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1631</wp:comment_id>
			<wp:comment_author><![CDATA[Hamilton clock]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://watchesforjp.com</wp:comment_author_url>
			<wp:comment_author_IP>120.43.5.19</wp:comment_author_IP>
			<wp:comment_date>2013-06-25 02:18:25</wp:comment_date>
			<wp:comment_date_gmt>2013-06-25 00:18:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Hamilton clock...</strong>

Sweet blog! I found it while browsing on Yahoo News. Do you have any suggestions on how to get listed in Yahoo News? I've been trying for a while but I never seem to get there! Thank you...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Annotated Clojure links - part 1</title>
		<link>http://blog.higher-order.net/2008/11/17/annotated-clojure-links-1/</link>
		<pubDate>Mon, 17 Nov 2008 16:08:37 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[RESTafarians will tell you that hypermedia is one of the essential ingredients of REST (and the web in particular), and that most people aren't taking this seriously enough. In my <a href="http://blog.higher-order.net/2008/10/18/the-need-for-clojure/">last posting</a> I claimed that 

<blockquote>I will write a number of blog postings about my experiences with Clojure. [...] However, to my knowledge, there is less information about how to actually program Clojure.</blockquote>

Well, my knowledge was wrong. Surprise, surprise --  <em>I'm not the first person to discover Clojure, be excited and decide to blog about it…</em> 

So instead of showing you Clojure fibonacci, (prn "hello world") and writing imprecisely about functions and macros, I'll hyper-point to to high-quality information on 'getting started with Clojure'. If nothing else, my links will increase the PageRank of those blogs ;-) So here is my <a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven#comment-720">RESTful</a> description of one path to Clojure. 

<em>Readers please add your high-quality Clojure links and provide a reasonable description in the blog comments</em>.

<h1>Part I - getting started</h1>

<h4>Clojure theory</h4>
<DL>
<DT><strong>Get excited:</strong> <a href="http://clojure.blip.tv/posts?view=archive&nsfw=dc">Clojure for Java Programmers</a>
<DD>Get excited by watching the Clojure videos. For the basics, see Clojure for Java Programmers <a href="http://clojure.blip.tv/file/982823/">1</a> and <a href="http://clojure.blip.tv/file/982957/">2</a>, with accompanying <a href="http://clojure.googlegroups.com/web/clojureforjava.pdf?gda=SPRLpEQAAABoLitVpBTEcNIQc_NHg39S_Hg1WbQBMCYf_Oa__Wpb2_lgf_VMSjZff-zXA-oQn0tV6u9SiETdg0Q2ffAyHU-dzc4BZkLnSFWX59nr5BxGqA">slides</a>. This is great quality information targeted directly at Java programmers. You should have a strong background in Java and be knowledgeable of Java concurrency (I personally recommend <a href="http://www.javaconcurrencyinpractice.com">Java Concurrency in Practice</a> by Brian Goetz et al.).

<DT><strong>Re-iterate your understanding</strong>, and go deeper: comparison with other Lisps
<DD>If you are ready to dig deeper into this: Clojure for Lisp programmers <a href="http://clojure.blip.tv/file/1313398/">1</a> and <a href="http://clojure.blip.tv/file/1313503/">2</a>, with accompanying <a href="http://clojure.googlegroups.com/web/clojureforlispers.pdf?gda=qKPp-0cAAABoLitVpBTEcNIQc_NHg39S_Hg1WbQBMCYf_Oa__Wpb2ycL8mivbekMeNcp6E6jSjlhmrMR3uGvvPr01Poh-10xeV4duv6pDMGhhhZdjQlNAw">slides</a>. There is even a transcript of the <a href="http://clojure.googlegroups.com/web/Clojure-Boston-Lisp-Part-1-Audience-Questions.txt?gda=0JV7XGMAAABoLitVpBTEcNIQc_NHg39S9EVzVqTfJEKgN0GfEMHKcdqTlnRwfVqz5geyahrZGmA1E9s6yhuH7As86UQFPAq6i-zGDlAIph5kzt6swNluoDK2In4d0Zhhw-L_T2mXw3sVYu945paPNtiemeSmbFxa">audience questions for part 1</a>.

<DT><a href="http://clojure.org">The Clojure website</a>
<DD>There is a lot of information on the website. To me, this information made the most sense <em>after</em> having seen the videos. I particularly like the essay: <a href="http://clojure.org/state">Values and Change</a> which explains Clojure's functional approach to mutability and state. Furthermore, sometimes when watching the videos you'll want to clarify something. A good way to do this is reading the <a href="http://clojure.org/api">API docs</a> on the site (which is quite precise) and then open up a <a href="http://clojure.org/getting_started">REPL</a> (see next step) and try it out.
</DL>

<h4>A Clojure environment</h4>
In order to get Clojure up and running you need to setup a working environment containing Java 5 or 6, Clojure and some kind of IDE or text editor. I've had success with Aquamacs (which is an Emacs for Mac).
<DL>
<DT><strong>Emacs &amp; Unix:</strong> <a href="http://riddell.us/clojure/">Clojure, Emacs and Slime/Swank on Ubuntu 8.10</a>
<DD><a href="http://www.cliki.net/SLIME">Slime/Swank</a> is a development environment for Emacs. Adapting this guide to Mac and Aquamacs was easy. A couple of useful Emacs commands:
<ul>
<li><font face="courier">C-x C-e</font> (Ctrl+x then Ctrl+e or "hold Ctrl then press x then e the release"). Send the current expression (to the left of cursor) to Slime.</li>
<li><font face="courier">C-c C-d C-d</font>. Show docs for the current symbol.</li>
<li><font face="courier">C-c RET</font>. Macro-expand once.</li>
<li><font face="courier">M-.</font>. Goto (edit) definition of current symbol; and.</li>
<li><font face="courier">M-,</font>. return from Goto (edit) definition of current symbol.</li>
</ul>

<DT><strong>Others:</strong> <a href="http://code.google.com/p/clojure-dev/">Eclipse IDE</a>, <a href="http://enclojure.org/">Netbeans plugin</a>, <a href="http://groups.google.com/group/clojure/browse_thread/thread/c8b7bc3106c39791#">Vim anyone?</a> 
<DD>I only have experience with the Emacs setup - it works fine so far.
</DL>

If you are annoyed with Aquamacs keeping opening windows on you:
<tt>(custom-set-variables
 '(one-buffer-one-frame-mode nil nil (aquamacs-frame-setup)))
</tt>

Bill Clementson is currently blogging Clojure. He has a <a href="http://bc.tech.coop/blog/081023.html">setup</a> posting where he is able to run JSwat Java debugger with Clojure. More detailed information about debugging with JSwat <a href="http://groups.google.com/group/clojure/browse_thread/thread/403e593c86c2893f">here</a>.

<strong>I plan to go into depth on various parts of Clojure</strong> in the next couple of postings. It will be the same style of annotated links, possibly with discussion if I feel I have anything interesting to say.
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2008-11-17 18:08:37</wp:post_date>
		<wp:post_date_gmt>2008-11-17 16:08:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>annotated-clojure-links-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More Clojure news and links</title>
		<link>http://blog.higher-order.net/2008/12/07/more-clojure-news-and-links/</link>
		<pubDate>Sun, 07 Dec 2008 10:29:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=209</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Clojure Pipe</strong> Clojure blogger and user <a href="http://bc.tech.coop/blog/">Bill Clementson</a> has used Yahoo Pipes to create a Clojure mashup feed. This should turn out a good source of Clojure info. Bill's intro is <a href="http://bc.tech.coop/blog/081206.html">here</a>, and the pipe is <a href="feed://pipes.yahoo.com/pipes/pipe.run?_id=4cc8ebb9ae0b852d6ab7d94956ce2638&_render=rss">here</a>.

<strong>Improved Emacs setup.</strong> Bill also posted <a href="http://bc.tech.coop/blog/081205.html">his Emacs setup</a>. Looking forward to implementing something like that as my setup.


<strong>Atoms: uncoordinated and synchronous</strong> Rich Hickey added a new reference type with concurrency semantics called <a href="http://groups.google.com/group/clojure/browse_thread/thread/539b967faaf84a65">atoms</a>. Clojure now has <a href="http://clojure.googlegroups.com/web/clojure-conc.png">four reference types, each with a unique concurrency semantics</a>: vars (changes isolated within thread), refs (synchronous & coordinated), atoms (synchronous and uncoordinated) and agents (asynchronous & uncoordinated).  

<strong>Mutual recursion</strong>. Using 'trampolines', <a href="http://groups.google.com/group/clojure/browse_thread/thread/6257cbc4454bcb85/4a21ea1a1cc725a4">Rich Hickey added support for mutual recursion</a>.

<strong>Misc</strong> <a href="http://pragprog.com/podcasts/show/24">Clojure Podcast</a> w. <a href="http://blog.thinkrelevance.com/">Stuart Halloway</a>.

 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2008-12-07 12:29:10</wp:post_date>
		<wp:post_date_gmt>2008-12-07 10:29:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-clojure-news-and-links</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IE doesn&#039;t understand HTML or HTTP</title>
		<link>http://blog.higher-order.net/2008/12/20/ie-doesnt-understand-html-or-http/</link>
		<pubDate>Sat, 20 Dec 2008 12:46:14 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=213</guid>
		<description></description>
		<content:encoded><![CDATA[The so-called "web"-browser Internet Explorer version 7 (and probably all versions below) doesn't get HTML or HTTP. In a recent project for a client we've been building an advanced, 100% JavaScript client application that had to run in IE7 (as a minimal requirement). The application is rather complex and has to live as a component in <em>every (darn) webpage/webapp</em> on the client's intranet, including all legacy apps; essentially, the applications include this component by inserting a script tag in their pages. The component's most basic job is to help the user navigate to the existing multitude of intranet applications, supplying these applications with appropriate input (e.g., navigate to the customer mangagement app with a customer reference as input).

Now these legacy applications are of different ages and have been developed in various technologies, with varying quality and standards-awareness. Now these requirements brings a bunch of problems, and I won't start complaining too much here. Instead I'll just focus on one issue: character encodings! <em>One</em> of the aspects of this scenarios is that the applications are using different character-encodings, e.g., ISO-8859-1 and UTF-8. This gives the following requirements.
<ul>
	<li>Cross page (cross encoding) navigation. For example, our client app often has to navigate from a UTF-8 encoded page to an ISO-8859-1 encoded page, <strong>transferring properly encoded parameters</strong> from the first page to the second.</li>
	<li>Localization. The client app is available in various languages; together with the requirement that it must exist in UTF-8 and ISO-8859-1 encoded pages, this means that the actual JavaScript being sent on the wire must be available in different languages and encodings, based on the browsers settings.</li>
</ul>
You'd expect these things to be pretty basic stuff for an HTTP based app; something that would be easy in a version 7 browser.
<h2>Cross page (cross encoding) navigation</h2>
For various reasons irrelevant here, our client app navigates to an application by dynamically creating a form with method "GET", and plugging in the URL and the parameters for the receiving application, i.e.,
<pre><tt>
&lt;form method="GET" action="URL"&gt;
&lt;input type="hidden" name="pname" value="pvalue" &gt;
…
&lt;/form&gt;
</tt></pre>
There is an implicit attribute called 'accept-charset' which <a href="http://www.w3.org/TR/html401/interact/forms.html">according to HTML 4.01 satisfies</a>:
<blockquote>"This attribute specifies the list of character encodings for input data that is accepted by the server processing this form. The value is a space- and/or comma-delimited list of charset values. The client must interpret this list as an exclusive-or list, i.e., the server is able to accept any single character encoding per entity received. The default value for this attribute is the reserved string "UNKNOWN". User agents may interpret this value as the character encoding that was used to transmit the document containing this FORM element."</blockquote>
The problem with IE7 is that it <em>ignores the accept-charset property entirely on forms</em>. In fact, it instead does the default behaviour for "UNKNOWN", i.e.,  "the character encoding that was used to transmit the document containing this form element." Actually, to be precise it doesn't even do that either: It turns out the IE7 encodes the form according to the current value of <tt>document.charset</tt>. Fortunately it is possible to set <tt>document.charset</tt> using JavaScript, this means that it is possible to control the encoding of form input data by setting <tt>document.charset</tt> just before the form submits. And this works. Problem solved. Kind of …

Unfortunately, this hack turns out to trigger a somewhat strange and nasty bug: After form submission, IE navigates to the desired page and input data is encoded according to <tt>document.charset</tt>, which is just what we want. However, if you click the 'back'-button on the next page, IE navigates back to the original page, <em>but the <tt>document.charset</tt> property somehow persists</em> which means that the page is not interpreted with the correct encoding. OK, so we should clean up after ourselves: One would think that restoring the <tt>document.charset</tt> to it's original value after calling <tt>form.submit()</tt> would work: it doesn't.

After some experimentation I found that the following works. To submit a form with input data encoded in a particular encoding:
<ol>
	<li>on document load, store the original page encoding</li>
	<li>on form submit change the value of <tt>document.charset</tt> to the desired encoding, e.g., "ISO-8859-1"</li>
	<li>on 'beforeunload' restore <tt>document.charset</tt> to it's original value.</li>
</ol>
<h2>Script character encodings</h2>
Our JavaScript client app sometimes lives in a UTF-8 encoded page, sometimes in an ISO-8859-1 encoded page. The client app is loaded by including a &lt;script&gt; tag that points to a servlet that delivers the JavaScript code (customized for the requesting user and his preferred locale). By default when IE loads script, interprets the bytes it receives as characters <em>in the encoding of the current page</em>. However, it doesn't tell the server which encoding that is. More specifically, our servlet receives a request for the JavaScript client with these HTTP headers:
<pre><tt>
Accept : */* 
Referer : http://localhost:10045/wps/portal/sn
Accept-Language : da
UA-CPU : x86
Accept-Encoding : gzip, deflate
User-Agent : Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1; MS-RTC LM 8; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)
Connection : Keep-Alive
Cache-Control : no-cache
</tt></pre>

Furthermore, even if we explicitly tell IE which encoding we have chosen, it will still ignore that and use the page encoding. More specifically, even if we return this HTTP:
<pre><tt>
Content-Type: application/javascript; charset=UTF-8
</tt></pre>

IE ignores the Content-Type charset. In other words: if we choose as a default (when no Accept-Charset header is present) to deliver the script in UTF-8 encoded, it breaks for ISO-8859-1 pages, and vice versa. So what to do? IE apparently doesn't speak HTTP.

It turns out that one should use a script tag with a charset property to tell IE how to interpret the script. Ironically this means that on UTF-8 encoded pages one would need to say &lt;script charset="ISO-8859-1"&gt;. In other words, it is not the HTTP headers describing the resource that describes its encoding. This must be know in advance by all documents that link to the resource by embedding a charset property. Yet another reason that these are tough times to be RESTful… ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2008-12-20 14:46:14</wp:post_date>
		<wp:post_date_gmt>2008-12-20 12:46:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ie-doesnt-understand-html-or-http</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="model-view-controller"><![CDATA[model view controller]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1357</wp:comment_id>
			<wp:comment_author><![CDATA[Bernd]]></wp:comment_author>
			<wp:comment_author_email>bernd@weinand.eu</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.58.242.153</wp:comment_author_IP>
			<wp:comment_date>2009-01-26 23:18:02</wp:comment_date>
			<wp:comment_date_gmt>2009-01-26 21:18:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You saved my day :-)

Just relaunched our site with UTF-8 encoding. The legacy backend still accepts only ISO-8859-1. Problem: Users enters login data in the front end, back end doesn't understand when login data contains german umlaut or other characters with a encoding different between UTF-8 and ISO-8859-1. First attempt (accept-charset="ISO-8859-1") seemed to work ... but after 2 days we learned that all users where happy with that ... except IE users ... fixed it with your tip ... thx a lot :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>4</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1358</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.251.195.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-27 08:19:04</wp:comment_date>
			<wp:comment_date_gmt>2009-01-27 06:19:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Bernd,

Happy to hear the tip helped! Figured someone else had to run into this problem at some point ;-)

/Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1546</wp:comment_id>
			<wp:comment_author><![CDATA[replica hermes bag]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.itbaghermes.com/hermes-2012-bags-c-10_21.html</wp:comment_author_url>
			<wp:comment_author_IP>112.114.74.157</wp:comment_author_IP>
			<wp:comment_date>2013-04-17 04:40:11</wp:comment_date>
			<wp:comment_date_gmt>2013-04-17 02:40:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>replica hermes bag...</strong>

an all-silver design, for a more coordinate choice. You can get this for $350 from Shopbop.Royal Wedding Frenzy: Kate Middleton鈥檚 Tod鈥檚 D-Bag Royal Bride Kate Middleton...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1549</wp:comment_id>
			<wp:comment_author><![CDATA[sac longchamp]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.fr-longchampsac.net</wp:comment_author_url>
			<wp:comment_author_IP>121.100.28.18</wp:comment_author_IP>
			<wp:comment_date>2013-04-24 16:18:47</wp:comment_date>
			<wp:comment_date_gmt>2013-04-24 14:18:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>sac longchamp...</strong>

This article is really wonderful, people do not realize the author's writing situations. I want to recommend it to more people, so the more the body will be such a great feeling....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1604</wp:comment_id>
			<wp:comment_author><![CDATA[hermes replica handbag]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://replicaitbag.me.cc</wp:comment_author_url>
			<wp:comment_author_IP>120.32.240.167</wp:comment_author_IP>
			<wp:comment_date>2013-05-14 08:12:46</wp:comment_date>
			<wp:comment_date_gmt>2013-05-14 06:12:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>hermes replica handbag...</strong>

Your article IE doesn’t understand HTML or HTTP | Higher-Order write very well, thank you share!...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Happy New Year!</title>
		<link>http://blog.higher-order.net/2008/12/31/happy-new-year/</link>
		<pubDate>Wed, 31 Dec 2008 12:31:55 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=231</guid>
		<description></description>
		<content:encoded><![CDATA[Can't remember the last time I laughed so much.

<a href="http://www.yankeepotroast.org/archives/2008/09/11_words_that_s.html">
http://www.yankeepotroast.org/archives/2008/09/11_words_that_s.html</a>

Got the Link from <a href="http://tomayko.com/">Ryan Tomayko's (great) blog</a>. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2008-12-31 14:31:55</wp:post_date>
		<wp:post_date_gmt>2008-12-31 12:31:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>happy-new-year</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_d3167e43724740ec00c1cdedc02ca704</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5a5b84534cce5cf6b41eafd6c916eae4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4b8dcafa393d716e019434d1213dded0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Understanding Clojure&#039;s PersistentVector implementation</title>
		<link>http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/</link>
		<pubDate>Sun, 01 Feb 2009 20:17:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=233</guid>
		<description></description>
		<content:encoded><![CDATA[Update: <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/">See also the description of PersistentHashMap</a>.

One of the unique features of Clojure is that the <a href="http://clojure.org/data_structures">core data structures</a> are persistent (immutable with efficient structural sharing). This includes data structures Vector and Map that are mutable in most other languages. To be useful, operations on persistent data structures need to have performance characteristics that are similar to their mutating counterparts; e.g., the cost of random access on a persistent vector (put/get) needs to be comparable to random access to a mutable vector. Clojure manages to achieve this. Here we focus on understanding the Clojure implementation of Vector: <a href="http://code.google.com/p/clojure/source/browse/trunk/src/jvm/clojure/lang/PersistentVector.java">PersistentVector</a>.

<strong>The basics.</strong> PersistentVector stores its elements in arrays, each array having at most size 32. One can think of the arrays as forming a wide balanced tree with each node having at most 32 children. Here is an example of what a size <span style="font-family: courier-new;">32<sup>2</sup> = 1024</span> PersistentVector tree might look like.

<img src="http://blog.higher-order.net/files/clj/persistentvector1.png" alt="PersistentVector example" />

The root of the tree is a pointer to a size-32 array ("blue") which has 32 children ("red"). The 32 red arrays each have 32 references to actual 1024 objects stored in the PersistentVector.

<strong>Fetching elements (get).</strong> The key to understanding PersistentVector is to look at the binary representation of the numbers that index the vector. Java uses <a href="http://java.sun.com/docs/books/jls/second_edition/html/typesValues.doc.html#85587">32 bits for ints</a> <a href="http://en.wikipedia.org/wiki/Two%27s_complement">with signed two's-complement representation</a>. Examples:

<img src="http://blog.higher-order.net/files/clj/bin-map1.png" alt="Binary representation examples" />

One can think of this binary representation as divided into chunks of 5 bits, represented in colors here. These "chunks" are mapped to levels in the tree: for example, when fetching the element at 16, one looks at the the "blue" bits  (00000) -- this determines the index at the root child array (0); following that pointer, the "red" bits (10000) determines the index at the first level (16). When fetching index 49 the blue bits index to 1 and the red bits index to 17.

In this case the depth of the tree is 2: the cost of lookup is following two pointers and some bit computation. In general the cost of lookup is proportional to the height of the tree, i.e., O(log<sub>32</sub> n) where n is the number of elements in the vector. In practice the height is no more than 7.

Fetching the n'th element in PersistentVector is done with the <tt>nth</tt> method.  
<pre><tt>
<span class="keyword">public</span><span class="normal"> Object </span><span class="function">nth</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> i</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal"> </span><span class="keyword">if</span><span class="symbol">(</span><span class="normal">i </span><span class="symbol">&gt;=</span><span class="normal"> </span><span class="number">0</span><span class="normal"> </span><span class="symbol">&amp;&amp;</span><span class="normal"> i </span><span class="symbol">&lt;</span><span class="normal"> cnt</span><span class="symbol">)</span>
<span class="normal"> </span><span class="cbracket">{</span>
<span class="normal"> </span><span class="keyword"> if</span><span class="symbol">(</span><span class="normal">i </span><span class="symbol">&gt;=</span><span class="normal"> </span><span class="function">tailoff</span><span class="symbol">())</span>
<span class="normal"> </span><span class="keyword">  return</span><span class="normal"> tail</span><span class="symbol">[</span><span class="normal">i </span><span class="symbol">&amp;</span><span class="normal"> </span><span class="number">0x01f</span><span class="symbol">];</span>
<span class="normal"> Object</span><span class="symbol">[]</span><span class="normal"> arr </span><span class="symbol">=</span><span class="normal"> root</span><span class="symbol">;</span>
<span class="normal"> </span><span class="keyword">for</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> level </span><span class="symbol">=</span><span class="normal"> shift</span><span class="symbol">;</span><span class="normal"> level </span><span class="symbol">&gt;</span><span class="normal"> </span><span class="number">0</span><span class="symbol">;</span><span class="normal"> level </span><span class="symbol">-=</span><span class="normal"> </span><span class="number">5</span><span class="symbol">)</span>
<span class="normal">   arr </span><span class="symbol">=</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">Object</span><span class="symbol">[])</span><span class="normal"> arr</span><span class="symbol">[(</span><span class="normal">i </span><span class="symbol">&gt;&gt;&gt;</span><span class="normal"> level</span><span class="symbol">)</span><span class="normal"> </span><span class="symbol">&amp;</span><span class="normal"> </span><span class="number">0x01f</span><span class="symbol">];</span>
<span class="normal"> </span><span class="keyword">return</span><span class="normal"> arr</span><span class="symbol">[</span><span class="normal">i </span><span class="symbol">&amp;</span><span class="normal"> </span><span class="number">0x01f</span><span class="symbol">];</span>
<span class="normal"> </span><span class="cbracket">}</span>
<span class="normal"> </span><span class="keyword">throw</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">IndexOutOfBoundsException</span><span class="symbol">();</span>
<span class="cbracket">}</span>
</tt></pre>
Ignoring the 'tail'-part, the code uses an instance variable: <tt>shift</tt> which is determined by the height of the tree: <tt>shift = 5*(h+1)</tt> where <tt>h</tt> is the height of the tree (defined here as 0 for an empty tree). Another way to think of the <tt>shift</tt> variable is that it determines how many bits to right-shift the bit representation of an integer to move for a certain block (color) of interest to be the rightmost block. For example shifting <tt>0000110001 (49)</tt> with 5 gives <tt>00000000001</tt> which is exactly the "blue" index. 

In general <tt>shift</tt> determines the right-shift needed to access the root index, i.e., for the block of bits that index into the root array to become the right-most block. The tree is searched from the most significant blocks (root, and it's children) towards the least significant blocks (the "high levels" or leaves). Notice that for any integer <tt>i</tt>, if we mask <tt>i</tt>'s bit representation with <tt>00...011111</tt> we get the five right-most bits of <tt>i</tt>. The expression <tt>i & 0x1f</tt> does this as <tt>0x1f</tt> is <tt>011111</tt>.

<strong>Insertion (put).</strong> 
Insertion is more tricky. Here we consider only the 'cons' method which appends an element to the end of the vector. The method which replaces the element at an index is easy once 'cons' and 'nth' is understood. Of course, since PersistentVector is immutable 'cons' really returns a new PersistentVector object which is equal to the old one except that it has the new element at the end. With cons, the tree grows only in a balanced way: elements are added at the deepest level at the rightmost array. If the PersistentVector contains a number of elements which is a power of 32 (e.g., 1024 = 32<sup>2</sup>), the height of the tree is increased by one and there is now "room" for 32 times more elements. In our example from before, suppose we add an element at the end of the vector. We obtain this tree:

<img src="http://blog.higher-order.net/files/clj/persistentvector2.png" alt="Consing persistent vector" />

Notice that the entire old PersistentVector is shared with the new PersistentVector! No copying is involved in this particular case.

<strong>The tail...</strong> Actually (to be precise) this happens not exactly at powers of 32 but slightly delayed: at the insertion of the 33rd element after a power of 32. E.g., 1024 + 33 = 1057. As you can see from the figure above, an entire size-32 array is inserted at the lower right-most position (instead of a size 1 array with the new element). This is an optimization. There is a special instance variable <tt>tail</tt> of size at most 32. The <tt>tail</tt> array is a sort of buffer where elements are appended until a full size-32 array can be placed in the tree. This makes "batch" insertion faster: suppose you creating a new PersistentVector from another collection type, e.g., a LinkedList. Since PersistentVector is immutable this is done by starting with the empty vector and then repeatedly 'cons'ing elements from the LinkedList to obtain a new vector. E.g., 

<pre><tt>
<span class="keyword">static</span><span class="normal"> </span><span class="keyword">public</span><span class="normal"> PersistentVector </span><span class="function">create</span><span class="symbol">(</span><span class="normal">List items</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">	PersistentVector ret </span><span class="symbol">=</span><span class="normal"> EMPTY</span><span class="symbol">;</span>
<span class="normal">	</span><span class="keyword">for</span><span class="symbol">(</span><span class="normal">Object item </span><span class="symbol">:</span><span class="normal"> items</span><span class="symbol">)</span>
<span class="normal">		ret </span><span class="symbol">=</span><span class="normal"> ret</span><span class="symbol">.</span><span class="function">cons</span><span class="symbol">(</span><span class="normal">item</span><span class="symbol">);</span>
<span class="normal">	</span><span class="keyword">return</span><span class="normal"> ret</span><span class="symbol">;</span>
<span class="cbracket">}</span>
</tt></pre>  

This also explains the 'tail' code in the <tt>nth</tt> method above: If we a getting an element which happens to be located in the <tt>tail</tt> buffer at present (there can be from 0 to 32 elements with this property), we simply access it directly. This is done by looking at the 5 least significant bits of the index.
 
While the code for 'cons' is intricate, the idea is reasonably simple as illustrated by the above figure. I will end this post with the actual code. If anyone is interested, I can go into the details of the implementation.
<pre><tt>
<span class="keyword">public</span><span class="normal"> PersistentVector </span><span class="function">cons</span><span class="symbol">(</span><span class="normal">Object val</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">	</span><span class="keyword">if</span><span class="symbol">(</span><span class="normal">tail</span><span class="symbol">.</span><span class="normal">length </span><span class="symbol">&lt;</span><span class="normal"> </span><span class="number">32</span><span class="symbol">)</span>
<span class="normal">		</span><span class="cbracket">{</span>
<span class="normal">		Object</span><span class="symbol">[]</span><span class="normal"> newTail </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> Object</span><span class="symbol">[</span><span class="normal">tail</span><span class="symbol">.</span><span class="normal">length </span><span class="symbol">+</span><span class="normal"> </span><span class="number">1</span><span class="symbol">];</span>
<span class="normal">		System</span><span class="symbol">.</span><span class="function">arraycopy</span><span class="symbol">(</span><span class="normal">tail</span><span class="symbol">,</span><span class="normal"> </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> newTail</span><span class="symbol">,</span><span class="normal"> </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> tail</span><span class="symbol">.</span><span class="normal">length</span><span class="symbol">);</span>
<span class="normal">		newTail</span><span class="symbol">[</span><span class="normal">tail</span><span class="symbol">.</span><span class="normal">length</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> val</span><span class="symbol">;</span>
<span class="normal">		</span><span class="keyword">return</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">PersistentVector</span><span class="symbol">(</span><span class="function">meta</span><span class="symbol">(),</span><span class="normal"> cnt </span><span class="symbol">+</span><span class="normal"> </span><span class="number">1</span><span class="symbol">,</span><span class="normal"> shift</span><span class="symbol">,</span><span class="normal"> root</span><span class="symbol">,</span><span class="normal"> newTail</span><span class="symbol">);</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">	Box expansion </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">Box</span><span class="symbol">(</span><span class="keyword">null</span><span class="symbol">);</span>
<span class="normal">	Object</span><span class="symbol">[]</span><span class="normal"> newroot </span><span class="symbol">=</span><span class="normal"> </span><span class="function">pushTail</span><span class="symbol">(</span><span class="normal">shift </span><span class="symbol">-</span><span class="normal"> </span><span class="number">5</span><span class="symbol">,</span><span class="normal"> root</span><span class="symbol">,</span><span class="normal"> tail</span><span class="symbol">,</span><span class="normal"> expansion</span><span class="symbol">);</span>
<span class="normal">	</span><span class="type">int</span><span class="normal"> newshift </span><span class="symbol">=</span><span class="normal"> shift</span><span class="symbol">;</span>
<span class="normal">	</span><span class="keyword">if</span><span class="symbol">(</span><span class="normal">expansion</span><span class="symbol">.</span><span class="normal">val </span><span class="symbol">!=</span><span class="normal"> </span><span class="keyword">null</span><span class="symbol">)</span>
<span class="normal">		</span><span class="cbracket">{</span>
<span class="normal">		newroot </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> Object</span><span class="symbol">[]</span><span class="cbracket">{</span><span class="normal">newroot</span><span class="symbol">,</span><span class="normal"> expansion</span><span class="symbol">.</span><span class="normal">val</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">		newshift </span><span class="symbol">+=</span><span class="normal"> </span><span class="number">5</span><span class="symbol">;</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">	</span><span class="keyword">return</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">PersistentVector</span><span class="symbol">(</span><span class="function">meta</span><span class="symbol">(),</span><span class="normal"> cnt </span><span class="symbol">+</span><span class="normal"> </span><span class="number">1</span><span class="symbol">,</span><span class="normal"> newshift</span><span class="symbol">,</span><span class="normal"> newroot</span><span class="symbol">,</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> Object</span><span class="symbol">[]</span><span class="cbracket">{</span><span class="normal">val</span><span class="cbracket">}</span><span class="symbol">);</span>
<span class="cbracket">}</span>
</tt></pre>

<pre><tt>
<span class="keyword">private</span><span class="normal"> Object</span><span class="symbol">[]</span><span class="normal"> </span><span class="function">pushTail</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> level</span><span class="symbol">,</span><span class="normal"> Object</span><span class="symbol">[]</span><span class="normal"> arr</span><span class="symbol">,</span><span class="normal"> Object</span><span class="symbol">[]</span><span class="normal"> tailNode</span><span class="symbol">,</span><span class="normal"> Box expansion</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">	Object newchild</span><span class="symbol">;</span>
<span class="normal">	</span><span class="keyword">if</span><span class="symbol">(</span><span class="normal">level </span><span class="symbol">==</span><span class="normal"> </span><span class="number">0</span><span class="symbol">)</span>
<span class="normal">		</span><span class="cbracket">{</span>
<span class="normal">		newchild </span><span class="symbol">=</span><span class="normal"> tailNode</span><span class="symbol">;</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">	</span><span class="keyword">else</span>
<span class="normal">		</span><span class="cbracket">{</span>
<span class="normal">		newchild </span><span class="symbol">=</span><span class="normal"> </span><span class="function">pushTail</span><span class="symbol">(</span><span class="normal">level </span><span class="symbol">-</span><span class="normal"> </span><span class="number">5</span><span class="symbol">,</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">Object</span><span class="symbol">[])</span><span class="normal"> arr</span><span class="symbol">[</span><span class="normal">arr</span><span class="symbol">.</span><span class="normal">length </span><span class="symbol">-</span><span class="normal"> </span><span class="number">1</span><span class="symbol">],</span><span class="normal"> tailNode</span><span class="symbol">,</span><span class="normal"> expansion</span><span class="symbol">);</span>
<span class="normal">		</span><span class="keyword">if</span><span class="symbol">(</span><span class="normal">expansion</span><span class="symbol">.</span><span class="normal">val </span><span class="symbol">==</span><span class="normal"> </span><span class="keyword">null</span><span class="symbol">)</span>
<span class="normal">			</span><span class="cbracket">{</span>
<span class="normal">			Object</span><span class="symbol">[]</span><span class="normal"> ret </span><span class="symbol">=</span><span class="normal"> arr</span><span class="symbol">.</span><span class="function">clone</span><span class="symbol">();</span>
<span class="normal">			ret</span><span class="symbol">[</span><span class="normal">arr</span><span class="symbol">.</span><span class="normal">length </span><span class="symbol">-</span><span class="normal"> </span><span class="number">1</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> newchild</span><span class="symbol">;</span>
<span class="normal">			</span><span class="keyword">return</span><span class="normal"> ret</span><span class="symbol">;</span>
<span class="normal">			</span><span class="cbracket">}</span>
<span class="normal">		</span><span class="keyword">else</span>
<span class="normal">			newchild </span><span class="symbol">=</span><span class="normal"> expansion</span><span class="symbol">.</span><span class="normal">val</span><span class="symbol">;</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">	</span><span class="comment">//expansion</span>
<span class="normal">	</span><span class="keyword">if</span><span class="symbol">(</span><span class="normal">arr</span><span class="symbol">.</span><span class="normal">length </span><span class="symbol">==</span><span class="normal"> </span><span class="number">32</span><span class="symbol">)</span>
<span class="normal">		</span><span class="cbracket">{</span>
<span class="normal">		expansion</span><span class="symbol">.</span><span class="normal">val </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> Object</span><span class="symbol">[]</span><span class="cbracket">{</span><span class="normal">newchild</span><span class="cbracket">}</span><span class="symbol">;</span>
<span class="normal">		</span><span class="keyword">return</span><span class="normal"> arr</span><span class="symbol">;</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">	Object</span><span class="symbol">[]</span><span class="normal"> ret </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> Object</span><span class="symbol">[</span><span class="normal">arr</span><span class="symbol">.</span><span class="normal">length </span><span class="symbol">+</span><span class="normal"> </span><span class="number">1</span><span class="symbol">];</span>
<span class="normal">	System</span><span class="symbol">.</span><span class="function">arraycopy</span><span class="symbol">(</span><span class="normal">arr</span><span class="symbol">,</span><span class="normal"> </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> ret</span><span class="symbol">,</span><span class="normal"> </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> arr</span><span class="symbol">.</span><span class="normal">length</span><span class="symbol">);</span>
<span class="normal">	ret</span><span class="symbol">[</span><span class="normal">arr</span><span class="symbol">.</span><span class="normal">length</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> newchild</span><span class="symbol">;</span>
<span class="normal">	expansion</span><span class="symbol">.</span><span class="normal">val </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">null</span><span class="symbol">;</span>
<span class="normal">	</span><span class="keyword">return</span><span class="normal"> ret</span><span class="symbol">;</span>
<span class="cbracket">}</span>
</tt></pre>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date>2009-02-01 22:17:01</wp:post_date>
		<wp:post_date_gmt>2009-02-01 20:17:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>understanding-clojures-persistentvector-implementation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="persistent-data-structures"><![CDATA[persistent data structures]]></category>
		<category domain="post_tag" nicename="persistentvector"><![CDATA[PersistentVector]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1420</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; clj-ds: Clojure&#8217;s persistent data structures for Java]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2010/06/11/clj-ds-clojures-persistent-data-structures-for-java/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2010-06-11 15:47:14</wp:comment_date>
			<wp:comment_date_gmt>2010-06-11 13:47:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] data structures. (In previous posts I&#8217;ve shed some light on how PersistentHashMap and PersistentVector are implemented, although some of that information is slightly dated [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1406</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>90.185.200.133</wp:comment_author_IP>
			<wp:comment_date>2010-05-24 14:14:34</wp:comment_date>
			<wp:comment_date_gmt>2010-05-24 12:14:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Using a technique called Path copying (see also the companion post on PersistentHashMap). 

I can elaborate, if you are interested...

/K]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1405</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1405</wp:comment_id>
			<wp:comment_author><![CDATA[vseloved]]></wp:comment_author>
			<wp:comment_author_email>vseloved@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.201.83.4</wp:comment_author_IP>
			<wp:comment_date>2010-05-24 14:06:15</wp:comment_date>
			<wp:comment_date_gmt>2010-05-24 12:06:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[And how is random insert implemented?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>29</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1385</wp:comment_id>
			<wp:comment_author><![CDATA[links for 2010-02-08 &laquo; Blarney Fellow]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blarneyfellow.wordpress.com/2010/02/09/links-for-2010-02-08/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.207</wp:comment_author_IP>
			<wp:comment_date>2010-02-09 03:32:35</wp:comment_date>
			<wp:comment_date_gmt>2010-02-09 01:32:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Higher-Order » Blog Archive » Understanding Clojure’s PersistentVector implementation (tags: clojure data-structure tree vector) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1387</wp:comment_id>
			<wp:comment_author><![CDATA[Clojure &#8211; Destillat #4 | duetsch.info - Open Source, Wet-, Web-, Software]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.duetsch.info/clojure-destillat-4.html</wp:comment_author_url>
			<wp:comment_author_IP>80.83.114.35</wp:comment_author_IP>
			<wp:comment_date>2010-02-26 11:08:40</wp:comment_date>
			<wp:comment_date_gmt>2010-02-26 09:08:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Understanding Clojure&#8217;s PersistentVector implementation [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1359</wp:comment_id>
			<wp:comment_author><![CDATA[Rick Minerich's Development Wonderland : Discoveries This Week 02/13/2009]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.atalasoft.com/cs/blogs/rickm/archive/2009/02/13/discoveries-this-week-02-13-2009.aspx</wp:comment_author_url>
			<wp:comment_author_IP>66.29.204.14</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 17:43:55</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 15:43:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Blog – Karl Krukow’s Understanding Clojure’s PersistentVector [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1363</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Understanding Clojure’s PersistentHashMap implementation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/?p=346</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 15:03:34</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 13:03:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a previous post, I gave a high-level description of how Clojure&#8217;s PersistentVector is implemented. While the code has changed, the description was high-level enough that the explanations still hold [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1365</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Understanding Clojure&#8217;s PersistentHashMap (deftwice&#8230;)]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/?p=386</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 17:30:04</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 15:30:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a previous post, I gave a high-level description of how Clojure&#8217;s PersistentVector is implemented. While the code has changed, the description was high-level enough that the explanations still hold [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1382</wp:comment_id>
			<wp:comment_author><![CDATA[uberVU - social comments]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ubervu.com/conversations/blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/</wp:comment_author_url>
			<wp:comment_author_IP>174.129.78.58</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 00:18:35</wp:comment_date>
			<wp:comment_date_gmt>2010-02-07 22:18:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Social comments and analytics for this post...</strong>

This post was mentioned on Twitter by dennyabraham: about clojure's persistentvector implementation http://bit.ly/MBaoj (why are the indentation sizes inconsistent?)...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1449</wp:comment_id>
			<wp:comment_author><![CDATA[vectormap and pvectormap | Higher-Order]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2010/10/14/vectormap-and-pvectormap/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2010-10-14 21:53:20</wp:comment_date>
			<wp:comment_date_gmt>2010-10-14 19:53:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] there divided!&#8221; Further immutability means no synchronization is needed. For example, remember that PersistentVector is a balanced 32-way tree consisting of size 32 arrays of Objects (Nodes in the [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1469</wp:comment_id>
			<wp:comment_author><![CDATA[The Bibliography &#124; The Joy of Clojure]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://old.fogus.me/bibliography/</wp:comment_author_url>
			<wp:comment_author_IP>64.14.72.41</wp:comment_author_IP>
			<wp:comment_date>2011-07-08 19:12:07</wp:comment_date>
			<wp:comment_date_gmt>2011-07-08 17:12:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Krukow, Karl. 2009. “Understanding Clojure’s PersistentVector Implementation.” http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1481</wp:comment_id>
			<wp:comment_author><![CDATA[Wartrol]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://buywartrolscam.org/</wp:comment_author_url>
			<wp:comment_author_IP>23.19.34.19</wp:comment_author_IP>
			<wp:comment_date>2011-09-02 18:35:55</wp:comment_date>
			<wp:comment_date_gmt>2011-09-02 16:35:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>wartrol genital warts...</strong>

[...] just below, a few totally not related sites to ours, yet, they're obviously worth checking out [...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1484</wp:comment_id>
			<wp:comment_author><![CDATA[alexdowad]]></wp:comment_author>
			<wp:comment_author_email>alexinbeijing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>61.246.46.7</wp:comment_author_IP>
			<wp:comment_date>2011-10-04 11:51:40</wp:comment_date>
			<wp:comment_date_gmt>2011-10-04 09:51:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very similar to a B-tree!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>48</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1486</wp:comment_id>
			<wp:comment_author><![CDATA[Polaroid Mutation | Headspring]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.headspring.com/2011/12/polaroid-mutation</wp:comment_author_url>
			<wp:comment_author_IP>173.203.66.239</wp:comment_author_IP>
			<wp:comment_date>2011-12-23 04:34:55</wp:comment_date>
			<wp:comment_date_gmt>2011-12-23 02:34:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Clojure collections are clever. Behind the scenes, lists and a maps are really trees. The items are stored in the leaves, and whenever we need to create a &#8220;whole new [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1490</wp:comment_id>
			<wp:comment_author><![CDATA[遅延シーケンス | sawam&#039;s blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.zecun.org/?p=158</wp:comment_author_url>
			<wp:comment_author_IP>46.51.255.184</wp:comment_author_IP>
			<wp:comment_date>2012-01-11 16:04:08</wp:comment_date>
			<wp:comment_date_gmt>2012-01-11 14:04:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/ [fn:pd2] http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/ [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1491</wp:comment_id>
			<wp:comment_author><![CDATA[clojure 1 by fogus - Pearltrees]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.pearltrees.com/fogus/clojure-1/id555790</wp:comment_author_url>
			<wp:comment_author_IP>93.184.35.43</wp:comment_author_IP>
			<wp:comment_date>2012-01-13 13:25:08</wp:comment_date>
			<wp:comment_date_gmt>2012-01-13 11:25:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Understanding Clojure’s PersistentVector implementation [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1492</wp:comment_id>
			<wp:comment_author><![CDATA[clojure by timwee - Pearltrees]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.pearltrees.com/timwee/clojure/id302803</wp:comment_author_url>
			<wp:comment_author_IP>93.184.35.43</wp:comment_author_IP>
			<wp:comment_date>2012-01-13 13:27:56</wp:comment_date>
			<wp:comment_date_gmt>2012-01-13 11:27:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Blog Archive » Understanding Clojure’s PersistentVector implemen One of the unique features of Clojure is that the core data structures are persistent (immutable with efficient structural sharing). This includes data structures Vector and Map that are mutable in most other languages. To be useful, operations on persistent data structures need to have performance characteristics that are similar to their mutating counterparts; e.g., the cost of random access on a persistent vector (put/get) needs to be comparable to random access to a mutable vector. [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1494</wp:comment_id>
			<wp:comment_author><![CDATA[ido.ran]]></wp:comment_author>
			<wp:comment_author_email>ido.ran@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://dotdotnet.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>87.69.100.31</wp:comment_author_IP>
			<wp:comment_date>2012-02-08 12:51:20</wp:comment_date>
			<wp:comment_date_gmt>2012-02-08 10:51:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
Your post is great, teach me a lot.
I will be very happy to see another post about how to remove items, change item and how it is implemented.

Ido.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>222</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1495</wp:comment_id>
			<wp:comment_author><![CDATA[jane]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://iloveyoujanerrq.com</wp:comment_author_url>
			<wp:comment_author_IP>108.62.202.206</wp:comment_author_IP>
			<wp:comment_date>2012-02-19 13:46:54</wp:comment_date>
			<wp:comment_date_gmt>2012-02-19 11:46:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>hello...</strong>

It's the best time to make some plans for the future and it is time to be happy. I have read this post and if I could I want to suggest you few interesting things or suggestions. Perhaps you can write next articles referring to this article. I wish to...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1496</wp:comment_id>
			<wp:comment_author><![CDATA[if i get laser hair removal do all my sessions have to be with the same type of laser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://laserhairremoval123.com/if-i-get-laser-hair-removal-do-all-my-sessions-have-to-be-with-the-same-type-of-laser/</wp:comment_author_url>
			<wp:comment_author_IP>80.213.103.92</wp:comment_author_IP>
			<wp:comment_date>2012-04-30 19:17:27</wp:comment_date>
			<wp:comment_date_gmt>2012-04-30 17:17:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>if i get laser hair removal do all my sessions have to be with the same type of laser...</strong>

[...]Here is a good Blog You might Come across Interesting that we Encourage You[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1500</wp:comment_id>
			<wp:comment_author><![CDATA[Porting Clojure&rsquo;s persistent data structures to .Net part 1 of n &ndash; PersistentVector &raquo; Rash thoughts about .NET, C#, F# and Dynamics NAV.]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.navision-blog.de/2012/05/29/porting-clojures-persistent-data-structures-to-net-part-1-of-n-persistentvector/</wp:comment_author_url>
			<wp:comment_author_IP>85.13.141.170</wp:comment_author_IP>
			<wp:comment_date>2012-05-29 16:41:52</wp:comment_date>
			<wp:comment_date_gmt>2012-05-29 14:41:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Understanding Clojure’s PersistentVector implementation  Tags: clojure, F#, FSharpx, persistent data structures, vector   Feedback: [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1502</wp:comment_id>
			<wp:comment_author><![CDATA[webcam sex]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.webcamvice.com/</wp:comment_author_url>
			<wp:comment_author_IP>5.9.254.6</wp:comment_author_IP>
			<wp:comment_date>2012-07-09 02:26:05</wp:comment_date>
			<wp:comment_date_gmt>2012-07-09 00:26:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Webcam Sex Live...</strong>

Live Web Cam Sex an Chat...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1512</wp:comment_id>
			<wp:comment_author><![CDATA[Leia Elchert]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://depts.washington.edu/ixd/paretegray14/2012/10/11/can-it-be-conceivable-to-find-an-xbox-100-free-or-super-affordable/</wp:comment_author_url>
			<wp:comment_author_IP>69.46.79.244</wp:comment_author_IP>
			<wp:comment_date>2012-11-04 09:02:59</wp:comment_date>
			<wp:comment_date_gmt>2012-11-04 07:02:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>On the internet Piece of writing...</strong>

The information stated inside of the guide are a few of the greatest accessible...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1514</wp:comment_id>
			<wp:comment_author><![CDATA[Jamaal Arenburg]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sklad.cumc.columbia.edu/nursing/acceptedApplicants/drupForum/?q=node/1772</wp:comment_author_url>
			<wp:comment_author_IP>205.164.13.68</wp:comment_author_IP>
			<wp:comment_date>2012-11-28 07:42:25</wp:comment_date>
			<wp:comment_date_gmt>2012-11-28 05:42:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>{Check|Verify|Examine|Check out|Test|Look at|Take a look at|Investigate} this out...</strong>

that may be the finish of the short article. Listed here you will find some internet websites that we assume you’ll appreciate, just simply click the back links in excess of...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1518</wp:comment_id>
			<wp:comment_author><![CDATA[Porfirio Johnosn]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ab.mec.edu/groups/testwiki/weblog/cb3e9/Xbox_Giveaway_Provides_you_Help_to_Hard-Pressed_Avid_players.html</wp:comment_author_url>
			<wp:comment_author_IP>50.117.67.124</wp:comment_author_IP>
			<wp:comment_date>2012-11-28 23:08:25</wp:comment_date>
			<wp:comment_date_gmt>2012-11-28 21:08:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Recommeneded {websites|web sites|internet sites|sites|internet websites|web pages|web-sites|website pages|online websites|webpages|internet sites}...</strong>

Below are a few with the online websites we encourage for our visitors...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1524</wp:comment_id>
			<wp:comment_author><![CDATA[software for sales ect...]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://affiliatdownload.dk/sml/Softwaresalesect.php?software=653010</wp:comment_author_url>
			<wp:comment_author_IP>77.66.30.214</wp:comment_author_IP>
			<wp:comment_date>2012-12-10 05:50:06</wp:comment_date>
			<wp:comment_date_gmt>2012-12-10 03:50:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Affiliate Marketing And Home Business Many of us dream of being our own bosses. The lure of big money and flexible work hours is quite attractive. However, many are afraid to venture out on their own. They fear that they do not have the capital required to get a business started or they don’t want to loose the security of their day job. The solution could be starting a home business. The truth of the matter is that you can start your home business with no money at all. Ask yourself this, do you have a spare room or space in your house. Do you have a computer with an internet connection? Do you have a phone line? If you have these three things you have the essentials of an office from which your home business can be made. Affiliate marketing can be a great way for you to get started in your home business. Affiliate marketing will provide you with the opportunity to sell either a product or a service. With low capital and little space you may want to concentrate on services. Once you have made the decision, you need to evaluate your skills. Original Post: http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/ [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1526</wp:comment_id>
			<wp:comment_author><![CDATA[http://easy1paydayloans.co.uk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://easy1paydayloans.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>183.228.222.6</wp:comment_author_IP>
			<wp:comment_date>2013-03-13 21:41:28</wp:comment_date>
			<wp:comment_date_gmt>2013-03-13 19:41:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>http://easy1paydayloans.co.uk...</strong>

You may have a bad credit or may not have any assets although sufficient to meet with your needs on time....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1530</wp:comment_id>
			<wp:comment_author><![CDATA[Porn]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>123.90.30.228</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 01:22:21</wp:comment_date>
			<wp:comment_date_gmt>2013-03-17 23:22:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Porn...</strong>

Absolutely avoid maxing out the truly is but understandable that many people type their opinions determined by what other folks are saying....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1540</wp:comment_id>
			<wp:comment_author><![CDATA[hermes replicas]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.luxurydreamhermes.com/hermes-2012-bags-c-10_21.html</wp:comment_author_url>
			<wp:comment_author_IP>119.115.251.207</wp:comment_author_IP>
			<wp:comment_date>2013-04-07 13:57:30</wp:comment_date>
			<wp:comment_date_gmt>2013-04-07 11:57:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>hermes replicas...</strong>

history!Intrigued by the history of the company, I asked my fabulous friend, Florence the Shoe Goddess to find out more when she returned home to Paris louis vuitton...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1544</wp:comment_id>
			<wp:comment_author><![CDATA[Aaron Asebedo]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.squidoo.com/</wp:comment_author_url>
			<wp:comment_author_IP>77.254.70.89</wp:comment_author_IP>
			<wp:comment_date>2013-04-11 14:35:26</wp:comment_date>
			<wp:comment_date_gmt>2013-04-11 12:35:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Asuncion Cheli...</strong>

More or less I don’t read item wherefore blogs....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1553</wp:comment_id>
			<wp:comment_author><![CDATA[Cash Advance Online King]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://cashadvanceonlineking.com/online-loans-advice/</wp:comment_author_url>
			<wp:comment_author_IP>121.24.103.195</wp:comment_author_IP>
			<wp:comment_date>2013-05-01 12:07:12</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 10:07:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Cash Advance Online King...</strong>

With gladness of heart, for the abundance of all things; 28:48!...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1568</wp:comment_id>
			<wp:comment_author><![CDATA[lululemon canada]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.cheapluluonline.com</wp:comment_author_url>
			<wp:comment_author_IP>59.58.136.154</wp:comment_author_IP>
			<wp:comment_date>2013-05-04 11:00:41</wp:comment_date>
			<wp:comment_date_gmt>2013-05-04 09:00:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>lululemon canada...</strong>

Ms. I've been super busy at work the past few days,lululemon outlet, so I haven't been on here much. So it exciting that much of the new work nominated for this year Tony Awards is among the smartest, most penetrating, and most mind-expanding theater...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1569</wp:comment_id>
			<wp:comment_author><![CDATA[lululemon sale]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.lululemonsale.org/</wp:comment_author_url>
			<wp:comment_author_IP>59.58.136.154</wp:comment_author_IP>
			<wp:comment_date>2013-05-04 11:00:56</wp:comment_date>
			<wp:comment_date_gmt>2013-05-04 09:00:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>lululemon sale...</strong>

By instituting democratic changes and economic liberalization,discount lululemon, he has built a reputation as a reformer and restored relations with Western nations that had shunned the previous military regime for its poor human rights record.. if yo...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1571</wp:comment_id>
			<wp:comment_author><![CDATA[Clojure Weekly Reading 0506]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://mlstack.com/clj/?p=19</wp:comment_author_url>
			<wp:comment_author_IP>182.50.130.22</wp:comment_author_IP>
			<wp:comment_date>2013-05-06 09:06:46</wp:comment_date>
			<wp:comment_date_gmt>2013-05-06 07:06:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 5.Understanding Clojure&#8217;s PersistentVector [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1572</wp:comment_id>
			<wp:comment_author><![CDATA[lululemon canada]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.lululemonjackets.org</wp:comment_author_url>
			<wp:comment_author_IP>120.37.216.72</wp:comment_author_IP>
			<wp:comment_date>2013-05-06 11:44:14</wp:comment_date>
			<wp:comment_date_gmt>2013-05-06 09:44:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>lululemon canada...</strong>

There were many genuinely engaging conversations that took place when you decided to leave comments. By far, this class was the best blogging class I ever had! I don know if you realize how many teachers you have inspired to make their own blogs becaus...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1573</wp:comment_id>
			<wp:comment_author><![CDATA[lululemon sale]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.cheaplulusale.com</wp:comment_author_url>
			<wp:comment_author_IP>120.37.216.72</wp:comment_author_IP>
			<wp:comment_date>2013-05-06 12:09:07</wp:comment_date>
			<wp:comment_date_gmt>2013-05-06 10:09:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>lululemon sale...</strong>

There were many genuinely engaging conversations that took place when you decided to leave comments. By far, this class was the best blogging class I ever had! I don know if you realize how many teachers you have inspired to make their own blogs becaus...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1576</wp:comment_id>
			<wp:comment_author><![CDATA[Kredit trotz Schufa]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://hip-kredit.eu</wp:comment_author_url>
			<wp:comment_author_IP>78.187.58.158</wp:comment_author_IP>
			<wp:comment_date>2013-05-08 21:52:28</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 19:52:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredit trotz Schufa...</strong>

Regine erschrak, denn im Augenblick wusste sie: gegen den Bruder konnte sie nicht aufkommen nie, er war immer der Staerkere, immer der Kluegere....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1595</wp:comment_id>
			<wp:comment_author><![CDATA[cheap nike free 5]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.cheapfreeruningnorway.com</wp:comment_author_url>
			<wp:comment_author_IP>192.95.7.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 18:38:48</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 16:38:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cheap nike free 5...</strong>

De essensielle kjÃ¸kkenutstyr ovenfor er brakt til la deg utfÃ¸re matlaging oppgaven perfekt. Hvis du Ã¸nsker Ã¥ bringe den perfekte mÃ¥ltider for familien din, mÃ¥ du ha de tingene ovenfor i kjÃ¸kkenet. Jeg oppfordrer denne typen praksis, spesielt for...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1602</wp:comment_id>
			<wp:comment_author><![CDATA[Keramouzol]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ratsg.ru/1657-sposobnosti-mikroorganizmov-k-adsorbcii.html</wp:comment_author_url>
			<wp:comment_author_IP>88.214.192.23</wp:comment_author_IP>
			<wp:comment_date>2013-05-12 12:50:21</wp:comment_date>
			<wp:comment_date_gmt>2013-05-12 10:50:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>êåðàìîèçîë- æèäêàÿ òåïëîèçîëÿöèÿ....</strong>

Keramouzol.com.ua - site about "Keramouzol"...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1603</wp:comment_id>
			<wp:comment_author><![CDATA[replica louis vuitton purse]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://itbaglouisvuittonstore.me.cc</wp:comment_author_url>
			<wp:comment_author_IP>110.244.80.64</wp:comment_author_IP>
			<wp:comment_date>2013-05-14 03:22:50</wp:comment_date>
			<wp:comment_date_gmt>2013-05-14 01:22:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>replica louis vuitton purse...</strong>

What a funny blog! I actually Understanding Clojure’s PersistentVector implementation | Higher-Order loved watching this comic video with my relatives as well as including my mates....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1628</wp:comment_id>
			<wp:comment_author><![CDATA[セイコー 腕時計]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.wafchesjp.com</wp:comment_author_url>
			<wp:comment_author_IP>120.43.5.19</wp:comment_author_IP>
			<wp:comment_date>2013-06-24 21:29:13</wp:comment_date>
			<wp:comment_date_gmt>2013-06-24 19:29:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>セイコー 腕時計...</strong>

Thanks for another informative website. Where else could I get that kind of information written in such an ideal way? I've a project that I'm just now working on, and I've been on the look out for such information....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Clojure event sourcing</title>
		<link>http://blog.higher-order.net/2009/02/22/clojure-event-sourcing/</link>
		<pubDate>Sun, 22 Feb 2009 19:56:46 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://martinfowler.com/eaaDev/EventSourcing.html">Event sourcing</a>:
<blockquote>Event Sourcing ensures that all changes to application state are stored as a sequence of events. Not just can we query these events, we can also use the event log to reconstruct past states, and as a foundation to automatically adjust the state to cope with retroactive changes.</blockquote>

I recently watched <a href="http://www.infoq.com/news/2009/01/greg-young-ddd">an InfoQ interview with Greg Young</a> where he discusses an interesting architecture that uses event stream processing. I thought their architecture sounded very interesting, but I did not go into 'research mode' to dig into it. Later I came by Jonas Bonér's blog on "Real world scala" and saw an <a href="http://jonasboner.com/2009/02/12/event-sourcing-using-actors.html">example of event sourcing using actors in Scala</a>. I thought it would be a good exercise to implement a similar example in Clojure, and perhaps it would also be interesting to compare the solutions and see the effect of the languages on the implementation.

As Clojure focuses on concurrency it was natural to start thinking about what 'concurrent' event sourcing would mean and how to implement it. 

<strong>Sequential Clojure implementation.</strong> For context, read Fowler's article on <a href="http://martinfowler.com/eaaDev/EventSourcing.html">event sourcing</a>, and for comparison Jonas Bonér's <a href="http://jonasboner.com/2009/02/12/event-sourcing-using-actors.html">Scala implementation</a>.

<strong>Modeling.</strong> Scala uses classes and actors for modeling ships and their state. A ship is an actor that receives events (messages) and reacts to those by updating its internal state, i.e., its location (e.g., departure event, arrival event). 

Clojure has <em>agents</em> which are similar to actors. Agents are simpler and there are more functions that act on agents than on Actors; for example, in Clojure it is possible to directly read the state of an agent (using <tt>(<span class="keyword">deref</span> x)</tt> or <tt>@x</tt>) — this is not possible with actors since they are distributed (at least programmed as if they were distributed).

I've used two additional Clojure features in implementing event sourcing: watchers and meta-data. <a href="http://clojure.org/api#toc50">Watchers</a> are a form of callback attached to agents. The callback is called synchronously with the agent actions and "derefs of the agent in the callback will see the value set during that action." I am using watchers to record the events that are sent to each ship. This decouples the code dealing with event storage from the state-changing functions sent to agents. The state of an agent is the location of the ship it represents. So we can get the location of a ship at any time simply by deref'ing the agent representing the ship (with actors this is more complex as one has to send a message to the actor and receive a message with the answer). I decided to use meta data attached to the location to represent the event that caused a move to that location. For example

<pre><tt>
user> @(first agents)
{:country "At sea", :city "At sea"}
user> ^@(first agents)
{:agent 0, :time #&lt;Date Sun Feb 22 19:49:59 CET 2009&gt;, :type :depart_for, 
:loc {:country "Sweden", :city "Malmö"}}
user></tt></pre>

In general, I think it is possible to implement sequential event sourcing reasonably elegantly in Clojure using agents, watchers and metadata. The agents store the state that can change, the watchers record the events that cause the changes by looking at state meta data. The invariant should be that if an agent moves from state <tt>s1</tt> to state <tt>s2</tt> then <tt>(meta s2)</tt> should store the event that caused a transition from the <tt>s1</tt> to state <tt>s2</tt>. Then if one knows the initial state, and all the events it is possible to reconstruct the entire sequence of states.

Our watchers are quite simple: (notice the cool syntax <tt>#(meta @%)</tt>.  A shame I couldn't write <tt>#(^@%)</tt>  it looks like I'm swearing! ;-) that would be cool)
<pre><tt>
;;Record event history
(def events (atom (map #(meta @%) agents))) 

(defn event_logger
  [idx a changed]
  (if changed
    (swap! events conj (meta @a))))

(defn add-watchers []
  "associate a watcher with each agent
   the watcher logs the events for that agent"
  (dotimes [i NUM_SHIPS]
    (add-watch (agents i) i event_logger)))</tt></pre>

<strong>Concurrent event sourcing</strong> A natural question to ask for Clojure is "what if there are multiple concurrent event sources?" Is it still possible to do event sourcing? I don't think so; at least not is a manner as powerful as with sequential events. Since Fowler defines event sourcing as ensuring "(…) that all changes to application state are stored as a sequence of events." We already have a problem: when events can occur concurrently one must serialize them in order to store them as a sequence. One could try and timestamp all events and store them as a set, but this is sensitive to timing an scheduler issues. Even if stored as a set of timestamped events, how would one replay these events in a way that ensures that the global program states are the same in the replayed program? This would be dependent on thread scheduler timings. 

It is of course possible to do the less advanced use cases of event sourcing, e.g. event querying and analysis (I guess that is concurrent event stream processing).

Anyway, if anyone is still reading ;-) the <a href="http://blog.higher-order.net/files/clj/es.clj">Source file link</a>. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2009-02-22 21:56:46</wp:post_date>
		<wp:post_date_gmt>2009-02-22 19:56:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clojure-event-sourcing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="instanceof"><![CDATA[instanceof]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1369</wp:comment_id>
			<wp:comment_author><![CDATA[Today in the Intertweets (Oct 5th Ed.) | disclojure: all things clojure]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://disclojure.org/2009/10/05/today-in-the-intertweets-oct-5th-ed/</wp:comment_author_url>
			<wp:comment_author_IP>74.208.16.3</wp:comment_author_IP>
			<wp:comment_date>2009-10-06 07:56:15</wp:comment_date>
			<wp:comment_date_gmt>2009-10-06 05:56:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Sourcing in Clojure (here, via @markhneedham)    Share and [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1479</wp:comment_id>
			<wp:comment_author><![CDATA[designer shoes]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://discounteddesignershoes.net</wp:comment_author_url>
			<wp:comment_author_IP>109.230.223.61</wp:comment_author_IP>
			<wp:comment_date>2011-08-14 20:59:12</wp:comment_date>
			<wp:comment_date_gmt>2011-08-14 18:59:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>You should check this out...</strong>

[...] Wonderful story, reckoned we could combine a few unrelated data, nevertheless really worth taking a look, whoa did one learn about Mid East has got more problerms as well [...]…...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>One aspect of lazy computation </title>
		<link>http://blog.higher-order.net/2009/04/23/one-aspect-of-lazy-computation/</link>
		<pubDate>Thu, 23 Apr 2009 20:38:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[I've often needed to do a combination of filtering and mapping on arrays. E.g. in a Ruby on Rails app, I might have a list of "RecurringActivation" model objects which have a product_id and an integer period. Now I would like a list of product_ids where the current time "matches" the period; in code this might be:
<pre><tt><span class="comment">#version 1 - 'functional'</span>
<span class="normal">cur_period </span><span class="symbol">=</span><span class="normal"> Time</span><span class="symbol">.</span><span class="normal">now</span><span class="symbol">.</span><span class="normal">month </span><span class="symbol">-</span><span class="normal"> </span><span class="number">1</span>
<span class="normal">RecurringActivation</span><span class="symbol">.</span><span class="normal">find</span><span class="symbol">(:</span><span class="normal">all</span><span class="symbol">,</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">select </span><span class="symbol">=&gt;</span><span class="normal"> </span><span class="string">"product_id, period"</span><span class="symbol">).</span><span class="normal">select </span><span class="cbracket">{</span><span class="normal"> </span><span class="symbol">|</span><span class="normal">r</span><span class="symbol">|</span>
<span class="normal">  cur_period </span><span class="symbol">%</span><span class="normal"> r</span><span class="symbol">.</span><span class="normal">period </span><span class="symbol">==</span><span class="normal"> </span><span class="number">0</span>
<span class="cbracket">}</span><span class="symbol">.</span><span class="normal">map </span><span class="symbol">&amp;:</span><span class="normal">product_id</span>


<span class="comment">#version 2 - 'imperative'</span>
<span class="normal">cur_period </span><span class="symbol">=</span><span class="normal"> Time</span><span class="symbol">.</span><span class="normal">now</span><span class="symbol">.</span><span class="normal">month </span><span class="symbol">-</span><span class="normal"> </span><span class="number">1</span>
<span class="normal">result </span><span class="symbol">=</span><span class="normal"> </span><span class="symbol">[]</span>
<span class="normal">RecurringActivation</span><span class="symbol">.</span><span class="normal">find</span><span class="symbol">(:</span><span class="normal">all</span><span class="symbol">,</span><span class="normal"> </span><span class="symbol">:</span><span class="normal">select </span><span class="symbol">=&gt;</span><span class="normal"> </span><span class="string">"product_id, period"</span><span class="symbol">).</span><span class="normal">each </span><span class="cbracket">{</span><span class="normal"> </span><span class="symbol">|</span><span class="normal">r</span><span class="symbol">|</span>
<span class="normal">  result </span><span class="symbol">&lt;&lt;</span><span class="normal"> r</span><span class="symbol">.</span><span class="normal">product_id  </span><span class="keyword">if</span><span class="normal"> cur_period </span><span class="symbol">%</span><span class="normal"> r</span><span class="symbol">.</span><span class="normal">period </span><span class="symbol">==</span><span class="normal"> </span><span class="number">0</span>
<span class="cbracket">}</span></tt></pre>
In the first version I compose functions (methods) 'select' and 'map': the blocks have no side-effects, and this is why I call it 'functional.' This is shorter and more clear. Of course, this is implemented by the library using iteration and imperative assignment, but at least my code feels functional.

In the second version I use 'each' with a block that does both filtering and 'mapping' in one step: I add the product_id explicitly to the products array for each object which satisfies my criterion. 

Notice that the first version first produces a complete filtered list which is then passed on to the map method which produces a complete mapped and filtered list: the list is iterated twice, and an intermediate array containing only the filtered objects exists in memory and is later collected as garbage. In the second version the list is only iterated once, and such an intermediate array of filtered objects is never allocated. Hence one might choose the latter for performance reasons. 

Now consider the same in Clojure or any lazy functional language. We might have (no active record here):
<pre><tt>
krukow:~/Projects/private/okooko-prod/tmp$ cl
Clojure
user=> (<span class="keyword">def</span> recurring_activations '({:product_id 1 :period 2} 
                                    {:product_id 2 :period 3}
				    {:product_id 3 :period 2}))
#'user/recurring_activations
user=> (<span class="keyword">def</span> res
         (map <span class="symbol">#</span>(<span class="keyword">do</span> (println <span class="string">"map"</span>) (<span class="symbol">:product_id</span> <span class="symbol">%</span>))
             (filter <span class="symbol">#</span>(<span class="keyword">do</span> (println <span class="string">"filter"</span>) (= 0 (mod (:period <span class="symbol">%</span>) <span class="number">2</span>)))
                 recurring_activations)))
#'user/res
user=> 
</tt></pre>
Nothing has been mapped or filtered yet since Clojure is fully lazy. So res is now a lazy seq which will compute exactly what is needed on demand. Now think about what will happen if I just peek at the first element of res… In a non-lazy language, already the entire recurring_activations list would have been filtered (printing "filter" three times), then that result would have been mapped (printing "map" twice) and finally the first element would be looked up. So the output would be 
"filter"
"filter"
"filter"
"map"
"map"
(return first element of list).

What happens in Clojure? It prints "filter" "map" and gives the first element:
 <pre><tt>
user=> (first res)
filter
map
1
user=> 
</tt></pre>
In effect we don't need an intermediate list containing the filtered elements which is then garbage collected. Notice also that if we just look at the entire list (recomputing res first) we get:
 <pre><tt>
user=> res
(filter
map
filter
filter
map
1 3)
user=>
</tt></pre>
So the side effects are evaluated in a different order than had we realized the entire filtered list first. This can be counter intuitive when one is used to eager languages (which all mainstream languages are); however, once understood laziness can be extremely powerful and elegant.

In effect, <em>in lazy languages we can compose functions that work on entire sequences, e.g., map and filter, to obtain a lazy sequence which evaluates the all of the composed functions on each element in sequence.</em> 

If that sounded abstract and poorly phrased, I can try to say it more concretely: In Ruby (or Java) I would need to write a new function: filter_and_map taking two "blocks"/"procs" and a list, then using e.g. "each" on the list and apply first the filter "proc" then the map "proc" -- the existing functions "map" and "select" can't help me. In Clojure (or Haskell) I can simply compose the existing library functions filter and map to obtain the same thing:
<pre><tt>
(def filter_map
	(comp (partial map :product_id)
	          (partial filter #(= 0 (mod (:period %) 2)))))
</pre></tt>
or just use it inline
<pre><tt>
user=> (def res
	(map :product_id
	 (filter #(= 0 (mod (:period %) 2)) recurring_activations)))
#'user/res
user=> res
(1 3)
user=> 
</pre></tt> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date>2009-04-23 22:38:07</wp:post_date>
		<wp:post_date_gmt>2009-04-23 20:38:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>one-aspect-of-lazy-computation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="laziness"><![CDATA[Laziness]]></category>
		<category domain="category" nicename="performance"><![CDATA[performance]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1558</wp:comment_id>
			<wp:comment_author><![CDATA[diy solar panels]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.greenplanet4energy.com</wp:comment_author_url>
			<wp:comment_author_IP>5.8.242.10</wp:comment_author_IP>
			<wp:comment_date>2013-05-01 23:27:03</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 21:27:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>diy solar panels...</strong>

Howdy just wanted to give you a quick heads up and let you know a few of the images aren't loading properly. I'm not sure why but I think its a linking issue. I've tried it in two different internet browsers and both show the same results.|...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Monty hall and Bayesian probability theory</title>
		<link>http://blog.higher-order.net/2009/06/23/monty-hall-and-bayesian-probability-theory/</link>
		<pubDate>Tue, 23 Jun 2009 06:26:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=316</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.codinghorror.com/blog/archives/001278.html">Jeff Atwood discusses the "Monty hall" problem</a>. I made a comment about why I believe people's intuition is often wrong when presented with the problem: I believe it is due to the way probability theory is taught in schools and universities. The notion of probability simply as an extension of classical logic as presented by Edwin Jaynes matches intuition much more closely. To solve the Monty Hall problem we need three simple principles (which apply to a <strong>wide</strong> range of problems):
<ul>
	<li> Probability is about information. Forget notions of "random" experiments, e.g., the outcome of throwing a die is about the laws of physics - there is no magical randomness built into the die causing it to come up with each side equally often "in the long run" (what ever that means). If we know the laws of physics and have enough information about the experiment we might assign other probabilities to the outcomes. This means that <em>if new information is obtained the probability changes</em>!</li>
</ul>
<ul>
	<li>In the name of science, we shall not make any unwarranted conclusions, and we promise to use all the information at hand, not deliberately discarding information (for what ever reason).</li>
</ul>
<ul>
	<li>We use the laws of probability theory.</li>
</ul>
The first point is where the problem lies. In fact the probabilities are just a formalization of the <em>information</em> we have. This is why we always condition the probability on some information e.g., P(A | I) is the probability of proposition A given the information I.

Let's solve Monty Hall using the principles presented in Jaynes' book. Notice that these techniques are completely general and can solve many different problems of this nature; the key in Monty Hall is not to make any unjustified conclusions, but simply <em>consider all the information at hand!</em>

Lets name the doors A, B and C, and let us assume that we initially selected door A (the argument applies for any other initial choice as well). Let us write I for the information we have initially (before opening any doors) - this includes the rules of the game. More precisely I is the conjunction of statements:

* We have chosen door A.

* The host knows where the car is, and may only open a door that does not contain the car.

* The host may not open the door we selected (A) (even if it does not contain the car).

We formalize the information I in probability equations below. Let us consider three mutually exclusive and exhaustive propositions

A = the car is behind door A;

B = the car is behind door B;

C = the car is behind door C

By the principle of indifference, given only the initial information, I, we have

P(A | I) = P(B | I) = P(C | I) = 1/3

Notice also that so far intuition is completely clear.

Let us now assume that the host opens door C. Let H be the statement:

H = the host opened door C

(the argument is similar for any other choice). The important point here is that we are given additional information beyond our prior information, I. Now let us first derive the correct solution, we then analyze where peoples intuition usually goes wrong.

By the rules of probability theory (specifically Bayes theorem) we have

P(A | HI) = P(A|I) P(H | AI)/P(H|I)

The quantity P(A|HI) is what we are interested in: the probability of the car being behind door A given <em>all the information available to us</em>.

We know P(A|I) is 1/3 so we can focus on P(H|AI) and P(H|I) - notice these are both probabilities about the host's actions - probabilities that are very relevant to the problem (by the equation above), but also probabilities that most people would not consider to analyse (because probability is taught the way it is)! The former is the probability of the host opening door C given the car is behind door A; the latter is the a-priori probability of the host opening door C given only the information I. The former, P(H|AI), is the most simple: given we know that the car is behind door A what is the probability of the host opening door C. Since we have no information about which door the host opens when the car is behind the door we selected, the principle of indifference applies and we have:

P(H|AI) = P(not H|AI) = 1/2

Now consider P(H|I): the a-priori probability of the host opening door C. Since propositions A, B and C are mutually exclusive and exhaustive, the rules of probability theory imply

P(H | I) = P(H | AI)P(A|I) + P(H | BI)P(B | I) + P(H | CI)P(C | I)

We know that P(H | CI) = 0 because by information I, the host may not open door C if the car is behind door C.  We already figured out P(H | AI) and P(A|I) so the first term is 1/2*1/3 = 1/6. Also we know P(B | I) = 1/3. Now we can focus on P(H | BI): the probability of host opening door C when the car is behind door B and we have chosen door A. But here the rules of the game are clear: the host <strong>must</strong> open door C in this case since he may not open A and may not reveal the car. Hence P(H | BI) = 1. We get:

P(H | I) = 1/6 + 1*1/3 = 3/6 = 1/2.

We now have all the quantities needed to calculate P(A | HI):

P(A | HI) = 1/3 * [(1/2)/(1/2)] = 1/3. Hence P(B | HI) = 2/3 and we should switch doors!

The technique is completely mechanical. I have not used any clever arguments or mathematical ingenuity: only the rules of the game, the principle of indifference and the laws of probability theory. All calculations could be performed by a machine with these inputs.

So where does our intuition go wrong? Two places, I believe. First because of schooling our intuition tells us that somehow we can only reason about "random" events. Instead we should focus on <em>information</em> e.g., 'the car is placed "at random" behind a door' versus "we are given the information that there is a car behind one door and sheep behind the two others." Once we free ourselves to consider probabilities as expressing the information we have available, it is natural that the probabilities change when we obtain more information. This is crucial. The second, I believe, is a consequence of the first: most people seem to identify the following two statements in the Monty Hall problem:

* the host opens door C

* the car is not behind door C

But these two pieces of information are not equivalent when we know the rules of the game (i.e. given our prior information). Considering them equal would violate our commitment to science, to be objective and to consider <em>all</em> the information at hand :-)

To illustrate let us analyse a variant of Monty Hall where "H" means the latter instead.

Given this alternate piece of information, our first step is still to apply Bayes theorem so:

P(A | HI) = P(A|I) P(H | AI)/P(H|I)

We still have P(A|I) = 1/3. P(H|I) is the probability that the car is not behind door C given our initial information. Since H = not C, and since A, B, C are mutually exclusive and exhaustive, the rules of probability theory imply

P(H | I) = P(not C|I) = P(A or B|I) = P(A|I) + P(B|I) = 2/3

Now P(H | AI) is calculated by classical logic: since A implies not C we have P(H | AI) = 1. Hence:

P(A | HI) = 1/3 * 1/[2/3] = 1/2

Which is the false result that most people's intuition prefer. This is the correct conclusion, but for a different game than Monty Hall, namely the game without a host where you simply get an additional information about where the car is not.

Notice that we easily analysed both variants of the game using simple probability theory, and in its interpretation as an extension of classical logic, the intuition follows along nicely. The key is to use <em>all the information at hand</em>, not discarding any information that could be of relevance to the problem (i.e. we got the information that host selected C, not that door C had a sheep behind it). ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2009-06-23 08:26:17</wp:post_date>
		<wp:post_date_gmt>2009-06-23 06:26:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monty-hall-and-bayesian-probability-theory</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="model-view-controller"><![CDATA[model view controller]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1543</wp:comment_id>
			<wp:comment_author><![CDATA[Longchamp]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.gesweb.net/Site/ebaylc.asp</wp:comment_author_url>
			<wp:comment_author_IP>1.181.179.98</wp:comment_author_IP>
			<wp:comment_date>2013-04-09 21:08:32</wp:comment_date>
			<wp:comment_date_gmt>2013-04-09 19:08:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Longchamp...</strong>

The Longchamp taschen specifications of Longchamp taschen theselarge bean bag chairs include that its cover can be changed whenever you want to get rid of Longchamp taschen the old cover and give your Barbie bean bag chair a Longchamp taschen fresh loo...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1637</wp:comment_id>
			<wp:comment_author><![CDATA[maillot psg pas cher]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.3xin0.com/maillotpsg.html</wp:comment_author_url>
			<wp:comment_author_IP>116.21.64.97</wp:comment_author_IP>
			<wp:comment_date>2013-07-16 10:34:47</wp:comment_date>
			<wp:comment_date_gmt>2013-07-16 08:34:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>maillot psg pas cher...</strong>

Jayce Bartok is an actor/producer/writer/director who operates Vinyl Foote Productions from Brooklyn with his spouse Tiffany....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>JAOO 2009 discount (for Clojure users ;-)</title>
		<link>http://blog.higher-order.net/2009/07/13/jaoo-discount/</link>
		<pubDate>Mon, 13 Jul 2009 05:25:56 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=331</guid>
		<description></description>
		<content:encoded><![CDATA[I suggested to the JAOO program committee that the <a href="http://trifork-affiliate-program.com/scripts/click.php?a_aid=dcug&amp;a_bid=7441e314&amp;desturl=http%3A%2F%2Fjaoo.dk%2Faarhus-2009%2F">JAOO Aarhus 2009 conference<img style="border:0" src="http://trifork-affiliate-program.com/scripts/imp.php?a_aid=dcug&amp;a_bid=7441e314" alt="" width="1" height="1" /></a> should have a concurrency track. Their reply was "that's a good idea - you are hosting it!" - this is how Trifork works ;-)

The good thing is that the track host gets to pick (or at least propose) speakers for the track (the bad thing is that it entails some work!). Given my recent interest in Clojure and since he is such a great speaker, I immediately suggested we invite Rich Hickey. I'll write a bit more on the program in an upcoming post, but right now I just want to mention that via the Danish Clojure Users' Group I am now a JAOO affiliate, and anyone signing up via dcug gets a 15% discount on JAOO tickets.

To sign up, follow this procedure:
<ol>
	<li>To join dcug, simply register as a dcug user at </a><a href="http://www.clojure.dk">http://www.clojure.dk.</a></li>
	<li>Read about the discount here: <a href="http://clojure.higher-order.net/?p=32">http://clojure.higher-order.net/?p=32</a></li>
</ol>
As an appetizer, check out <a href="http://clojure.higher-order.net/?p=28">this post</a> at dcug. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date>2009-07-13 07:25:56</wp:post_date>
		<wp:post_date_gmt>2009-07-13 05:25:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jaoo-discount</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clojure talks in Copenhagen and Aarhus - now with Azul Systems Clojure demo</title>
		<link>http://blog.higher-order.net/2009/08/17/clojure-talks-in-copenhagen-and-aarhus-now-with-azul-systems-clojure-demo/</link>
		<pubDate>Mon, 17 Aug 2009 10:45:30 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=343</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Upcoming events</strong>: I am giving a talk on Clojure in Copenhagen and Aarhus - this is the first chance for a <a href="http://www.clojure.dk">dcug</a> meetup (though also non-dcug members are invited). The events are after work and free - there will even be free sandwiches, compliments of Trifork :-)

<ul>
	<li>Monday, Sept. 7th in Aarhus, location: Trifork. Registration: <a href="https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2129">https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2129</a></li>
	<li>Wednesday, Sept. 9th in Copenhagen, location: Trifork Cph. Registration: <a href="https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2130">https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2130</a>.</li>
	<li>Free Clojure workshop at JAOO - featuring Rich Hickey. October 6, 2009, 17.30 - 19.30. Registration: <a href="https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2093">https://secure.trifork.com/aarhus-2009/freeevent/register.m?eventOID=2093</a></li>
</ul>

<strong>Abstract for Aarhus/Cph talks.</strong>
Clojure is..

... a new functional, dynamic programming language for Java Virtual Machines. The primary novelty of Clojure is its strong focus on and support for in-process concurrency: a unique concurrency model, combining a notion of persistent (i.e., immutable, fast) data structures, with a lock-free concurrency model. This simplifies concurrent programming greatly and has good scalability properties. 
Influenced by LISP and Haskell, Clojure supports pure, lazy functional programming and has a powerful macro system which makes extending the language to support DSLs easy and powerful.

This talk..

... is split in three parts. In the first part, Clojure is introduced for those who don't know the language. There is so much to cover that this will be a fast tour with pointers to more information, but we will emphasize the unique aspects of the language.

In the second part we go into more depth regarding the implementation of persistent (and transient data structures) - "the secret sauce of Clojure" ;-)

In the third part we get to see Clojure in action running on some very cool technology - a unique opportunity! Azul Systems (www.azulsystems.com) has promised to make available one of their large Vega 3 compute appliances (864 core, 368 GB memory, let's go concurrent). We will explore how the Clojure concurrency model fares in practice, scaling a demo of a parallel Traveling Sales Problem algorithm. We will also push the implementation to its limits in a high-contention demo. Great fun!

<hr />
Remember: Active until August 31st:
DCUG members can now get a 15% discount on JAOO tickets.
Simply click the banner below, choose "register here" and use the promotion code: dcug

<a href="http://trifork-affiliate-program.com/scripts/click.php?a_aid=dcug&amp;a_bid=93ef8336&amp;desturl=https%3A%2F%2Fsecure.trifork.com%2Faarhus-2009%2Fregistration%2F"><img title="JAOO Aarhus 2009 - The Conference for the 360 Degree software developer" src="http://trifork-affiliate-program.com/accounts/default1/banners/Jaoo_webbanner234X60_49okt.jpg" alt="JAOO Aarhus 2009 - The Conference for the 360 Degree software developer" width="234" height="60" /></a><img style="border:0" src="http://trifork-affiliate-program.com/scripts/imp.php?a_aid=dcug&amp;a_bid=93ef8336" alt="" width="1" height="1" /></ul> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date>2009-08-17 12:45:30</wp:post_date>
		<wp:post_date_gmt>2009-08-17 10:45:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clojure-talks-in-copenhagen-and-aarhus-now-with-azul-systems-clojure-demo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="free-events"><![CDATA[free events]]></category>
		<category domain="post_tag" nicename="jaoo"><![CDATA[JAOO]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Understanding Clojure&#039;s PersistentHashMap (deftwice...)</title>
		<link>http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/</link>
		<pubDate>Tue, 08 Sep 2009 15:29:55 +0000</pubDate>
		<dc:creator>krukow</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=386</guid>
		<description></description>
		<content:encoded><![CDATA[[sept. 8th, 21:22: fixed a +/- 1 error]

In a previous post, I gave a high-level description of <a href="http://blog.higher-order.net/?p=233">how Clojure's PersistentVector is implemented.</a> While the code has changed, the description was high-level enough that the explanations still hold (although some code snipplets don't correspond to what's in <a href="http://github.com/richhickey/clojure/tree/master">Git master</a>.) 

In this post, I'll try to explain (also at a high level) how <code>clojure.lang.PersistentHashMap</code> works internally. Reading the mentioned post on PersistentVector is helpful as some of the concepts are the same (e.g., bit-partitioning). 

<strong>Persistent</strong>
PersistentHashMap is a persistent version of the classical hash table data structure. Persistent means that the data structure is immutable, yet has efficient non-destructive operations that correspond to the operations on the classical hash table. E.g., put(K,V) in hash table corresponds to a side-effect free function assoc(P, K, V) which computes from P a new PersistentHashMap P' which is like P except that it maps key K to value V. The word "efficient" means "on par" with their mutating counterparts. For Clojure data structures, Rich tries to make them within 1-4 of the Java data structure operations; and read-only operations can even be faster than Java's. Later I will cover 'transients' which are a new optimization that make "batch" operations faster.

<strong>Array-mapped hash trie</strong>
In his paper <a href="http://lampwww.epfl.ch/papers/idealhashtrees.pdf">Ideal Hash Tries</a> Phil Bagwell describes a data structure "Hash Array Mapped Trie" which is an efficient implementation of a Hash Tree, based on a combination of hashing and the <a href="http://en.wikipedia.org/wiki/Trie">trie data structure.</a> Hash Array Mapped Tries, are not persistent or immutable. What Rich did was create a persistent version of Bagwell's data structure; <tt>clojure.lang.PersistentHashMap</tt>.

<strong>PersistentHashMap basic idea</strong>
PersistentHashMap (PHM) maintains a very-wide tree, each node having up to 32 children. Each node is a concrete implementation of a static inner interface, <tt>INode</tt>, and there are five implementations of this interface: EmptyNode, LeafNode, FullNode, HashCollisionNode, BitmapIndexedNode. I'll only cover EmptyNode, LeafNode and BitmapIndexedNode; the latter being where most of the interesting stuff happens. 

The <tt>INode</tt> interface look like this:
<pre><tt><span class="keyword">static</span><span class="normal"> </span><span class="keyword">interface</span><span class="normal"> </span><span class="classname">INode</span><span class="cbracket">{</span>
<span class="normal">    INode </span><span class="function">assoc</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> shift</span><span class="symbol">,</span><span class="normal"> </span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> Object key</span><span class="symbol">,</span><span class="normal"> Object val</span><span class="symbol">,</span><span class="normal"> Box addedLeaf</span><span class="symbol">);</span>
<span class="normal">    LeafNode </span><span class="function">find</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> Object key</span><span class="symbol">);</span>
<span class="normal">    </span><span class="comment">//I've left out a few methods</span>
<span class="cbracket">}</span>
</tt></pre>

The <tt>assoc</tt> method "adds" a new key-value pair to the map. The <tt>find</tt> method searches for the Leaf-node holding a key.

An EmptyNode simply represents the empty hash map. LeafNodes are also pretty simple; they hold the actual entries stored in map. 

The root node of the tree is initially an EmptyNode. When assoc is called on EmptyNode, it returns a new LeafNode, which the key-value pair. So EmptyNode "becomes" a LeafNode with assoc. In turn, a LeafNode typically "becomes" a BitmapIndexedNode with assoc.  We will go into details with BitmapIndexedNode, but first we need to understand...

<strong>Bit-partitioning of hash-codes</strong>
When PHM assocs a key object K with value object V, it first computes the hashCode of K, just as a hash-table would. The hash code of K yields an int, which has a 32-bit representation in Java (as I explained in <a href="http://blog.higher-order.net/?p=233">the post on PersistentVector</a>). Here are some example bit representations of numbers:

<img src="http://blog.higher-order.net/files/clj/bitpartitioning1.png" alt="PersistentHashMap ilustration 1" />

The trick that PHM uses is to partition this bit representation in to blocks of 5-bits, represented with colors in the above example. Each block corresponds to a "level" in the tree structure; for example, the right-most green block corresponds to root-level, and the orange block corresponds to the children of the root. Exactly what "corresponds" means is described below.  Levels are multiples of 5. I.e., the root level is level 0, the children of the root are level 5, the grand-children of the root are level 10, etc. Note that a block of five bits corresponds to a number in the range 0-31.  

The reason that levels are multiples of five is the following: You have a bit-representation of a hash-code and you are interested in a particular block corresponding to a level <tt>n</tt>. You obtain this number in two steps: first move the block of bits to the right, until it is the right-most block. Then null-out all other bits except this right-most block. The is done with two bit-operations: you simply right-shift the bits with the level <tt>n</tt> and then do a bit-wise 'and' (<tt>&amp;</tt>) with the pattern <tt>00..11111</tt>. For example, suppose you want the block corresponding to level 5 (the orange block) of the number 1258 (binary: <tt>[00001][00111][01010]</tt>). You right shift with the level, 5, which is <tt>[00000][00001][00111]</tt>; then do the null'ing, yielding <tt>[00111]</tt>, which was exactly the orange block of 1258.

The following function does this.
<pre><tt><span class="keyword">static</span><span class="normal"> </span><span class="type">int</span><span class="normal"> </span><span class="function">mask</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> </span><span class="type">int</span><span class="normal"> shift</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">	</span><span class="keyword">return</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">hash </span><span class="symbol">&gt;&gt;&gt;</span><span class="normal"> shift</span><span class="symbol">)</span><span class="normal"> </span><span class="symbol">&amp;</span><span class="normal"> </span><span class="number">0x01f</span><span class="symbol">;</span>
<span class="cbracket">}</span></tt></pre>


<strong>Illustrating the tree structure</strong>
I'll use the following picture (adapted from one of Rich's slides). 
<center>
<img src="http://blog.higher-order.net/files/clj/persistenthashmap1.png" alt="PersistentHashMap ilustration 1" />
</center>

The colored nodes are <tt>BitmapIndexedNode</tt>s and have between 2 and 31 children (should they get a 32nd child, they become <tt>FullNode</tt>s). A naive implementation of <tt>BitmapIndexedNode</tt> might be the following: use an int variable, <tt>level</tt>, to denote the level that this node lives in, and allocate a full 32 element array of INode references for the children. To add a new child: lookup the index via the bit-block corresponding to the level, i.e. given a hashCode <tt>hash</tt> for the child, and given the level, call <tt>mask(hash, level)</tt> to get the index in range [0, 31]. But this strategy wastes a lot of memory: each node has a full 32 element array where most entries are simply <tt>null</tt>, i.e., if there are 4 children there are 28 null references which are just wasting space.

The hard part is to only use as much space as is needed for each <tt>BitmapIndexedNode</tt>, i.e., if a <tt>BitmapIndexedNode</tt> has <tt>N</tt> children it maintains an array of size <tt>N</tt>. But then we can't use <tt>mask(hash,shift)</tt> as the index into the array since it returns a number in the range [0,31] and we need a number only in range [0, <tt>N</tt>). 

<strong>bitpos</strong>
So we need a function to map numbers in range [0, 31] to indexes in range [0, <tt>N</tt>). The function has to be fast constant time, since we are using it to find the child of a node from a hash code, which we will do at each level in the tree. The function is a composition of two functions: <tt>bitpos</tt> and <tt>index</tt>. Function <tt>bitpos</tt> maps numbers [0, 31] to powers of two, i.e., numbers that have a binary representation of the form:
<center><tt>{10<sup>n</sup> | n &gt;= 0}</tt>.</center> 
For example, <tt>bitpos(7)</tt> in binary is 10000000. We always look at <tt>bitpos(x)</tt> in binary form. Function <tt>index</tt> we return to shortly.

<pre><tt><span class="keyword">static</span><span class="normal"> </span><span class="type">int</span><span class="normal"> </span><span class="function">bitpos</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> </span><span class="type">int</span><span class="normal"> shift</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">    </span><span class="keyword">return</span><span class="normal"> </span><span class="number">1</span><span class="normal"> </span><span class="symbol">&lt;&lt;</span><span class="normal"> </span><span class="function">mask</span><span class="symbol">(</span><span class="normal">hash</span><span class="symbol">,</span><span class="normal"> shift</span><span class="symbol">);</span>
<span class="cbracket">}</span></tt></pre>

<strong>bitmap</strong>
Each <tt>BitmapIndexedNode</tt> also maintains an int variable <tt>bitmap</tt> which we also look at in binary form. The <tt>bitmap</tt> tells us how many children this node has, and also what their indexes are in the child array. All this is encoded into one <tt>int</tt> variable! How? The bit-map has a binary representation, e.g.,
<center><tt>00000000000000010000000010000101</tt></center>
The number of children is the number of <tt>1</tt>'s in the binary representation. If the <tt>n</tt>th bit in <tt>bitmap</tt> is <tt>1</tt> (counting right-to-left, starting with position 0) then there is a child with index <tt>n</tt>. So to check if a child exists for a certain hash-code: first compute <tt>mask(hash,shift)</tt> to get the bit-block and number in range [0, 31]. Then compute <tt>bitpos</tt> of this. You then have a number of form <tt>10<sup>n</sup></tt>. Now match that with the <tt>bitmap</tt> to check if there is a <tt>1</tt> in the <tt>n</tt>'th position; this match is simply a bit-wise and, '&amp;', with <tt>bitpos</tt>. We'd better take an example.  

Suppose we are at level 5, and looking up an element with hash-code 1258. Suppose also the bitmap-indexed node has four children, with <tt>bitmap</tt>
<tt>bitmap =<sub>binary rep</sub> 00000000000000010000000010000101</tt>

Now check if there is a child for hashCode 1258 at this level:

<tt>mask(1258,5) = 7</tt> (i.e., binary <tt>00111</tt> as we saw before).

<tt>bitpos(7) =<sub>binary rep</sub> 10000000</tt>

<tt>00000000000000010000000010000101 &amp;</tt>
<tt>00000000000000000000000010000000 = 1</tt>

Which means that the child exists. Now what is its index? This is  where the <tt>index</tt> function comes into play...

<strong>index</strong>
This is the final piece of bit-trickery, I promise ;-) The index of a child is the number of <tt>1</tt>'s to the right of the child's <tt>bitpos</tt> in the bit map. In our example above, the index corresponding to hash code 1258 would be 2, since there are two <tt>1</tt>'s to the right of <tt>10000000</tt> in the <tt>bitmap</tt>.  Now the trick is that on many processors there is an efficient instruction called CTPOP which counts the number of ones in the bit representation of an integer (CTPOP is "count (bit) population"). Note that if we subtract 1 from the bitpos, <tt>10<sup>n</sup></tt>, we get <tt>01<sup>n</sup></tt>, then binary 'and' with the bit map gives us the same bit map, but where only the <tt>1</tt>'s to the right of <tt>bitpos</tt> are present. If we do a CTPOP on this, we get the index. Hence, 

<pre><tt><span class="keyword">final</span><span class="normal"> </span><span class="type">int</span><span class="normal"> </span><span class="function">index</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> bit</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">    </span><span class="keyword">return</span><span class="normal"> Integer</span><span class="symbol">.</span><span class="function">bitCount</span><span class="symbol">(</span><span class="normal">bitmap </span><span class="symbol">&amp;</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">bit </span><span class="symbol">-</span><span class="normal"> </span><span class="number">1</span><span class="symbol">));</span>
<span class="cbracket">}</span></tt></pre>
 

<strong>To be continued...</strong>
From this you should be able to understand how find works. In combines all this:

<pre><tt><span class="keyword">final</span><span class="normal"> </span><span class="keyword">static</span><span class="normal"> </span><span class="keyword">class</span><span class="normal"> </span><span class="classname">BitmapIndexedNode</span><span class="normal"> </span><span class="keyword">implements</span><span class="normal"> INode</span><span class="cbracket">{</span>
<span class="normal">    </span><span class="keyword">final</span><span class="normal"> </span><span class="type">int</span><span class="normal"> bitmap</span><span class="symbol">;</span>
<span class="normal">    </span><span class="keyword">final</span><span class="normal"> INode</span><span class="symbol">[]</span><span class="normal"> nodes</span><span class="symbol">;</span>
<span class="normal">    </span><span class="keyword">final</span><span class="normal"> </span><span class="type">int</span><span class="normal"> shift</span><span class="symbol">;</span>
<span class="normal">    </span><span class="comment">//some stuff left out</span>
<span class="normal">    </span><span class="keyword">static</span><span class="normal"> </span><span class="type">int</span><span class="normal"> </span><span class="function">bitpos</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> </span><span class="type">int</span><span class="normal"> shift</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">	</span><span class="keyword">return</span><span class="normal"> </span><span class="number">1</span><span class="normal"> </span><span class="symbol">&lt;&lt;</span><span class="normal"> </span><span class="function">mask</span><span class="symbol">(</span><span class="normal">hash</span><span class="symbol">,</span><span class="normal"> shift</span><span class="symbol">);</span>
<span class="normal">    </span><span class="cbracket">}</span>
<span class="normal">    </span>
<span class="normal">    </span><span class="keyword">final</span><span class="normal"> </span><span class="type">int</span><span class="normal"> </span><span class="function">index</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> bit</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">	</span><span class="keyword">return</span><span class="normal"> Integer</span><span class="symbol">.</span><span class="function">bitCount</span><span class="symbol">(</span><span class="normal">bitmap </span><span class="symbol">&amp;</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">bit </span><span class="symbol">-</span><span class="normal"> </span><span class="number">1</span><span class="symbol">));</span>
<span class="normal">    </span><span class="cbracket">}</span>
<span class="normal">    </span><span class="comment">//...some methods left out</span>
<span class="normal">    </span>
<span class="normal">   </span><span class="keyword">public</span><span class="normal"> LeafNode </span><span class="function">find</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> Object key</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">       </span><span class="type">int</span><span class="normal"> bit </span><span class="symbol">=</span><span class="normal"> </span><span class="function">bitpos</span><span class="symbol">(</span><span class="normal">hash</span><span class="symbol">,</span><span class="normal"> shift</span><span class="symbol">);</span>
<span class="normal">       </span><span class="keyword">if</span><span class="symbol">((</span><span class="normal">bitmap </span><span class="symbol">&amp;</span><span class="normal"> bit</span><span class="symbol">)</span><span class="normal"> </span><span class="symbol">!=</span><span class="normal"> </span><span class="number">0</span><span class="symbol">)</span>
<span class="normal">	   </span><span class="cbracket">{</span>
<span class="normal">	       </span><span class="keyword">return</span><span class="normal"> nodes</span><span class="symbol">[</span><span class="function">index</span><span class="symbol">(</span><span class="normal">bit</span><span class="symbol">)].</span><span class="function">find</span><span class="symbol">(</span><span class="normal">hash</span><span class="symbol">,</span><span class="normal"> key</span><span class="symbol">);</span>
<span class="normal">	   </span><span class="cbracket">}</span>
<span class="normal">       </span><span class="keyword">else</span>
<span class="normal">	   </span><span class="keyword">return</span><span class="normal"> </span><span class="keyword">null</span><span class="symbol">;</span>
<span class="normal">   </span><span class="cbracket">}</span>
<span class="cbracket">}</span>
</tt></pre>

In part 2 we look at how assoc works...
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>386</wp:post_id>
		<wp:post_date>2009-09-08 17:29:55</wp:post_date>
		<wp:post_date_gmt>2009-09-08 15:29:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>understanding-clojures-persistenthashmap-deftwice</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="persistent-data-structures"><![CDATA[persistent data structures]]></category>
		<category domain="post_tag" nicename="persistenthashmap"><![CDATA[PersistentHashMap]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1419</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; clj-ds: Clojure&#8217;s persistent data structures for Java]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2010/06/11/clj-ds-clojures-persistent-data-structures-for-java/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2010-06-11 15:45:53</wp:comment_date>
			<wp:comment_date_gmt>2010-06-11 13:45:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] of (efficient!) persistent data structures. (In previous posts I&#8217;ve shed some light on how PersistentHashMap and PersistentVector are implemented, although some of that information is slightly dated [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1401</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Understanding Clojure&#8217;s PersistentVector implementation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2010-05-07 06:47:40</wp:comment_date>
			<wp:comment_date_gmt>2010-05-07 04:47:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Update: See also the description of PersistentHashMap. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1366</wp:comment_id>
			<wp:comment_author><![CDATA[dcug &#8211; Danish Clojure Users Group &raquo; Blog Archive &raquo; A blog post on PersistentHashMap]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://clojure.higher-order.net/?p=43</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2009-09-08 17:32:19</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 15:32:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] The link is: http://blog.higher-order.net/?p=386 [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1383</wp:comment_id>
			<wp:comment_author><![CDATA[uberVU - social comments]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ubervu.com/conversations/blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/</wp:comment_author_url>
			<wp:comment_author_IP>174.129.29.13</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 00:20:27</wp:comment_date>
			<wp:comment_date_gmt>2010-02-07 22:20:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Social comments and analytics for this post...</strong>

This post was mentioned on Twitter by dima767: Understanding Clojure's 'PersistentHashMap': http://is.gd/34FJO #clojure...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1443</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Assoc and Clojure&#8217;s PersistentHashMap: part ii]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2010-08-16 10:15:50</wp:comment_date>
			<wp:comment_date_gmt>2010-08-16 08:15:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] high-level overviews of how Clojure&#8217;s PersistentVector and PersistentHashMap work. In the PersistentHashMap post I promised that &#8220;In part 2 we look at how assoc works…&#8221; &#8211; it seems I never got [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1464</wp:comment_id>
			<wp:comment_author><![CDATA[thekua.com@work &raquo; Three Days of Clojure Joy]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.thekua.com/atwork/2011/06/three-days-of-clojure-joy/</wp:comment_author_url>
			<wp:comment_author_IP>203.32.61.203</wp:comment_author_IP>
			<wp:comment_date>2011-06-30 23:05:29</wp:comment_date>
			<wp:comment_date_gmt>2011-06-30 21:05:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] also learned about a new datastructure &#8211; Bit Partitioned Hash Trees (more here and here that I need to do some more reading [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1465</wp:comment_id>
			<wp:comment_author><![CDATA[Patrick Kua : Three Days of Clojure Joy | Software Secret Weapons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.softwaresecretweapons.com/blog/1265/patrick-kua-three-days-of-clojure-joy</wp:comment_author_url>
			<wp:comment_author_IP>74.220.219.119</wp:comment_author_IP>
			<wp:comment_date>2011-07-01 12:12:13</wp:comment_date>
			<wp:comment_date_gmt>2011-07-01 10:12:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] also learned about a new datastructure â Bit Partitioned Hash Trees (more here and here that I need to do some more reading [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1498</wp:comment_id>
			<wp:comment_author><![CDATA[mujeres article]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://latestbookmarks.com/Science/mujeres-and-women-single-dating-online/</wp:comment_author_url>
			<wp:comment_author_IP>99.146.16.254</wp:comment_author_IP>
			<wp:comment_date>2012-05-15 10:45:23</wp:comment_date>
			<wp:comment_date_gmt>2012-05-15 08:45:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Linking Website...</strong>

[...]Every once in a while we choose weblogs we read. Listed[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1513</wp:comment_id>
			<wp:comment_author><![CDATA[Donovan Mckasson]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://acres.tamu.edu/node/600</wp:comment_author_url>
			<wp:comment_author_IP>69.46.79.244</wp:comment_author_IP>
			<wp:comment_date>2012-11-16 09:04:17</wp:comment_date>
			<wp:comment_date_gmt>2012-11-16 07:04:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>{Global|International|Worldwide|World-wide|World wide|Intercontinental|World} {Traffic|Visitors|Site visitors|Targeted traffic|Website traffic|Targeted visitors|Potential customers|Site traffic|Customers|Page views|Website visitors} {Machine|Device} ...</strong>

be sure to head over to the net pages we comply with, similar to this a single distinct, since it signifies our picks from the online...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1515</wp:comment_id>
			<wp:comment_author><![CDATA[Jamaal Arenburg]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.brooklinema.gov/cap/index.php?title=User:PareteGray14</wp:comment_author_url>
			<wp:comment_author_IP>50.117.71.125</wp:comment_author_IP>
			<wp:comment_date>2012-11-28 08:49:31</wp:comment_date>
			<wp:comment_date_gmt>2012-11-28 06:49:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>{Blogs|Weblogs} ou {should|ought to|must|really should|need to|should really|will need to|should certainly|have to|may want to|should preferably} be {reading|studying|reading through|looking at|examining|looking through|browsing}...</strong>

Right here is known as a remarkable Web site You might Come across valuable that we Motivate You to find out...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1519</wp:comment_id>
			<wp:comment_author><![CDATA[Anisha Nissen]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://toothwear.asu.edu/?q=node/998</wp:comment_author_url>
			<wp:comment_author_IP>50.117.46.147</wp:comment_author_IP>
			<wp:comment_date>2012-11-29 01:07:11</wp:comment_date>
			<wp:comment_date_gmt>2012-11-28 23:07:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>{Superb|Excellent|Exceptional|Fantastic|Outstanding|Wonderful|Great|Amazing|Terrific|Very good} {website|web site|site|internet site|web page|webpage|web-site|online site|blog|websites|web pages}...</strong>

constantly a big supporter of linking to bloggers that I like but really don't obtain a lots of hyperlink cherish from...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1525</wp:comment_id>
			<wp:comment_author><![CDATA[dfrove List]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://reerproveclub.com</wp:comment_author_url>
			<wp:comment_author_IP>94.19.191.183</wp:comment_author_IP>
			<wp:comment_date>2013-01-07 15:43:12</wp:comment_date>
			<wp:comment_date_gmt>2013-01-07 13:43:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>porno deti video skachat...</strong>

[...]thank you for all your efforts that you have put in this. Very interesting info. "There is still no cure for the common birthday." by John Glenn.[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1541</wp:comment_id>
			<wp:comment_author><![CDATA[tesc 789]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tes456.org</wp:comment_author_url>
			<wp:comment_author_IP>184.22.35.7</wp:comment_author_IP>
			<wp:comment_date>2013-04-09 01:50:54</wp:comment_date>
			<wp:comment_date_gmt>2013-04-08 23:50:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Great information...</strong>

This can be first-class. American watch doing this amount when we are staggered. We are most certainly attracted to this kind of things. Issue appreciate human suggestions, and benefits doing inside this. Please keep modifying. They're surprisingly fa...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1542</wp:comment_id>
			<wp:comment_author><![CDATA[metal casket]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.casketdirect.ca/casketsmetal.php?typeId=02__</wp:comment_author_url>
			<wp:comment_author_IP>60.22.16.35</wp:comment_author_IP>
			<wp:comment_date>2013-04-09 14:37:34</wp:comment_date>
			<wp:comment_date_gmt>2013-04-09 12:37:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>metal casket...</strong>

Jamendo. com is a great choice if you would like no cost new music beneath CLOSED CIRCUIT permit. but these are generally good way too Perhaps due to the fact Spotify will not basically suggest anyone something. Even though system is a great choice if ...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1554</wp:comment_id>
			<wp:comment_author><![CDATA[A Non-Blocking ConcurrentHash(Map|Trie) | LMAX]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.lmax.com/lmax-blog/2011/12/non-blocking-concurrenthashmaptrie/</wp:comment_author_url>
			<wp:comment_author_IP>5.79.1.230</wp:comment_author_IP>
			<wp:comment_date>2013-05-01 17:35:45</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 15:35:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] some time looking at Clojure&#8217;s concurrency model, I did a little bit of research into their persistent collection implementation&nbsp;that uses Bagwell&#8217;s Hash Array Mapped Tries. &nbsp;After a little bit of thought it [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1557</wp:comment_id>
			<wp:comment_author><![CDATA[Cash Advance Online King]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://cashadvanceonlineking.com/online-loans-advice/</wp:comment_author_url>
			<wp:comment_author_IP>91.99.61.42</wp:comment_author_IP>
			<wp:comment_date>2013-05-01 22:09:49</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 20:09:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Cash Advance Online King...</strong>

Unto the lord, saying, what shall i do unto this people?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1578</wp:comment_id>
			<wp:comment_author><![CDATA[bad credit loans]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://badcreditloanpal.com/</wp:comment_author_url>
			<wp:comment_author_IP>197.220.193.49</wp:comment_author_IP>
			<wp:comment_date>2013-05-08 23:05:20</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 21:05:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>bad credit loans...</strong>

bad credit loans loansforbadcreditpal.com...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1585</wp:comment_id>
			<wp:comment_author><![CDATA[Kredit fuer Selbststaendige]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://stephangrafie.de</wp:comment_author_url>
			<wp:comment_author_IP>119.30.125.101</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 11:16:43</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 09:16:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredit fuer Selbststaendige...</strong>

An diesem Nachmittag wunderten sich allerlei Leute in WaldrAmtsstelle Ein paar Frauen sagten zueinander: Warum die Kinder heute nur nicht in die Schule gehen?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1608</wp:comment_id>
			<wp:comment_author><![CDATA[Replica Oakley Sunglasses]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.replica-okglasses.net/</wp:comment_author_url>
			<wp:comment_author_IP>192.151.145.29</wp:comment_author_IP>
			<wp:comment_date>2013-05-21 10:17:27</wp:comment_date>
			<wp:comment_date_gmt>2013-05-21 08:17:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Replica Oakley Sunglasses...</strong>

One more thing that I want to share here is that, doesn't matter what you are using free blogging service except if you don抰 update your weblog on daily basis then it no more attraction....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1610</wp:comment_id>
			<wp:comment_author><![CDATA[Payday Loans UK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://pay-day-loans-uk-1.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>91.236.75.28</wp:comment_author_IP>
			<wp:comment_date>2013-05-21 12:39:22</wp:comment_date>
			<wp:comment_date_gmt>2013-05-21 10:39:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Payday Loans UK...</strong>

amazing pay day loans...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1618</wp:comment_id>
			<wp:comment_author><![CDATA[visual basic programming codes]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://yah-underworld.com</wp:comment_author_url>
			<wp:comment_author_IP>79.70.73.132</wp:comment_author_IP>
			<wp:comment_date>2013-06-16 06:23:09</wp:comment_date>
			<wp:comment_date_gmt>2013-06-16 04:23:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>programming in objective-c 2.0...</strong>

[...] What web host are you using? Can I get affiliate hyperlink in your host? I want site loaded up as quickly as yours lol[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1629</wp:comment_id>
			<wp:comment_author><![CDATA[puma スニーカー]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.kutuyasu1.com</wp:comment_author_url>
			<wp:comment_author_IP>120.43.5.19</wp:comment_author_IP>
			<wp:comment_date>2013-06-25 00:35:28</wp:comment_date>
			<wp:comment_date_gmt>2013-06-24 22:35:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>puma スニーカー...</strong>

magnificent points altogether, you simply gained a brand new reader. What would you suggest about your post that you made a few days ago? Any positive?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1633</wp:comment_id>
			<wp:comment_author><![CDATA[cheap mobile phone sale]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.iphone5ssale.org/</wp:comment_author_url>
			<wp:comment_author_IP>61.150.43.124</wp:comment_author_IP>
			<wp:comment_date>2013-06-27 10:01:39</wp:comment_date>
			<wp:comment_date_gmt>2013-06-27 08:01:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cheap mobile phone sale...</strong>

How to care for glasses, eyeglass frames to wear when elastic discomfort, or loose screws, should be timely adjustment, the resin lens of Oakley sunglasses to avoid the high temperature environment, wipe the lens when not to use something other than pr...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1634</wp:comment_id>
			<wp:comment_author><![CDATA[web hosting company in india]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spear-host.com/shared.html</wp:comment_author_url>
			<wp:comment_author_IP>79.70.65.67</wp:comment_author_IP>
			<wp:comment_date>2013-07-10 00:08:38</wp:comment_date>
			<wp:comment_date_gmt>2013-07-09 22:08:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>online marketing jobs...</strong>

[...]Great weblog right here! Additionally your website rather a lot up very fast![...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1635</wp:comment_id>
			<wp:comment_author><![CDATA[Holly Glover]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spear-host.com/</wp:comment_author_url>
			<wp:comment_author_IP>79.70.65.67</wp:comment_author_IP>
			<wp:comment_date>2013-07-10 00:13:24</wp:comment_date>
			<wp:comment_date_gmt>2013-07-09 22:13:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Holly Glover [...]you make blogging glance[...]...</strong>

[...]you make blogging glance[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Identity, State and Values</title>
		<link>http://blog.higher-order.net/2009/10/26/identity-state-and-values/</link>
		<pubDate>Mon, 26 Oct 2009 11:50:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=391</guid>
		<description></description>
		<content:encoded><![CDATA[Please watch this video carefully at least once:

<a href="http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey">http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey</a>

It is pretty hard not to agree, isn't it...  <a href="http://clojure.org">Give in</a> now. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date>2009-10-26 13:50:01</wp:post_date>
		<wp:post_date_gmt>2009-10-26 11:50:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>identity-state-and-values</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clojure circuit breaker</title>
		<link>http://blog.higher-order.net/2009/11/23/clojure-circuit-breaker/</link>
		<pubDate>Mon, 23 Nov 2009 06:22:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=398</guid>
		<description></description>
		<content:encoded><![CDATA[[Update Jan 1., 2010: A couple of people have been linking and twitting this, so I've made the blog entry match the current Clojure version at github. Code works in the 'new' branch of Clojure: tested with commit 3ae9e8874d43f9fd37e59bb7ea8cce0f85bac101.

There is support for creating several circuit breakers wrapping given functions].

As an exercise in Clojure, I've implemented a mostly functional version of Michael Nygaard's stability pattern "Circuit breaker" (<a title="http://www.pragprog.com/titles/mnee/release-it" href="http://www.pragprog.com/titles/mnee/release-it">http://www.pragprog.com/titles/mnee/release-it</a>).

The implementation uses the new constructs <a href="http://www.assembla.com/wiki/show/clojure/Datatypes">deftype</a> and <a href="http://www.assembla.com/wiki/show/clojure/Protocols">defprotocol</a> (which are looking really interesting to me!). The implementation maintains a single identity named "state" which is an atom holding the current state (open, closed, initial-half-open or pending-half-open).

More on deftype and defprotocol can be found <a href="http://groups.google.com/group/clojure/tree/browse_frm/thread/a59165f208f594cb/cf144fd0ab4de13f?hl=en&rnum=21&_done=%2Fgroup%2Fclojure%2Fbrowse_frm%2Fthread%2Fa59165f208f594cb%2F8e60316b5894f36b%3Fhl%3Den%26#doc_330c230e8dc857a9">here</a>.

Here is the code that defines the states and the state transitions (requires JavaScript; otherwise use <a href="http://gist.github.com/267168">this link</a>). Notice how the events 'on-before-call', 'on-success' and 'on-error' are implemented as a protocol defining state-transition functions. I really like the features Rich is adding to Clojure - to me it makes modeling so much more natural (with an OO-background), while retaining the benefits of functional programming.

<script src="http://gist.github.com/267168.js?file=circuit+breaker+states.clj"></script>

Notice how this snipplet defines the transition functions, the four states as well as an "abstract" implementation of the state transitions. The abs-transitions can be used as default implementations when extending the protocol to the state-types. In Java, this would correspond to an interface (CircuitBreakerTransitions), an abstract super-class implementing the interface, and four immutable classes (the states). However, Clojures deftype and defprotocol does not create a type-hierarchy, and is much more dynamic (you can always define how a given type extends to a protocol - it is not fixed at type definition time). Here is how I extended my types to the protocol: 

<script src="http://gist.github.com/267169.js?file=extending.clj"></script>
(<a href="http://gist.github.com/267169">http://gist.github.com/267169</a>)

This defines a completely functional transition-system between the four states. I think this reads really well, for example consider the on-error event in the closed state: this checks to see if the states fail-count is equal to the threshold defined in the policy, if so it transitions to the open state, recording the current time <tt>(OpenState p (System/currentTimeMillis))</tt> (preserving the policy); otherwise it transitions to a closed state with a higher fail-count. 

The actual circuit breaker uses these transition functions:

<script src="http://gist.github.com/267172.js?file=logic.clj"></script>
(<a href="http://gist.github.com/267172">http://gist.github.com/267172</a>)

The state of a circuit breaker is an atom (the only mutable construct in this example). The function wrap takes a function f and returns a "wrapped" version of f, which implements the circuit breaker functionality around f. 

Notice how dead-simple this is to test:

<script src="http://gist.github.com/267173.js?file=test+logic.clj"></script>
(<a href="http://gist.github.com/267173">http://gist.github.com/267173</a>)

Full Source:
<a href="http://github.com/krukow/clojure-circuit-breaker">http://github.com/krukow/clojure-circuit-breaker</a>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2009-11-23 08:22:57</wp:post_date>
		<wp:post_date_gmt>2009-11-23 06:22:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clojure-circuit-breaker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1376</wp:comment_id>
			<wp:comment_author><![CDATA[Destillat 31-12-2009 | duetsch.info - Open Source, Wet-, Web-, Software]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.duetsch.info/destillat-31-12-2009.html</wp:comment_author_url>
			<wp:comment_author_IP>80.83.114.35</wp:comment_author_IP>
			<wp:comment_date>2009-12-31 11:34:24</wp:comment_date>
			<wp:comment_date_gmt>2009-12-31 09:34:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Clojure circuit breaker [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1375</wp:comment_id>
			<wp:comment_author><![CDATA[uberVU - social comments]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ubervu.com/conversations/blog.higher-order.net/2009/11/23/clojure-circuit-breaker/</wp:comment_author_url>
			<wp:comment_author_IP>174.129.78.58</wp:comment_author_IP>
			<wp:comment_date>2009-12-30 13:08:23</wp:comment_date>
			<wp:comment_date_gmt>2009-12-30 11:08:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Social comments and analytics for this post...</strong>

This post was mentioned on Twitter by dima767: 'Clojure circuit breaker': http://blog.higher-order.net/2009/11/23/clojure-circuit-breaker/ #clojure...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1371</wp:comment_id>
			<wp:comment_author><![CDATA[disclojure: all things clojure &raquo; Today in the Intertweets (Nov 23rd Ed)]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://disclojure.org/2009/11/23/today-in-the-intertweets-nov-23rd-ed/</wp:comment_author_url>
			<wp:comment_author_IP>74.208.16.3</wp:comment_author_IP>
			<wp:comment_date>2009-11-24 09:27:42</wp:comment_date>
			<wp:comment_date_gmt>2009-11-24 07:27:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] circuit breaker in Clojure (here, via @Raymondz5ly) &#8212; Using deftype and defprotocol! A circuit breaker is a mechanism designed [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1535</wp:comment_id>
			<wp:comment_author><![CDATA[HD Gallery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>115.221.209.127</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 05:33:40</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 03:33:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>HD Gallery...</strong>

Hp employees vent about their bad bosses!...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1565</wp:comment_id>
			<wp:comment_author><![CDATA[Sofortkredit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sofortkreditbuddy.de</wp:comment_author_url>
			<wp:comment_author_IP>1.85.233.114</wp:comment_author_IP>
			<wp:comment_date>2013-05-04 06:32:58</wp:comment_date>
			<wp:comment_date_gmt>2013-05-04 04:32:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Sofortkredit...</strong>

Da war Kasperle wieder zufrieden....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1577</wp:comment_id>
			<wp:comment_author><![CDATA[guenstige kredite]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://winterjackendamen.eu</wp:comment_author_url>
			<wp:comment_author_IP>178.206.79.87</wp:comment_author_IP>
			<wp:comment_date>2013-05-08 22:21:41</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 20:21:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>guenstige kredite...</strong>

Was ists eigentlich, was will sie denn?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1600</wp:comment_id>
			<wp:comment_author><![CDATA[payday loan]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://paydayloanscanadaeh.ca/</wp:comment_author_url>
			<wp:comment_author_IP>91.236.75.28</wp:comment_author_IP>
			<wp:comment_date>2013-05-11 22:57:09</wp:comment_date>
			<wp:comment_date_gmt>2013-05-11 20:57:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>payday loan...</strong>

glorious lender...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Review: Ext JS 3.0 Cookbook</title>
		<link>http://blog.higher-order.net/2009/12/09/review-ext-js-3-0-cookbook/</link>
		<pubDate>Wed, 09 Dec 2009 15:14:37 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=411</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Intro and motivation</strong>. While my recent blogging activity and interests have been (and are) about Clojure, I am still very much interested in, and actively programming, JavaScript. That is why I immediately accepted when Amit Sharma from Packt Publishing asked me to review the new book Ext JS 3.0 cookbook by Jorge Ramon (<a href="#disclaimer">find links below <sup>1</sup></a>).

Historically, I have been known for advocating the Ext JS framework for RIA development in controlled environments since it is very general and customizable, and because it lifts the abstraction level much higher than when developing at the DOM level with many other frameworks. Let me emphasize: You <em>do</em> need to understand the DOM, event models, and browsers, but that you don't have to think at this low level constantly when developing (this discussion is the topic for another blog post, based on discussions we had at Trifork).

One of the problems with Ext JS is that is has perhaps the steepest of learning curves among JavaScript frameworks, and while the API documentation is good, it doesn't tell you much about the programming model and idioms, or how structure and modularize the combining of components and containers into applications. Fortunately, the Ext JS developers have provide a large number of examples of how to use the various Ext JS functions. Unfortunately the examples are code only: they don't come with explanations of why things are coded as they are. So it is your job as a developer to extract this information from the source code, and decide which bits you can and can't use in your production code. Depending on you ability and willingness to read the examples and the Ext JS source code itself, you may find this more or less viable learning route.

To me it is obvious that there is need for one or more Ext JS books. In fact, I am contemplating considering starting-to-think-about writing something myself ... ;-)

<strong>Review</strong>. I won't cover the structure of the book other than to say it is organized as a number of recipes, each showing how to build a mini ExtJS-based GUI for a certain use-case. Other reviewers have already <a href="#other_reviews">covered recipe structure in detail</a>. Instead, I will take a step back and give you my opinion about what you'll get and what you won't get with this book, i.e., it's all about expectations.

(Anyway, the best way to get a feel of the form and flow of the book is to read a sample chapter. I found the following online; there are many more topics in the book, but the form is the same:

<a href="http://www.packtpub.com/files/8709-ext-js-cookbook-sample-chapter-3-load-validate-and-submit-forms.pdf">http://www.packtpub.com/files/8709-ext-js-cookbook-sample-chapter-3-load-validate-and-submit-forms.pdf</a>)


Ext JS 3.0 markets itself as: "Quick answers to common problems. 109 great recipes for building impressive rich internet applications using the Ext JS JavaScript library." As other reviewers have mentioned, the book successfully does  what it sets out to do: It gives you concrete detailed solutions to a number of problems selected by the author; no less, but also no more. There is code that comes with the book, to you don't have to type in the examples from the book. The book is very code-heavy: as you can see from the sample chapter, a 60-80% to 40-20% code-to-text ratio. 


<b>Aspects I liked</b>. 
The book is focused: apart from the preface which is good, there isn't a long ramble introduction wasting my time. It is into the meat already from Chapter 1, page 1. Good.

It is fairly complete in that parts of ExtJS that cover making UIs, here I wasn't missing anything in particular. 

It does what it sets out to do, and it is well organized, well written and consistent. 

There are fairly concise sections "There's more..." and "How it works..." which discuss aspects of the code just described. 

The "How to do it..." sections are is step-by-step, <em>and</em> explaining what each step does.

<b>Aspects I didn't like so much</b>.
It is not the kind of book I, personally, was looking for: I don't want a <em>recipe</em> book, since such a book would often be too focused on too great detail, too much boiler-plate code, and things I could have figured out myself. I would prefer a book that was would focus on concepts, real-world problems, density and concision of code examples, common errors, how to organize and structure large applications, development techniques and best practices (the latter it does to some extent). 

<b>Conclusion</b>. As mentioned I think this book delivers what it promises.  I am happy to have a copy lying around. I think I will use it, and I do think it is valuable as a guide to the extensive Ext JS example code. 

If you are a complete beginner or quite advanced user, I do not think this book is of that much value to you. If you are at an intermediate level, having played around with Ext JS and JavaScript, but not built anything too serious, I recommend it.  

If you are looking for a more conceptual book, obviously this book is not for you. If you a looking for a concrete step-by-step, "hands-on" book, this book is for you.

If you would like something to complement the Ext JS Sample code, this book is for you. If you can understand and generalize the Ext JS sample code, this book is not for you.

Hope that helps :-)

<a name="disclaimer"><sup>1</sup><b>Disclaimer</b></a>:  I agree with Giles Bowkett that many times blogs aren't the best source of truthful, objective information (aka "<a href="http://gilesbowkett.blogspot.com/2009/12/blogs-are-godless-communist-bullshit.html">Godless Communist Bullshit</a>"). It is your job as a responsible thinking reader to consider if there are hidden agendas and economical interests that might cause the publisher to not present the truth, the whole truth and nothing but the truth. The people at Packt Publishing are smart, they understand this. They've found a bunch of bloggers and asked them to do reviews (see below).

I want to make it completely visible that I am participating in Packt Publishing's affiliate program that gives me a payment, not for the review, but for each purchase originating from this site. 

My manifesto here is:  while there is value in money, I value integrity more. I have striven to give as fair and objective a review as I possibly can (I hope you can see that; if not, let me know).

<strong>This is the <a href="http://www.packtpub.com/ext-js-3-0-cookbook/mid/011209p0gzfz?utm_source=blog.higher-order.net&utm_medium=affiliate&utm_content=blog&utm_campaign=mdb_001692">Ext JS 3.0 cookbook</a> link to use if you want to support me</strong>. 

<a href="http://www.packtpub.com/ext-js-3-0-cookbook/mid/011209p0gzfz?utm_source=blog.higher-order.net&utm_medium=affiliate&utm_content=blog&utm_campaign=mdb_001692">http://www.packtpub.com/ext-js-3-0-cookbook/mid/011209p0gzfz?utm_source=blog.higher-order.net&utm_medium=affiliate&utm_content=blog&utm_campaign=mdb_001692
</a>

<strong>Otherwise use this link</strong>.

<a href="http://www.packtpub.com/ext-js-3-0-cookbook">http://www.packtpub.com/ext-js-3-0-cookbook</a>

<a name="other_reviews"><b>Other reviews.</b></a>

Josh Holmes. I agree with everything Josh is saying, and I don't want to repeat it here.
<a href="http://www.joshholmes.com/blog/2009/11/19/ReviewOfExtJS30Cookbook.aspx">http://www.joshholmes.com/blog/2009/11/19/ReviewOfExtJS30Cookbook.aspx</a>

Arthur Kay. I agree with most of what Arthur says. I don't agree with everything Arthur is saying: I don't think there is much to learn for experienced ExtJS developers.

<a href="http://blog.akawebdesign.com/index.php/2009/11/20/book-review-extjs-3-0-cookbook">http://blog.akawebdesign.com/index.php/2009/11/20/book-review-extjs-3-0-cookbook</a>

ExtJS Forum response: It is obviously very positive since it is posted to Ext JS enthusiasts.

<a href="http://www.extjs.com/forum/showthread.php?t=79850">http://www.extjs.com/forum/showthread.php?t=79850</a>

 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>411</wp:post_id>
		<wp:post_date>2009-12-09 17:14:37</wp:post_date>
		<wp:post_date_gmt>2009-12-09 15:14:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>review-ext-js-3-0-cookbook</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1520</wp:comment_id>
			<wp:comment_author><![CDATA[URL]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.n7aGB3.net</wp:comment_author_url>
			<wp:comment_author_IP>5.135.27.98</wp:comment_author_IP>
			<wp:comment_date>2012-12-01 04:37:58</wp:comment_date>
			<wp:comment_date_gmt>2012-12-01 02:37:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>... [Trackback]...</strong>

[...] Read More: blog.higher-order.net/2009/12/09/review-ext-js-3-0-cookbook/ [...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1616</wp:comment_id>
			<wp:comment_author><![CDATA[jeremy scott shoes]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.adidasjeremyscott-xr.info/</wp:comment_author_url>
			<wp:comment_author_IP>61.247.183.26</wp:comment_author_IP>
			<wp:comment_date>2013-05-30 17:54:41</wp:comment_date>
			<wp:comment_date_gmt>2013-05-30 15:54:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>jeremy scott shoes...</strong>

quality. These cheap and quality nike air max Concords are my favorite in life. You also give me good service, thank you. When I saw the nike air max Concords here, I know they are good and can be the best choice. My friend told me to buy nike air max ...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1624</wp:comment_id>
			<wp:comment_author><![CDATA[adidas soccer cleats]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.wjgnet.com/usa/nikesoccershoes.html</wp:comment_author_url>
			<wp:comment_author_IP>117.26.201.64</wp:comment_author_IP>
			<wp:comment_date>2013-06-20 00:35:04</wp:comment_date>
			<wp:comment_date_gmt>2013-06-19 22:35:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>adidas soccer cleats...</strong>

The nike soccer shoes Concords are best here as I have bought many. They are comfortable and of best quality....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1636</wp:comment_id>
			<wp:comment_author><![CDATA[cheap louis vuitton bags]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://performancebegin.com/louis-vuitton-bags.html</wp:comment_author_url>
			<wp:comment_author_IP>123.139.18.129</wp:comment_author_IP>
			<wp:comment_date>2013-07-11 03:10:38</wp:comment_date>
			<wp:comment_date_gmt>2013-07-11 01:10:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cheap louis vuitton bags...</strong>

http://www.fmscu.org/louis-vuitton-outlet-store.html louis vuitton outlet store...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Please help funding Clojure</title>
		<link>http://blog.higher-order.net/2009/12/15/please-help-funding-clojure/</link>
		<pubDate>Tue, 15 Dec 2009 05:32:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=439</guid>
		<description></description>
		<content:encoded><![CDATA[Rich Hickey, creator of Clojure:

<blockquote>As should be obvious, Clojure is a labor of love on my part. Started as a self-funded sabbatical project, Clojure has come to occupy me far more than full-time. However, Clojure does not have institutional or
corporate sponsorship, and was not, and is not, the by-product of
another profitable endeavor. I have borne the costs of developing
Clojure myself, but 2009 is the last year I, or my family, can bear
that. </blockquote>

I would be such a shame if development were to slow down or stop completely because of such a small amount of money... So, please donate to the project. 

See details,

<a href="http://groups.google.com/group/clojure/t/cc77df25e98ce46b">http://groups.google.com/group/clojure/t/cc77df25e98ce46b</a>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>439</wp:post_id>
		<wp:post_date>2009-12-15 07:32:38</wp:post_date>
		<wp:post_date_gmt>2009-12-15 05:32:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>please-help-funding-clojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1372</wp:comment_id>
			<wp:comment_author><![CDATA[Twitted by psvensson]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://realurl.org/twitted.php?id=6688395911</wp:comment_author_url>
			<wp:comment_author_IP>94.23.51.159</wp:comment_author_IP>
			<wp:comment_date>2009-12-15 08:22:57</wp:comment_date>
			<wp:comment_date_gmt>2009-12-15 06:22:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was Twitted by psvensson [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The Joy of Clojure</title>
		<link>http://blog.higher-order.net/2010/01/14/the-joy-of-clojure/</link>
		<pubDate>Thu, 14 Jan 2010 10:54:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=444</guid>
		<description></description>
		<content:encoded><![CDATA[In case you haven't noticed there is a very interesting Clojure book coming out, titled "<a href="http://www.manning.com/fogus/">The Joy of Clojure</a>,"  written by two very interesting authors that anyone hanging out in the Clojure community should know: <a href="http://twitter.com/chrishouser">Chris Houser</a> and <a href="http://twitter.com/fogus">Michael Fogus</a>. 

As an appetizer, the first chapter is available for free:

<a href="http://www.manning.com/fogus/Fogus_MEAP_Ch1.pdf">Clojure—A Lisp for the Java Virtual Machine</a>

I've read the first chapter and the book looks very promising! To quote the last paragraph of chapter one:

<blockquote>We've talked a little about how this book will go beyond what Clojure is to why it's designed the way it is and how that design can be exploited through idioms that will help you think in Clojure. So lets stop talking about what this book will do and get on with the doing.
Fasten your seat belts.</blockquote>

I've fastened my seat belt and ordered my copy :-)
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date>2010-01-14 12:54:08</wp:post_date>
		<wp:post_date_gmt>2010-01-14 10:54:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-joy-of-clojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1378</wp:comment_id>
			<wp:comment_author><![CDATA[dcug &#8211; Danish Clojure Users Group &raquo; Blog Archive &raquo; The Joy of Clojure]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://clojure.higher-order.net/2010/01/the-joy-of-clojure/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2010-01-14 12:56:51</wp:comment_date>
			<wp:comment_date_gmt>2010-01-14 10:56:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] See: http://blog.higher-order.net/2010/01/14/the-joy-of-clojure/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1379</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Higher-Order » Blog Archive » The Joy of Clojure -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/tb/j.mp/5rrY06</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-01-15 02:18:30</wp:comment_date>
			<wp:comment_date_gmt>2010-01-15 00:18:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by ajlopez, psvensson, Alvaro Videla, Rick Moynihan, publicfarley and others. publicfarley said: Sweet! Free first chapter from upcoming book &quot;The Joy of Clojure&quot; http://j.mp/5rrY06 /via @psvensson [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1380</wp:comment_id>
			<wp:comment_author><![CDATA[uberVU - social comments]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ubervu.com/conversations/blog.higher-order.net/2010/01/14/the-joy-of-clojure/</wp:comment_author_url>
			<wp:comment_author_IP>174.129.29.13</wp:comment_author_IP>
			<wp:comment_date>2010-01-17 08:52:19</wp:comment_date>
			<wp:comment_date_gmt>2010-01-17 06:52:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Social comments and analytics for this post...</strong>

This post was mentioned on Twitter by psvensson: Free first chapter from upcoming book "The Joy of Clojur"e: http://blog.higher-order.net/2010/01/14/the-joy-of-clojure/...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1509</wp:comment_id>
			<wp:comment_author><![CDATA[How to Enlarge Penis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.net-penis-enlargement.com/</wp:comment_author_url>
			<wp:comment_author_IP>173.213.76.116</wp:comment_author_IP>
			<wp:comment_date>2012-09-20 01:02:17</wp:comment_date>
			<wp:comment_date_gmt>2012-09-19 23:02:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Check this site...</strong>

The details talked about within the write-up are some of the top accessible...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1531</wp:comment_id>
			<wp:comment_author><![CDATA[Porn]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>91.243.168.2</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 02:07:50</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 00:07:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Porn...</strong>

However, always compare the costs associated to market to get the best loan package for your condition....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1548</wp:comment_id>
			<wp:comment_author><![CDATA[hermes outlet belt]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://hermes-outletstore.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>222.172.241.211</wp:comment_author_IP>
			<wp:comment_date>2013-04-24 04:17:17</wp:comment_date>
			<wp:comment_date_gmt>2013-04-24 02:17:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>hermes outlet belt...</strong>

Product Dimensions: 13.8 x 8.8 x 19 inches 6.4 pounds leather Unique shape PDA/cell phone pocket Zip pocket Open pocket Canvas (polyamide) croc-printed leather...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1552</wp:comment_id>
			<wp:comment_author><![CDATA[cashadvanceonlineking]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://cashadvanceonlineking.com/online-loans-advice/</wp:comment_author_url>
			<wp:comment_author_IP>183.93.18.107</wp:comment_author_IP>
			<wp:comment_date>2013-05-01 11:30:25</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 09:30:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cashadvanceonlineking...</strong>

With so many online loan providers on the internet, obviously, the greatest challenge is to find a reliable and legitimate lender....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1587</wp:comment_id>
			<wp:comment_author><![CDATA[Sofortkredit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sofortkreditfun1.info</wp:comment_author_url>
			<wp:comment_author_IP>113.206.253.14</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 12:36:19</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 10:36:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Sofortkredit...</strong>

In einer Nacht versetzt ihn der Traum nach Trilport und laesst ihn wieder in den Strassen der Stadt spielen....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1597</wp:comment_id>
			<wp:comment_author><![CDATA[Kredite ohne Schufa]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kreditexpresso2.info</wp:comment_author_url>
			<wp:comment_author_IP>39.186.123.255</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 18:59:30</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 16:59:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredite ohne Schufa...</strong>

Da sah er ploetzlich neben sich eine lange Stange stehen, und ein ganz unnuetzer Gedanke kam dem Kasperle....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1609</wp:comment_id>
			<wp:comment_author><![CDATA[Payday Loans]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.stophumantraffic.org/</wp:comment_author_url>
			<wp:comment_author_IP>91.236.75.28</wp:comment_author_IP>
			<wp:comment_date>2013-05-21 11:36:09</wp:comment_date>
			<wp:comment_date_gmt>2013-05-21 09:36:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Payday Loans...</strong>

satisfactory pay day loans...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1617</wp:comment_id>
			<wp:comment_author><![CDATA[turbo c programs example]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://yah-underworld.com</wp:comment_author_url>
			<wp:comment_author_IP>79.70.69.100</wp:comment_author_IP>
			<wp:comment_date>2013-06-14 15:31:25</wp:comment_date>
			<wp:comment_date_gmt>2013-06-14 13:31:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>online c programming...</strong>

[...]you made running a blog glance[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1638</wp:comment_id>
			<wp:comment_author><![CDATA[maillot de foot pas cher]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://maillotdefootpascher.a.nf/</wp:comment_author_url>
			<wp:comment_author_IP>202.105.62.207</wp:comment_author_IP>
			<wp:comment_date>2013-07-16 20:46:07</wp:comment_date>
			<wp:comment_date_gmt>2013-07-16 18:46:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>maillot de foot pas cher...</strong>

Scenario a couple of things i was seeking for. I did not anticipate that we'd acquire so a lot absent from reading through by means of your own write up! You've just got your returning consumer...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>VersionManager</title>
		<link>http://blog.higher-order.net/2010/01/22/version-manager/</link>
		<pubDate>Fri, 22 Jan 2010 15:10:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=450</guid>
		<description></description>
		<content:encoded><![CDATA[[update: First, my apologies to jdalton, my post was not meant to derail Fusebox, merely to show a different approach to similar problems. ]

I read a <a href="http://ajaxian.com/archives/de-fusing-javascript-natives-with-the-fusebox">post on Ajaxian</a> about <a href="http://github.com/jdalton/fusebox">Fusebox</a>, a JavaScript library which is described as:

<blockquote>[...] The problem is that frameworks / libraries / third-party scripts may overwrite native methods or each other's custom methods resulting in unpredictable outcomes. Fusebox, a limited version of the sandboxing component found in FuseJS, avoids these issues by creating sandboxed natives which can be extended without affecting the document natives.</blockquote>

I think Fusebox is a good project. The code in this blog post shows a different approach which in some situations may be more useful and in others, it may not.

With Fusebox script developers avoid polluting the globals by writing their scripts using FuseBox and its wrappers. E.g, you write code with a "Fusebox prefix" like this:
<code><pre>
  var fb = Fusebox();
  fb.Array.prototype.hai = function() {
    return fb.String("Oh hai, we have " + this.length + " items.");
  };
  fb.Array(1,2,3).hai(); // "Oh hai, we have 3 items."
  typeof window.Array.prototype.hai; // undefined

// like the native Array constructor the sandboxed constructor will return [ , , ]
  var a = fb.Array(3);
  // equiv to square-bracket notation [3]
  var b = fb.Array.create(3);
  // converting a native array to a sandboxed array
  var c = fb.Array.fromArray([1, 2, 3]);
</pre></code>

That immediately reminded be of some work I've have been doing with colleague Jimmy Junker at Trifork (<tt>jju at trifork com</tt>) motivated by the following problem:

<blockquote> In portal environments where multiple portlets want to use different JavaScript libraries or different versions of the same JavaScript libraries, you are very likely to run in to problems since almost all libraries (except later YUI versions) are designed to live in the global namespace.</blockquote>

After a brainstorming session we developed a simple <em>prototype</em> (no pun intended), uninspiringly named "VersionManager", with which we succeeded in loading two different versions of the PrototypeJS library. With VersionManager you can write code like this:
<code><pre>
with (VersionManager.version("1.6.1")) {
//"1.6.1" refers to prototype which must have been loaded
  console.log("abcdaba".gsub("a","42"));// console.logs '42bcd42b42'
  console.log(typeof Object.extend);// console.logs 'function'
  $A([1,2,3])._each(function(x){
    console.log(x);
  });// console.logs '1','2','3'
}
VersionManager.clear();//otherwise previous version is lingering...
try {
  console.log(typeof "".gsub);
//console.logs 'function' <= this is generic delegating proxy function
  console.log("abcdaba".gsub("a","42"));//throws error
} catch (e) {
  console.log(e);
  //TypeError: "attempt call to delegate with no version defined (see documentation)" 
}
console.log(typeof Object.extend);// console.logs 'undefined'
console.log(typeof $A);// console.logs 'undefined'
</pre></code>

So version manager lets you load several libraries on the page, and sandboxes changes made to globals. By telling VersionManager which version you want to use for a particular block you code, you can use each of those libraries, <em>even if they define the same global variables or properties on the prototypes of objects,</em> e.g., <tt>Array.prototype</tt>. 

 VersionManager also creates sandboxes, but as opposed to Fusebox, what is sandboxed is "changes made to" the built-ins, and global variables defined. Also, the goal is not to avoid extending the prototypes, but almost the opposite: to allow several scripts/libraries that would otherwise conflict to live in the same page without seeing each other, even if they define the same global names or want to extend built-in prototypes in different ways.

With VersionManager you simply write regular user code, but wrap it in a with statement. This means that existing code can easily be rewritten.

The loaded "sandboxed" libraries must adhere to a few syntactic and semantic constraints. 
For an example, see a sandboxed version of prototypejs here

<a href="http://github.com/krukow/versionmanager/blob/master/test/assets/prototype.js">Transformed prototypejs</a>

The transformation applied to prototypejs is very simple and can be done automatically (i.e., it is easy to write a program that performs this script-transformation for you). It is a bit technical, but it results in is adding a declaration with-statement "header" at the beginning and a "footer" and the end. In fact, we are writing a program that transforms any JavaScript program/library into an equivalent one that adheres to these constraints. 

An alpha version is on github. It is a proof-of-concept that shows that the fundamental approach seems to work. 

jdalton pointed out a couple of things :
<ul>
	<li>You may run into problems with minifiers given that your code is wrapped in 'with'. However, you can minify the code first, and then wrap it.</li>
	<li>It doesn't track changes to event or elements.</li>

</ul>

So far, we've tested it only in latest Firefox and Safari, but I see no reason why it couldn't work in other recent browsers.  We have sucessfully loaded prototypejs in a sandbox, and managed to run all prototypejs unit tests successfully inside the sandbox.

Github project: <a href="http://github.com/krukow/versionmanager">http://github.com/krukow/versionmanager</a>

/Karl ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date>2010-01-22 17:10:59</wp:post_date>
		<wp:post_date_gmt>2010-01-22 15:10:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>version-manager</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="namespacing"><![CDATA[namespacing]]></category>
		<category domain="category" nicename="with"><![CDATA[with]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fuse-blows]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clojure: Rich Hickey and Stuart Halloway at JAOO</title>
		<link>http://blog.higher-order.net/2010/03/25/clojure-rich-hickey-and-stuart-halloway-at-jaoo/</link>
		<pubDate>Thu, 25 Mar 2010 18:44:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=468</guid>
		<description></description>
		<content:encoded><![CDATA[See <a href="http://clojure.higher-order.net/2010/03/rich-hickey-and-stuart-halloway-in-denmark/">Danish Clojure Users Group posting</a>.

 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>468</wp:post_id>
		<wp:post_date>2010-03-25 20:44:17</wp:post_date>
		<wp:post_date_gmt>2010-03-25 18:44:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clojure-rich-hickey-and-stuart-halloway-at-jaoo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Circuit Breaker: a small but real-life example of Clojure protocols and datatype</title>
		<link>http://blog.higher-order.net/2010/05/05/circuitbreaker-clojure-1-2/</link>
		<pubDate>Wed, 05 May 2010 08:59:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=470</guid>
		<description></description>
		<content:encoded><![CDATA[(Update July 2nd 2010: 
I've cleaned up the code and git repo.
Inlined the protocol function definitions in the state records for native-platform speed. 
The policy can now specify which exceptions should be considered errors: this is really useful in real life when you don't want to trip the circuit breaker say on security exceptions.
Now builds with lein 1.1.0.
...]$ lein jar
...
...]$ javac -cp lib/clojure-1.2.0-master-20100623.220259-87.jar:circuit-breaker.jar src/C.java 
...]$ java -cp lib/clojure-1.2.0-master-20100623.220259-87.jar:circuit-breaker.jar:src C
)


Michael Nygards <a href="http://www.pragprog.com/titles/mnee/release-it">stability pattern "Circuit Breaker" </a>is useful for failing fast when calling integration points that are unstable (which is every integration point I've ever dealt with!). This is done by detecting when integration points fail, and subsequently cutting off access for a time-period. Use the circuit breaker to

<blockquote>... preserve request handling threads in the calling system. Very often, when you make a call to an external integration point that's broken, it will tie up a thread in a blocking synchronous call for an indefinite period of time. [<a href="http://www.infoq.com/interviews/Building-Resilient-Systems-Michael-Nygard">Michael Nygard, QCon interview</a>]</blockquote>

I've written a <a href="http://github.com/krukow/clojure-circuit-breaker">fast, non-blocking functional implementation of the Circuit Breaker</a> in the 1.2 branch of Clojure which will be released <a href="http://groups.google.com/group/clojure/browse_thread/thread/bdf0e8500ec11aa">shortly</a>. It uses the new Clojure constructs <a href="http://www.clojure.org/protocols"><strong>protocols</strong></a> and <a href="http://clojure.org/datatypes"><strong>datatypes</strong></a> for modeling states, for interop and to obtain platform-speed polymorphic calls. 

The implementation exposes a simple Java interface which makes it usable from Java, Scala, JRuby et al. 

<strong>Why?</strong>
<blockquote>Design Patterns are a disease, and Clojure is the cure. :-) (the smiley is mine!) <br/>[<a href="http://www.nofluffjuststuff.com/blog/stuart_halloway/2009/10/the_case_for_clojure">http://www.nofluffjuststuff.com/blog/stuart_halloway/2009/10/the_case_for_clojure</a>]</blockquote> 

I believe this implementation has a couple of advantages compared to these <a href="http://www.jroller.com/kenwdelong/entry/circuit_breaker_in_java">Java</a> and <a href="http://github.com/FaKod/Circuit-Breaker-for-Scala">Scala</a> implementations that use the GoF "State Machine" pattern. 

First, I find the functional version simpler (see examples below). Second, this version guarantees that only a single call is made to the integration point when the circuit breaker decides to re-test if it is working again (the other versions seem to allow an unbounded number of calls if more threads concurrently try to access the integration point calling "invoke"). Finally, this version encapsulates the (immutable) state in a single Clojure atom (corresponding to a Java AtomicReference), whereas the GoF implementations use at least three atomics for various counters. Why does that matter? Well, it gives you the ability to obtain a consistent (immutable) snapshot of the state of circuit breaker at any given time which can be used to e.g. logging and analysis - this isn't possible when you have several atomics in play.

These benefits come naturally from following Clojure's programming model and concurrency constructs. Let me illustrate the Clojure features that I've found useful for this problem.

<strong>Protocols and records</strong>. 
I'm using pure polymorphic functions <tt>on-success</tt>, <tt>on-error</tt>, <tt>on-before-call</tt> as transition functions mapping a state to the next state for an event (successfull call, error call and before a call is initiated). A pure function <tt>proceed</tt> is a predicate on states that decide whether or not the state allows calls to go though to the integration point. 

Together these functions form <a href="http://clojure.org/protocols">a Clojure protocol</a> (which is similar to a Java interface, but has additional benefits).

<script src="http://gist.github.com/390485.js?file=states-part-1.clj"></script> (Show with JavaScript: for non-JS User agents, see <a href="http://gist.github.com/390485">http://gist.github.com/390485</a>)

Apart from the definition of the protocol, we define a default implementation of the protocol functions that our states can use. The default transition functions are simply the identity function and proceed defaults to false.

We now define datatypes corresponding to each type of state: closed (calls go through, count failures), open (calls fail-fast, stores a time-stamp when IP failed), initial-half-open (a single call goes through), pending-half-open (waiting for a probing call to return).  The datatypes are parameterized by a "transition policy" defining how many failures are "needed" to transition to the open state, and how long to wait in the open state.

<script src="http://gist.github.com/390492.js?file=states-datatypes.clj"></script>(For non-JS User agents, see <a href="http://gist.github.com/390492">http://gist.github.com/390492</a> )

This simply defines the states as datatypes. Note that we use <tt>defrecord</tt> not <tt>deftype</tt>. This makes our  datatypes work like persistent clojure maps which is extremely useful - for example our states can be destructured (see, e.g. <tt>defrecord</tt> at <a href="http://clojure.org/datatypes">http://clojure.org/datatypes</a>).

We can make our new types participate in our <tt>CircuitBreakerTransitions</tt> protocol

<script src="http://gist.github.com/390494.js?file=states-extend-closed.clj"></script> (<a href="http://gist.github.com/390494">http://gist.github.com/390494</a>)

A couple of notes: 

- We use <tt>merge</tt> to take the default implementations and "override" with the implementations given (this would correspond to an abstract super-class in Java but is more flexible).
- We use destructing in the function definitions for easy access to the "ClosedState" data, e.g., in the body of <tt>(fn [{f :fail-count p :policy, :as s}] ... </tt> the states fail-count is available as <tt>f</tt> and similarly for the policy. The <tt>:as s</tt> clause makes the state itself available as <tt>s</tt>.
- Finally, we can construct new instances of the states since they are simple dynamically compiled classes, e.g., <tt>(ClosedState. p 0)</tt> creates the initial state with a policy <tt>p</tt>.

<strong>Pure functions</strong>. A clear advantage of the functional approach is the ease of testing. Consider this simple test of some states and transition functions.

<script src="http://gist.github.com/390505.js?file=states-test.clj"></script> (<a href="http://gist.github.com/390505">http://gist.github.com/390505</a>)

This is the core of the circuit breaker itself:

<script src="http://gist.github.com/390529.js?file=circuit-breaker-wrap.clj"></script> (<a href="http://gist.github.com/390529">http://gist.github.com/390529</a>)

A circuit breaker is simply an atomic reference to a state. The function <tt>wrap-with</tt> takes a function, <tt>f</tt> to wrap - this represents a function that will call an integration point, and a circuit breaker, named <tt>state</tt>. It then returns a "wrapped" function which is guarded by the circuit breaker. It uses the "<tt>transition-by!</tt>" function which makes a state-transition from the current state. 

An example usage:

<script src="http://gist.github.com/390535.js?file=circuit-breaker-test.clj"></script> (<a href="http://gist.github.com/390535">http://gist.github.com/390535</a>)

Notice that the snapshot of the state is available simply with a <tt>deref</tt>, e.g., as <tt>@cb</tt>.

<h3>A Java-interface</h3>
To expose the functionality to Java I have used Clojures <tt>gen-class</tt> to create a class that exposes two methods given by this protocol which lets you wrap a function and look at the state:

<code><tt>
(defprotocol CircuitBreaker
  (#^clojure.lang.IFn wrap [this #^clojure.lang.IFn fn])
  (#^net.higher_order.integration.circuit_breaker.states.CircuitBreakerTransitions current-state [this]))
 </tt></code>

Then using <tt>gen-class</tt> I generate a class that implements the interface corresponding to that protocol. This gives the possibility of using the circuit breaker from Java:

<pre><tt><span class="preproc">import</span><span class="normal"> clojure</span><span class="symbol">.</span><span class="normal">lang</span><span class="symbol">.</span><span class="normal">IFn</span><span class="symbol">;</span>
<span class="preproc">import</span><span class="normal"> clojure</span><span class="symbol">.</span><span class="normal">lang</span><span class="symbol">.</span><span class="normal">RT</span><span class="symbol">;</span>
<span class="preproc">import</span><span class="normal"> net</span><span class="symbol">.</span><span class="normal">higher_order</span><span class="symbol">.</span><span class="normal">integration</span><span class="symbol">.</span><span class="normal">circuit_breaker</span><span class="symbol">.</span><span class="normal">AtomicCircuitBreaker</span><span class="symbol">;</span>
<span class="preproc">import</span><span class="normal"> net</span><span class="symbol">.</span><span class="normal">higher_order</span><span class="symbol">.</span><span class="normal">integration</span><span class="symbol">.</span><span class="normal">circuit_breaker</span><span class="symbol">.</span><span class="normal">CircuitBreaker</span><span class="symbol">;</span>

<span class="keyword">public</span><span class="normal"> </span><span class="keyword">class</span><span class="normal"> </span><span class="classname">C</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">	</span><span class="keyword">public</span><span class="normal"> </span><span class="keyword">static</span><span class="normal"> </span><span class="type">void</span><span class="normal"> </span><span class="function">main</span><span class="symbol">(</span><span class="normal">String</span><span class="symbol">[]</span><span class="normal"> args</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">		CircuitBreaker atomicCircuitBreaker </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">AtomicCircuitBreaker</span><span class="symbol">();</span>
<span class="normal">		IFn wrap </span><span class="symbol">=</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">IFn</span><span class="symbol">)</span><span class="normal"> atomicCircuitBreaker</span><span class="symbol">.</span><span class="function">wrap</span><span class="symbol">(</span><span class="keyword">new</span><span class="normal"> clojure</span><span class="symbol">.</span><span class="normal">lang</span><span class="symbol">.</span><span class="function">AFn</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="keyword">public</span><span class="normal"> Object </span><span class="function">invoke</span><span class="symbol">(</span><span class="normal">Object arg0</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">throws</span><span class="normal"> Exception </span><span class="cbracket">{</span>
<span class="normal">				</span><span class="keyword">if</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">arg0 </span><span class="symbol">==</span><span class="normal"> </span><span class="keyword">null</span><span class="symbol">)</span><span class="normal"> </span><span class="keyword">throw</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">IllegalArgumentException</span><span class="symbol">(</span><span class="string">"null arg"</span><span class="symbol">);</span>
<span class="normal">				System</span><span class="symbol">.</span><span class="normal">out</span><span class="symbol">.</span><span class="function">println</span><span class="symbol">(</span><span class="string">"Invoked with: "</span><span class="symbol">+</span><span class="normal">arg0</span><span class="symbol">);</span>
<span class="normal">				</span><span class="keyword">return</span><span class="normal"> arg0</span><span class="symbol">;</span>
<span class="normal">			</span><span class="cbracket">}</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">succeed</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">fail</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">fail</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">fail</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">fail</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">fail</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">fail</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">sleep</span><span class="symbol">(</span><span class="number">1000</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">status</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">fail</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">sleep</span><span class="symbol">(</span><span class="number">5000</span><span class="symbol">);</span>
<span class="normal">		</span><span class="function">succeed</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> wrap</span><span class="symbol">);</span>
<span class="normal">	</span><span class="cbracket">}</span>

<span class="normal">	</span>
<span class="normal">	</span><span class="keyword">private</span><span class="normal"> </span><span class="keyword">static</span><span class="normal"> </span><span class="type">void</span><span class="normal"> </span><span class="function">sleep</span><span class="symbol">(</span><span class="type">long</span><span class="normal"> howlong</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">		</span><span class="keyword">try</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			Thread</span><span class="symbol">.</span><span class="function">sleep</span><span class="symbol">(</span><span class="normal">howlong</span><span class="symbol">);</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">catch</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">InterruptedException e</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="comment">// TODO Auto-generated catch block</span>
<span class="normal">			e</span><span class="symbol">.</span><span class="function">printStackTrace</span><span class="symbol">();</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">	</span><span class="cbracket">}</span>

<span class="normal">	</span><span class="keyword">private</span><span class="normal"> </span><span class="keyword">static</span><span class="normal"> </span><span class="type">void</span><span class="normal"> </span><span class="function">succeed</span><span class="symbol">(</span><span class="normal">CircuitBreaker atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> IFn wrap</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">		</span><span class="keyword">try</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			System</span><span class="symbol">.</span><span class="normal">out</span><span class="symbol">.</span><span class="function">println</span><span class="symbol">(</span><span class="normal">wrap</span><span class="symbol">.</span><span class="function">invoke</span><span class="symbol">(</span><span class="string">"KARL"</span><span class="symbol">));</span>
<span class="normal">			System</span><span class="symbol">.</span><span class="normal">out</span><span class="symbol">.</span><span class="function">println</span><span class="symbol">(</span><span class="normal">wrap</span><span class="symbol">.</span><span class="function">invoke</span><span class="symbol">(</span><span class="number">42</span><span class="symbol">));</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">catch</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">Exception e</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			System</span><span class="symbol">.</span><span class="normal">out</span><span class="symbol">.</span><span class="function">println</span><span class="symbol">(</span><span class="normal">e</span><span class="symbol">.</span><span class="function">getMessage</span><span class="symbol">());</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">finally</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="function">status</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">);</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">	</span><span class="cbracket">}</span>


<span class="normal">	</span><span class="keyword">private</span><span class="normal"> </span><span class="keyword">static</span><span class="normal"> </span><span class="type">void</span><span class="normal"> </span><span class="function">status</span><span class="symbol">(</span><span class="normal">CircuitBreaker atomicCircuitBreaker</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">		System</span><span class="symbol">.</span><span class="normal">out</span><span class="symbol">.</span><span class="function">println</span><span class="symbol">(</span><span class="normal">RT</span><span class="symbol">.</span><span class="function">printString</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">.</span><span class="function">current_state</span><span class="symbol">()));</span>
<span class="normal">	</span><span class="cbracket">}</span>

<span class="normal">	</span><span class="keyword">private</span><span class="normal"> </span><span class="keyword">static</span><span class="normal"> </span><span class="type">void</span><span class="normal"> </span><span class="function">fail</span><span class="symbol">(</span><span class="normal">CircuitBreaker atomicCircuitBreaker</span><span class="symbol">,</span><span class="normal"> IFn wrap</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">		</span><span class="keyword">try</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			System</span><span class="symbol">.</span><span class="normal">out</span><span class="symbol">.</span><span class="function">println</span><span class="symbol">(</span><span class="normal">wrap</span><span class="symbol">.</span><span class="function">invoke</span><span class="symbol">(</span><span class="keyword">null</span><span class="symbol">));</span>
<span class="normal">			System</span><span class="symbol">.</span><span class="normal">out</span><span class="symbol">.</span><span class="function">println</span><span class="symbol">(</span><span class="normal">wrap</span><span class="symbol">.</span><span class="function">invoke</span><span class="symbol">(</span><span class="number">42</span><span class="symbol">));</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">catch</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">Exception e</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			System</span><span class="symbol">.</span><span class="normal">out</span><span class="symbol">.</span><span class="function">println</span><span class="symbol">(</span><span class="normal">e</span><span class="symbol">.</span><span class="function">getMessage</span><span class="symbol">());</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">finally</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="function">status</span><span class="symbol">(</span><span class="normal">atomicCircuitBreaker</span><span class="symbol">);</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">	</span><span class="cbracket">}</span>
<span class="cbracket">}</span>
</tt></pre>

This is getting long. I'll save the comparison for the next post :-)

Github: <a href="http://github.com/krukow/clojure-circuit-breaker">http://github.com/krukow/clojure-circuit-breaker</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>470</wp:post_id>
		<wp:post_date>2010-05-05 10:59:50</wp:post_date>
		<wp:post_date_gmt>2010-05-05 08:59:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>circuitbreaker-clojure-1-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="circuit-breaker"><![CDATA[circuit breaker]]></category>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="michael-nygard"><![CDATA[Michael Nygard]]></category>
		<category domain="post_tag" nicename="stability-pattern"><![CDATA[stability pattern]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1400</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Higher-Order » Blog Archive » Circuit Breaker: a small but real-life example of Clojure protocols and datatype -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/trackback?utm_source=pingback&amp;utm_campaign=L2&amp;url=http://blog.higher-order.net/2010/05/05/circuitbreaker-clojure-1-2/</wp:comment_author_url>
			<wp:comment_author_IP>74.112.128.63</wp:comment_author_IP>
			<wp:comment_date>2010-05-05 13:23:31</wp:comment_date>
			<wp:comment_date_gmt>2010-05-05 11:23:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Chas Emerick, Mariusz Nowostawski and Mariusz Nowostawski, hircus. hircus said: Circuit Breaker: a small but real-life example of #Clojure protocols and datatype http://bit.ly/8ZCCvB /cc @feedly [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1402</wp:comment_id>
			<wp:comment_author><![CDATA[Today in the Intertweets (May 5th Ed) | disclojure: all things clojure]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://disclojure.org/2010/05/05/today-in-the-intertweets-may-5th-ed/</wp:comment_author_url>
			<wp:comment_author_IP>74.208.16.3</wp:comment_author_IP>
			<wp:comment_date>2010-05-07 08:16:48</wp:comment_date>
			<wp:comment_date_gmt>2010-05-07 06:16:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Breaker: a small but real-life example of #Clojure protocols and datatype (here, via @hircus) &#8212; A circuit breaker is a system that is placed where a system integrates with a [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1427</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order &raquo; Blog Archive &raquo; Conj-labs Clojure lessons part i]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.higher-order.net/2010/07/04/conj-labs-clojure-lessons-part-i/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.233.7</wp:comment_author_IP>
			<wp:comment_date>2010-07-04 09:43:34</wp:comment_date>
			<wp:comment_date_gmt>2010-07-04 07:43:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] following is an (embarrassingly long) list of issues that my previous version of circuit breaker had. I think others can learn from my [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1462</wp:comment_id>
			<wp:comment_author><![CDATA[Kyle Nopeman]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/p1l1iq2131q2121zxc4</wp:comment_author_url>
			<wp:comment_author_IP>80.64.175.11</wp:comment_author_IP>
			<wp:comment_date>2011-05-14 11:53:58</wp:comment_date>
			<wp:comment_date_gmt>2011-05-14 09:53:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Рекомендую Вам зайти на сайт, на котором есть много информации по этому вопросу....</strong>

<a href="http://valiojob.ru/" rel="nofollow"> </a> (Update July 2nd 2010: I&#8217;ve cleaned up the code and git repo. Inlined the protocol function definitions in the state records for native-platform speed.....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1485</wp:comment_id>
			<wp:comment_author><![CDATA[True ordernet | Silviseuropean]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://silviseuropean.allergiesaid.com/2011/11/13/true-ordernet/</wp:comment_author_url>
			<wp:comment_author_IP>77.67.80.124</wp:comment_author_IP>
			<wp:comment_date>2011-11-13 05:53:08</wp:comment_date>
			<wp:comment_date_gmt>2011-11-13 03:53:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Circuit Breaker: a small but real-life example of Clojure protocols &#8230;May 5, 2010 &#8230; The policy can now specify which exceptions should be considered errors: this is really useful in real life when you don&#8217;t want to trip the circuit &#8230; [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1499</wp:comment_id>
			<wp:comment_author><![CDATA[URL]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.0EDcM0.net</wp:comment_author_url>
			<wp:comment_author_IP>134.255.240.9</wp:comment_author_IP>
			<wp:comment_date>2012-05-26 00:13:01</wp:comment_date>
			<wp:comment_date_gmt>2012-05-25 22:13:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>... [Trackback]...</strong>

[...] Read More: blog.higher-order.net/2010/05/05/circuitbreaker-clojure-1-2/ [...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1538</wp:comment_id>
			<wp:comment_author><![CDATA[HD Gallery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>14.222.177.101</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 09:11:47</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 07:11:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>HD Gallery...</strong>

Military loans are made available to provide financial assistance at affordable interest rates to those people who have served or are serving in the armed forces....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1561</wp:comment_id>
			<wp:comment_author><![CDATA[Online Loans]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://paydayloansonlinefriendz.com/</wp:comment_author_url>
			<wp:comment_author_IP>188.49.107.156</wp:comment_author_IP>
			<wp:comment_date>2013-05-02 13:42:14</wp:comment_date>
			<wp:comment_date_gmt>2013-05-02 11:42:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Online Loans...</strong>

This release of feelings may be enough to move you on in life and stop yourself from dwelling on past events so much....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1599</wp:comment_id>
			<wp:comment_author><![CDATA[loans for people with bad credit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://badcreditloanpal.com/</wp:comment_author_url>
			<wp:comment_author_IP>91.236.75.29</wp:comment_author_IP>
			<wp:comment_date>2013-05-10 04:29:39</wp:comment_date>
			<wp:comment_date_gmt>2013-05-10 02:29:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>loans for people with bad credit...</strong>

Naturally, there are several requirements that with, account late payment charges on your credit card....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1607</wp:comment_id>
			<wp:comment_author><![CDATA[air max femme]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nikeairmaxone.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>202.105.63.25</wp:comment_author_IP>
			<wp:comment_date>2013-05-15 22:39:53</wp:comment_date>
			<wp:comment_date_gmt>2013-05-15 20:39:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>air max femme...</strong>

air max femme retourVainqueur des législatives en 1994, Selon les premiers match bayern munich de lenquête, a le maillot de chelsea dimanche son père sur France Bleu Dr?me Ardèche, Fran?ois Hollande a réclamé des mesures alors quil visitait le Salon de...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1626</wp:comment_id>
			<wp:comment_author><![CDATA[Circuit Protocols | 7Wins.eu]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://7wins.eu/cbprod/detail_43380/circuit+protocols.html</wp:comment_author_url>
			<wp:comment_author_IP>77.176.52.144</wp:comment_author_IP>
			<wp:comment_date>2013-06-22 08:38:59</wp:comment_date>
			<wp:comment_date_gmt>2013-06-22 06:38:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Circuit Breaker: a small but real-life example of Clojure protocols and datatype | Higher-Order [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Stomple: JMS via WebSockets</title>
		<link>http://blog.higher-order.net/2010/05/09/stomple-jms-via-websockets/</link>
		<pubDate>Sun, 09 May 2010 20:22:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=507</guid>
		<description></description>
		<content:encoded><![CDATA[I've spent a couple of days working on <a href="http://github.com/krukow/stomple">Stomple</a> (pronounced "stumble"). Stomple aims to be an easy to use, full-featured and robust <a href="http://stomp.codehaus.org/Protocol">Stomp</a> client for JavaScript. 

You can watch a screencast of the transactional chat example.
<a href="http://screencast.com/t/NzdmMGJj">Screencast of transactional chat</a>.

<strong>What is Stomp?</strong> Stomp provides an interoperable wire format so that any of the available Stomp Clients can communicate with any Stomp Message Broker to provide easy and widespread messaging interop among languages, platforms and brokers. 

You can use any of the Stomp Clients to work with any JMS compliant message broker, for example <a href="http://www.jboss.org/hornetq">HornetQ</a>. There are <a href="http://stomp.codehaus.org/Clients">Stomp clients for many languages</a>, and Stomple adds JavaScript via WebSockets. This means that you can send and receive JMS messages directly in the browser (when it supports WebSockets). 

Stomple is inspired by <a href="http://www.jmesnil.net/stomp-websocket/doc/">Jeff Mesnil's cool stomp-websocket</a>, but I wanted more customization, feature-detection, a nicer API, and more robustness (e.g. timeouts) (and I wanted to write it myself :)). Just like Jeff's client, Stomple is not directly a Stomp client since it runs over WebSockets which requires a handshake between the browser's client and the server. This is supported by HornetQ and ActiveMQ (details in Jeff's docs:  <a href="http://www.jmesnil.net/stomp-websocket/doc/">http://www.jmesnil.net/stomp-websocket/doc/</a>).

<blockquote>This library is not a pure Stomp client. It is aimed to run on the Web Sockets protocol which is not TCP. Basically, the Web Sockets protocol requires a handshake  between the browser client and the server to ensure the browser's "same-origin" security model remains in effect.

This means that this library can not connect to regular Stomp brokers since they would not understand the handshake initiated by the Web Socket which is not part of the Stomp protocol and would likely reject the connection.</blockquote>

I'll post more documentation soon, but stomple should be quite simple to use.

<pre><tt>
if (Stomple) {//feature detection: is stomple available?
    Stomple.debug = true;//enable debug logging of messages
    var client = Stomple.create_client({
        url: "ws://localhost:61614/stomp", 
        destination: "jms.topic.chat",
        login: "guest",
        passcode: "guest"
    });
    client.subscribe({
        handler: function(f) {
            console.log('received frame');
            console.log(f);
            console.log("Message: "+f.body);
            console.log("'this' is bound to 'scope'");
            console.log("Session:"+this.session);
            client.send({
                success: function() {},//handle successful send
                failure: function() {},//handle failed send
                timeout: 5000//wait max 5 seconds before failing
            });
        },
        scope: client,
        success: function() {//did subscription succeed?
            console.log("sub ok..");
        },    
        failure: function() {//did subscription fail?
            console.log("sub fail");
        } 
    });
} </tt></pre>

Check it out on Github: <a href="http://github.com/krukow/stomple">http://github.com/krukow/stomple</a>.

More info to come ;) ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>507</wp:post_id>
		<wp:post_date>2010-05-09 22:22:17</wp:post_date>
		<wp:post_date_gmt>2010-05-09 20:22:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stomple-jms-via-websockets</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1470</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander4]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld4</wp:comment_author_url>
			<wp:comment_author_IP>188.168.140.221</wp:comment_author_IP>
			<wp:comment_date>2011-07-13 01:15:15</wp:comment_date>
			<wp:comment_date_gmt>2011-07-12 23:15:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="http://www.box.net/view_shared/sehx410ux7?ml=buy-generic-abana buy@generic.abana" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic ABANA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1477</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander7]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld7</wp:comment_author_url>
			<wp:comment_author_IP>188.168.87.119</wp:comment_author_IP>
			<wp:comment_date>2011-07-24 19:08:48</wp:comment_date>
			<wp:comment_date_gmt>2011-07-24 17:08:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="http://www.trustedpillspot.com/?ml=buy-generic-LEVITRA buy@generic.LEVITRA" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic LEVITRA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>My son</title>
		<link>http://blog.higher-order.net/2010/05/24/my-son/</link>
		<pubDate>Mon, 24 May 2010 09:32:58 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/2010/05/24/my-son/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.higher-order.net/wp-content/uploads/2010/05/Frej_og_Far.jpg"><img src="http://blog.higher-order.net/wp-content/uploads/2010/05/Frej_og_Far.jpg" alt="My son and I" title="My son and I" width="768" height="1024" class="alignright size-full wp-image-524" /></a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>525</wp:post_id>
		<wp:post_date>2010-05-24 11:32:58</wp:post_date>
		<wp:post_date_gmt>2010-05-24 09:32:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-son</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1473</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander7]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld7</wp:comment_author_url>
			<wp:comment_author_IP>188.168.71.60</wp:comment_author_IP>
			<wp:comment_date>2011-07-18 17:56:23</wp:comment_date>
			<wp:comment_date_gmt>2011-07-18 15:56:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="http://www.trustedpillspot.com/?ml=buy-generic-LEVITRA buy@generic.LEVITRA" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic LEVITRA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Stomple RC1: Combining WebSockets and Reliable Messaging</title>
		<link>http://blog.higher-order.net/2010/06/01/stomple-rc1-combining-websockets-and-reliable-messaging/</link>
		<pubDate>Tue, 01 Jun 2010 20:30:09 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=541</guid>
		<description></description>
		<content:encoded><![CDATA[I've finished <a href="http://github.com/krukow/stomple">Release Candidate 1 for Stomple</a>, my JavaScript <a href="http://stomp.codehaus.org/Protocol">Stomp</a> library which uses WebSockets to access compatible Stomp Message Brokers (which includes JMS providers via <a href="http://stomp.codehaus.org/StompConnect">StompConnect</a>). Stomple is heavily inspired by Jeff Mesnil's great <a href="http://jmesnil.net/stomp-websocket/doc/">stomp-websocket</a>, but aims to be feature complete and to provide a high-level API which is more customizable, robust and easy to use. 

<strong>What</strong>? From the <a href="http://stomp.codehaus.org/Home">Stomp website</a>: <blockquote>Stomp provides an interoperable wire format so that any of the available Stomp Clients can communicate with any Stomp Message Broker to provide easy and widespread messaging interop among languages, platforms and brokers.</blockquote>
As mentioned, this includes JMS. Stomple is a JavaScript library which enables using browsers that support WebSockets as messaging clients, e.g., subscribing to an JMS topic in a JavaScript program running inside Chrome. 

Websocket communication has less overhead than HTTP when HTTP semantics aren't needed. More importantly, WebSockets allow the <em>server</em> to push updates to the browser (as opposed to the usual HTTP request-response paradigm). For a simple example, see the <a href="http://screencast.com/t/NzdmMGJj">screen cast of the "transactional chat example"</a> where chat messages are pushed from the server to participating clients.
 
<strong>Why</strong> release Stomple when there is already stomp-websocket? First of all, Jeff did an excellent job with stomp-websocket. However, I wanted additional features and more production maturity (e.g., support for timeouts, various low- and high-level callbacks and automatic receipts). 

<strong>A few notable features:</strong>
<ul>
<li>Customizability and Callbacks. A key value of Stomple is that it shouldn't cut off access to any low-level functionality. Hence everything is customizable and accessible to the user code. All core functions support success and failure callbacks. Further, there are low-level callbacks: <tt>socketOpen, socketMessage, socketClose, socketError</tt> corresponding to the low-level websocket events. These can be used to customize behaviour for special use-cases. At a higher-level, there are callbacks <tt>onConnect, connectFailed, onError, onReceipt</tt> correspoding to the Stomp events.</li>
	<li>Automatic receipts. If  <tt>client.autoReceipt</tt> is true (which it is by default), then all Stomp messages sent to the server include an automatically generated 'receipt' header. In the Stomp protocol, this causes the server to send a receipt for each message it receives, hence reassuring that the message has been received. If not enabled, the client can't be sure the message is actually received. </li>
<li>Timeouts. By default all messages sent to the server are associated with a (configurable) 8 second timeout. So for example, suppose you subscribe to a destination, but do not receive a server receipt within 8 seconds: then your failure callback is called with reason 'timeout' and information about the message that failed. This way you are guaranteed that either your success or failure callback will always be called (but not both :)). These time-outs are pervasive and configurable per API call.</li>
<li>Transaction management. In Stomp, transactions are started using the 'BEGIN' frame, corresponding to a begin function in Stomple. When you call begin, you don't have to specify a transaction-id: if you don't, one will be generated automatically for you. Further, any API calls made between a begin and a commit/abort automatically use this transaction identifier, hence grouping the calls in the same transaction (unless, of course, you explicitly provide a different or no transaction id). Further, this nests arbitrarily, and works in a stack-like manner (e.g., begin, begin, send, associates send with inner-most begin). </li>
<li>Feature complete. Stomple aims to be feature complete. For example, it supports the recommended Stomp 'content-length' header, where the current stomp-websocket version does not.</li>
<li>Correctness. Stomple is tested manually and has a growing automatic test-suite written in YUI3-test. Stomple passes JSLint.</li>
</ul>

I decided not to build on Jeff's library because when APIs become more complex, I prefer using configuration-objects since it makes code more readable and easy to maintain (most Stomple functions take a single object literal parameter which names the function's "many arguments"). 
For example to create a Stomple client and to configure it to use destination 'jms.topic.chat' as default use:
<pre><tt><span class="keyword">var</span><span class="normal"> client </span><span class="symbol">=</span><span class="normal"> Stomple</span><span class="symbol">.</span><span class="function">create_client</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">    url </span><span class="symbol">:</span><span class="normal"> </span><span class="string">"ws://localhost:61614/stomp"</span><span class="symbol">,</span>
<span class="normal">    destination </span><span class="symbol">:</span><span class="normal"> </span><span class="string">"jms.topic.chat"</span><span class="symbol">,</span>
<span class="normal">    login </span><span class="symbol">:</span><span class="normal"> </span><span class="string">"guest"</span><span class="symbol">,</span>
<span class="normal">    passcode </span><span class="symbol">:</span><span class="normal"> </span><span class="string">"guest"</span>
<span class="cbracket">}</span><span class="symbol">);</span>
</tt></pre>
A different example of using single-argument configuration objects would be subscribe:
<pre><tt><span class="normal">client</span><span class="symbol">.</span><span class="function">subscribe</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">    success</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">frame</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span><span class="comment">//called if subscribe succeeds within timeout-period</span>
<span class="normal">        </span><span class="comment">//subscribe succeeded... do something</span>
<span class="normal">    </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">    failure</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">spec</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span><span class="comment">//called if subscribe fails or times out</span>
<span class="normal">        console</span><span class="symbol">.</span><span class="function">log</span><span class="symbol">(</span><span class="normal">spec</span><span class="symbol">.</span><span class="normal">reason</span><span class="symbol">);</span>
<span class="normal">    </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">    handler</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">msg</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span><span class="comment">//called when a message arrived ('this' is scope - see below) </span>
<span class="normal">        </span><span class="keyword">this</span><span class="symbol">.</span><span class="normal">received </span><span class="symbol">=</span><span class="normal"> msg</span><span class="symbol">.</span><span class="normal">body</span><span class="symbol">;</span><span class="comment">//"this" is "someObject"</span>
<span class="normal">    </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">    scope</span><span class="symbol">:</span><span class="normal"> someObject</span>
<span class="cbracket">}</span><span class="symbol">);</span></tt></pre>
Note by the way that if <tt>client.autoConnect</tt> is true (which it is by default), then you don't have to explicitly connect. Stomple will automatically connect upon your first action. The subscribe function supports an optional destination parameter in-case a default wasn't supplied when the client object was created (or in case you want to subscribe to a non-default destination). 


<strong>How</strong>?
For each Stomp client frame  (command): SEND, SUBSCRIBE, UNSUBSCRIBE, BEGIN, COMMIT, ABORT,  ACK, DISCONNECT there are  corresponding lower-case functions on the client object, e.g., send, subscribe... Defaults are specified when creating the client object. For example.
<pre><tt><span class="keyword">var</span><span class="normal"> client </span><span class="symbol">=</span><span class="normal"> Stomple</span><span class="symbol">.</span><span class="function">create_client</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">    url </span><span class="symbol">:</span><span class="normal"> </span><span class="string">"ws://localhost:61614/stomp"</span><span class="symbol">,</span>
<span class="normal">    destination </span><span class="symbol">:</span><span class="normal"> </span><span class="string">"jms.topic.chat"</span><span class="symbol">,</span>
<span class="normal">    login </span><span class="symbol">:</span><span class="normal"> </span><span class="string">"guest"</span><span class="symbol">,</span>
<span class="normal">    passcode </span><span class="symbol">:</span><span class="normal"> </span><span class="string">"guest"</span><span class="symbol">,</span>
<span class="normal">    autoConnect</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">true</span><span class="symbol">,</span><span class="comment">//which is actually the default</span>
<span class="normal">    timeout</span><span class="symbol">:</span><span class="normal"> </span><span class="number">3000</span><span class="symbol">,</span>
<span class="normal">    autoReceipt</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">true</span><span class="comment">//which is actually the default</span>
<span class="normal">    </span><span class="comment">//...</span>
<span class="cbracket">}</span><span class="symbol">);</span>
</tt></pre>
See Stomple.ClientPrototype for all overrides.

Once a client object is created, the user can issue commands. For example, in the chat example a typical sequence would be.
<pre><tt><span class="normal">client</span><span class="symbol">.</span><span class="function">subscribe</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">    handler </span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">(</span><span class="normal">msg</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span><span class="comment">//update screen on chat msg receiption</span>
<span class="normal">	    </span><span class="keyword">var</span><span class="normal"> c </span><span class="symbol">=</span><span class="normal"> document</span><span class="symbol">.</span><span class="function">getElementById</span><span class="symbol">(</span><span class="string">'content'</span><span class="symbol">);</span>
<span class="normal">	    c</span><span class="symbol">.</span><span class="normal">innerHTML </span><span class="symbol">=</span><span class="normal"> c</span><span class="symbol">.</span><span class="normal">innerHTML </span><span class="symbol">+</span><span class="normal"> </span><span class="string">'&lt;br&gt;'</span><span class="normal"> </span><span class="symbol">+</span><span class="normal"> msg</span><span class="symbol">.</span><span class="normal">body</span><span class="symbol">;</span>
<span class="normal">	</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">	scope </span><span class="symbol">:</span><span class="normal"> anObjectIfNeeded</span><span class="symbol">,</span>
<span class="normal">	success </span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="comment">// did subscription succeed?</span>
<span class="normal">        </span><span class="comment">//send a test message</span>
<span class="normal">        client</span><span class="symbol">.</span><span class="function">send</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">            body</span><span class="symbol">:</span><span class="normal"> </span><span class="string">"User krukow joined chatroom #stomple"</span><span class="symbol">,</span>
<span class="normal">            success</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">              console</span><span class="symbol">.</span><span class="function">log</span><span class="symbol">(</span><span class="string">"sent welcome message..."</span><span class="symbol">);</span><span class="normal">          </span>
<span class="normal">            </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">            failure</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">              console</span><span class="symbol">.</span><span class="function">log</span><span class="symbol">(</span><span class="string">"Failed..."</span><span class="symbol">);</span>
<span class="normal">            </span><span class="cbracket">}</span>
<span class="normal">            </span>
<span class="normal">        </span><span class="cbracket">}</span><span class="symbol">);</span>
<span class="normal">	</span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">	failure </span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span><span class="comment">// did subscription fail?</span>
<span class="normal">		console</span><span class="symbol">.</span><span class="function">log</span><span class="symbol">(</span><span class="string">"sub fail"</span><span class="symbol">);</span>
<span class="normal">	</span><span class="cbracket">}</span>
<span class="cbracket">}</span><span class="symbol">);</span></tt></pre>

Things are pretty straightforward from here (if you get Stomp :)). For more advanced examples see the automated test-suite. Here is an example of a transaction.
<pre><tt><span class="keyword">this</span><span class="symbol">.</span><span class="normal">client</span><span class="symbol">.</span><span class="function">begin</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">    failure</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">        Y</span><span class="symbol">.</span><span class="normal">Assert</span><span class="symbol">.</span><span class="function">fail</span><span class="symbol">(</span><span class="string">"Begin transaction failed."</span><span class="symbol">);</span>
<span class="normal">    </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">    success</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="normal"> </span>
<span class="normal">		</span><span class="keyword">for</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">i</span><span class="symbol">=</span><span class="number">0</span><span class="symbol">;</span><span class="normal">i</span><span class="symbol">&lt;</span><span class="normal">N</span><span class="symbol">;</span><span class="normal">i</span><span class="symbol">+=</span><span class="number">1</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="keyword">this</span><span class="symbol">.</span><span class="normal">client</span><span class="symbol">.</span><span class="function">send</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">				body</span><span class="symbol">:</span><span class="normal"> </span><span class="string">""</span><span class="symbol">+</span><span class="normal">msgBodies</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">],</span>
<span class="normal">				failure</span><span class="symbol">:</span><span class="normal"> sendFailed</span>
<span class="normal">                </span><span class="comment">//we don't wait for receipts here... Socket provies order..</span>
<span class="normal">			</span><span class="cbracket">}</span><span class="symbol">);</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="normal">        </span><span class="keyword">this</span><span class="symbol">.</span><span class="normal">client</span><span class="symbol">.</span><span class="function">commit</span><span class="symbol">(</span><span class="cbracket">{</span>
<span class="normal">            failure</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">                Y</span><span class="symbol">.</span><span class="normal">Assert</span><span class="symbol">.</span><span class="function">fail</span><span class="symbol">(</span><span class="string">"Commit transaction failed."</span><span class="symbol">);</span>
<span class="normal">            </span><span class="cbracket">}</span><span class="symbol">,</span>
<span class="normal">            success</span><span class="symbol">:</span><span class="normal"> </span><span class="keyword">function</span><span class="symbol">()</span><span class="cbracket">{</span><span class="comment">//...</span>
<span class="normal">            </span><span class="cbracket">}</span>
<span class="normal">        </span><span class="cbracket">}</span><span class="symbol">);</span>
<span class="normal">    </span><span class="cbracket">}</span>
<span class="cbracket">}</span><span class="symbol">);</span></tt></pre>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>541</wp:post_id>
		<wp:post_date>2010-06-01 22:30:09</wp:post_date>
		<wp:post_date_gmt>2010-06-01 20:30:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stomple-rc1-combining-websockets-and-reliable-messaging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1410</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Higher-Order » Blog Archive » Stomple RC1: Combining WebSockets and Reliable Messaging -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/trackback?utm_source=pingback&amp;utm_campaign=L2&amp;url=http://blog.higher-order.net/2010/06/01/stomple-rc1-combining-websockets-and-reliable-messaging/</wp:comment_author_url>
			<wp:comment_author_IP>74.112.128.63</wp:comment_author_IP>
			<wp:comment_date>2010-06-02 07:25:09</wp:comment_date>
			<wp:comment_date_gmt>2010-06-02 05:25:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Dion Almaer, Atmosphere Framework. Atmosphere Framework said: Stomple is a library from Karl Krokow that rocks on Stomp using Web Sockets http://bit.ly/9rNT1u (via @dalmaer) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1411</wp:comment_id>
			<wp:comment_author><![CDATA[Ajaxian &raquo; Stomple: Stomping to the server via WebSockets]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ajaxian.com/archives/stomple-stomping-to-the-server-via-websockets</wp:comment_author_url>
			<wp:comment_author_IP>208.43.16.163</wp:comment_author_IP>
			<wp:comment_date>2010-06-02 09:38:52</wp:comment_date>
			<wp:comment_date_gmt>2010-06-02 07:38:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Krukow has created Stomple, a library that &quot;enables using the browser as a reliable messaging client, e.g. for JMS.&quot; It is [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1412</wp:comment_id>
			<wp:comment_author><![CDATA[Stomple: Stomping to the server via WebSockets | pro2go Designs Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.p2gdesigns.com/blog/internet-marketing-research-development/development-techniques-standards/stomple-stomping-to-the-server-via-websockets/</wp:comment_author_url>
			<wp:comment_author_IP>74.220.207.103</wp:comment_author_IP>
			<wp:comment_date>2010-06-02 10:45:40</wp:comment_date>
			<wp:comment_date_gmt>2010-06-02 08:45:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Krukow has created Stomple, a library that &#8220;enables using the browser as a reliable messaging client, e.g. for [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1413</wp:comment_id>
			<wp:comment_author><![CDATA[TempusFactor &raquo; Blog Archive &raquo; links for 2010-06-04]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tempusfactor.com/2010/06/links-for-2010-06-04/</wp:comment_author_url>
			<wp:comment_author_IP>8.12.42.226</wp:comment_author_IP>
			<wp:comment_date>2010-06-05 03:07:10</wp:comment_date>
			<wp:comment_date_gmt>2010-06-05 01:07:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Higher-Order » Blog Archive » Stomple RC1: Combining WebSockets and Reliable Messaging (tags: websockets messaging) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1447</wp:comment_id>
			<wp:comment_author><![CDATA[HTML 5: un esquema de enlaces]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.programania.net/diseno-web/html-5-un-esquema-de-enlaces/</wp:comment_author_url>
			<wp:comment_author_IP>84.20.10.73</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 09:57:49</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 07:57:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://blog.higher-order.net/2010/06/01/stomple-rc1-combining-websockets-and-reliable-messaging/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1467</wp:comment_id>
			<wp:comment_author><![CDATA[Baby Care]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tarinclayne.com/BabyCare/</wp:comment_author_url>
			<wp:comment_author_IP>188.76.240.97</wp:comment_author_IP>
			<wp:comment_date>2011-07-07 11:36:20</wp:comment_date>
			<wp:comment_date_gmt>2011-07-07 09:36:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Superb website...</strong>

[...]always a big fan of linking to bloggers that I love but don’t get a lot of link love from[...]…...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1475</wp:comment_id>
			<wp:comment_author><![CDATA[RamirezEMILIA21]]></wp:comment_author>
			<wp:comment_author_email>patriciasanders@mail15.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.64.12.20</wp:comment_author_IP>
			<wp:comment_date>2011-07-21 14:48:15</wp:comment_date>
			<wp:comment_date_gmt>2011-07-21 12:48:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Make your life time more simple take the <a href="http://bestfinance-blog.com/topics/personal-loans" rel="nofollow">personal loans</a> and everything you want.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>46</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1487</wp:comment_id>
			<wp:comment_author><![CDATA[ParksInes34]]></wp:comment_author>
			<wp:comment_author_email>heilajordan@mail15.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>31.184.236.16</wp:comment_author_IP>
			<wp:comment_date>2012-01-01 11:58:38</wp:comment_date>
			<wp:comment_date_gmt>2012-01-01 09:58:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would like to propose not to hold off until you earn enough money to buy goods! You should just take the business loans or student loan and feel comfortable]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>65</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1488</wp:comment_id>
			<wp:comment_author><![CDATA[ParksInes34]]></wp:comment_author>
			<wp:comment_author_email>heilajordan@mail15.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>31.184.236.16</wp:comment_author_IP>
			<wp:comment_date>2012-01-01 12:05:42</wp:comment_date>
			<wp:comment_date_gmt>2012-01-01 10:05:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you are willing to buy a car, you will have to get the <a href="http://goodfinance-blog.com/topics/personal-loans" rel="nofollow">personal loans</a>. Furthermore, my father commonly uses a student loan, which seems to be really rapid.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>65</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1497</wp:comment_id>
			<wp:comment_author><![CDATA[cabinet stomatologie]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://allfilm.su/user/leonilamorford78/</wp:comment_author_url>
			<wp:comment_author_IP>220.166.160.122</wp:comment_author_IP>
			<wp:comment_date>2012-05-04 17:29:43</wp:comment_date>
			<wp:comment_date_gmt>2012-05-04 15:29:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>...For further Information click here...</strong>

[...]The total glance of your site is great, let smartly as the content![...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1511</wp:comment_id>
			<wp:comment_author><![CDATA[Magic Submitter]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tinyurl.com/9buygcm</wp:comment_author_url>
			<wp:comment_author_IP>120.197.85.171</wp:comment_author_IP>
			<wp:comment_date>2012-10-08 09:58:17</wp:comment_date>
			<wp:comment_date_gmt>2012-10-08 07:58:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>at the internet marketing software that I...</strong>

sent you a few days ago. I just found out that it can put your social media marketing on autopilot as well....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1533</wp:comment_id>
			<wp:comment_author><![CDATA[Porn]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>119.48.114.127</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 03:17:36</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 01:17:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Porn...</strong>

Positives of a low-rate balance transfercustomers can use a balance transfer to pay off higher interest loan, particularly higher rate credit cards....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1567</wp:comment_id>
			<wp:comment_author><![CDATA[Kredit ohne Schufa]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kreditohneschufa24h1.info</wp:comment_author_url>
			<wp:comment_author_IP>203.130.128.226</wp:comment_author_IP>
			<wp:comment_date>2013-05-04 09:45:25</wp:comment_date>
			<wp:comment_date_gmt>2013-05-04 07:45:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredit ohne Schufa...</strong>

von England zum Vorbilde genommen zu haben scheint....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1586</wp:comment_id>
			<wp:comment_author><![CDATA[Online Kredit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://onlinekreditz1.info</wp:comment_author_url>
			<wp:comment_author_IP>59.90.200.165</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 12:31:25</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 10:31:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Online Kredit...</strong>

Dabei erwacht er partiell, wiederholt sich den Traum, weil er ihn mir erzaehlen will....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1591</wp:comment_id>
			<wp:comment_author><![CDATA[Online Kredit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://onlinekreditfun.info</wp:comment_author_url>
			<wp:comment_author_IP>121.24.238.1</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 16:35:26</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 14:35:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Online Kredit...</strong>

Vor dem Haus wird die Leiter aufgestellt, das grosse Rad gedreht, bis die Leiter sich hoeher und immer hoeher aufrichtet und die obersten Sprossen endlich ganz nahe der Stelle am Dach kommen, wo der Mann liegt....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>clj-ds: Clojure&#039;s persistent data structures for Java</title>
		<link>http://blog.higher-order.net/2010/06/11/clj-ds-clojures-persistent-data-structures-for-java/</link>
		<pubDate>Fri, 11 Jun 2010 13:45:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=575</guid>
		<description></description>
		<content:encoded><![CDATA[One of the appealing features of Clojure is the pervasive use of (efficient!) persistent data structures. (In previous posts I've shed some light on how <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/">PersistentHashMap</a> and <a href="http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/">PersistentVector</a> are implemented, although some of that information is slightly dated now).

There are many advantages to programming with persistent data structures (which implies immutability) but that isn't the topic of this post... Currently the Clojure data structures are implemented in Java, so in principle they should be usable also outside of Clojure, say from Java.  However, in practice it is inconvenient (see below). 

I've created the project clj-ds to make Clojure's data structures available in a more practical form to other JVM languages than Clojure. The <a href="http://github.com/krukow/clj-ds/raw/master/README">README</a> file from the <a href="http://github.com/krukow/clj-ds">clj-ds GitHub project</a> explains the motivation:

<strong>Advantages of clj-ds when constrained to working with Java</strong> (as opposed to just including clojure.jar)

* Currently the Clojure data structures are implemented in Java. In the future,
all of Clojure will be implemented in Clojure itself (known as "Clojure-in-Clojure").
This has many advantages for Clojure, but when it happens the data structures will 
probably be even more intertwined with the rest of the language, 
and may be even more inconvenient to use in a Java context.

The clj-ds project will maintain Java versions of the code, and where possible attempt
to "port" improvements made in the Clojure versions back into clj-ds. Thus keeping maintained
versions of the Java data structures. 

* In the current Clojure version, calling certain methods on PersistentHashMap requires
loading the entire Clojure runtime, including the bootstrap process. This takes about one second.
This means that the first time one of these methods is called, a Java user will experience a
slight delay (and a memory-usage increase). Further, many of the Clojure runtime 
Java classes are not needed when only support for persistent data structures 
is wanted (e.g., the compiler).

* The clj-ds library is not dependent on the Clojure runtime nor does it run any
Clojure bootstrap process, e.g., the classes that deal with compilation have been removed. 
This results in a smaller library, and the mentioned delay does not occur.

* Clojure is a dynamically typed language. Java is statically typed, and supports
'generics' from version 5. A Java user would expect generics support from a Java
data structure library, and the Clojure version doesn't have this. 
clj-ds will support generics.

* Finally, a slight improvement.  Certain of the Clojure data structure methods use Clojure's 'seq' abstraction. In the implementation of the Java 'iterator' pattern. It is possible, to make
slightly more efficient iterators using a tailor made iterator. clj-ds does this.

Code: <a href="http://github.com/krukow/clj-ds">http://github.com/krukow/clj-ds</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>575</wp:post_id>
		<wp:post_date>2010-06-11 15:45:47</wp:post_date>
		<wp:post_date_gmt>2010-06-11 13:45:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clj-ds-clojures-persistent-data-structures-for-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="persistent-data-structures"><![CDATA[persistent data structures]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1421</wp:comment_id>
			<wp:comment_author><![CDATA[Higher-Order » Blog Archive » clj-ds: Clojure&#39;s persistent data &#8230; | java]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://java.darmowe-blogi.pisz.pl/bez-kategorii/higher-order-%c2%bb-blog-archive-%c2%bb-clj-ds-clojures-persistent-data.html</wp:comment_author_url>
			<wp:comment_author_IP>208.43.81.118</wp:comment_author_IP>
			<wp:comment_date>2010-06-11 17:58:16</wp:comment_date>
			<wp:comment_date_gmt>2010-06-11 15:58:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] resztę artykułu: Higher-Order » Blog Archive » clj-ds: Clojure&#39;s persistent data &#8230;   advantages-for, are-implemented, clojure, currently-the-clojure, data, data-structures-, future, [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1422</wp:comment_id>
			<wp:comment_author><![CDATA[apmckinlay]]></wp:comment_author>
			<wp:comment_author_email>apmckinlay@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.169.132.234</wp:comment_author_IP>
			<wp:comment_date>2010-06-11 18:58:01</wp:comment_date>
			<wp:comment_date_gmt>2010-06-11 16:58:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's great news. I looked at using Clojure's data structures but didn't want to be dependent on all of Clojure. I ended up writing my own :-( http://thesoftwarelife.blogspot.com/2009/10/java-immutable-persistent-map.html
although a commenter pointed out http://code.google.com/p/pcollections
It would be nice if Google's Guava libraries included persistent data structures like these.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>31</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1423</wp:comment_id>
			<wp:comment_author><![CDATA[This weekend in the Intertweets (June 13th Ed) | disclojure: all things clojure]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://disclojure.org/2010/06/13/this-weekend-in-the-intertweets-june-13th-ed/</wp:comment_author_url>
			<wp:comment_author_IP>74.208.16.3</wp:comment_author_IP>
			<wp:comment_date>2010-06-14 09:51:13</wp:comment_date>
			<wp:comment_date_gmt>2010-06-14 07:51:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Clojure’s persistent data structures for Java (here, via @planet_lang) &#8212; This is a port/fork of Clojure&#8217;s persistent data structures so [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1461</wp:comment_id>
			<wp:comment_author><![CDATA[I Haz Burger]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ihazburger.com/t</wp:comment_author_url>
			<wp:comment_author_IP>118.99.66.10</wp:comment_author_IP>
			<wp:comment_date>2011-04-23 12:02:09</wp:comment_date>
			<wp:comment_date_gmt>2011-04-23 10:02:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Funny stuffs...</strong>

[...]the time to read or visit the content or sites we have linked to below the[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1471</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander6]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld6</wp:comment_author_url>
			<wp:comment_author_IP>188.168.71.156</wp:comment_author_IP>
			<wp:comment_date>2011-07-15 22:56:46</wp:comment_date>
			<wp:comment_date_gmt>2011-07-15 20:56:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="http://www.trustedpillspot.com/?ml=buy-generic-VIAGRA buy@generic.VIAGRA" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic VIAGRA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1510</wp:comment_id>
			<wp:comment_author><![CDATA[omega replica watches]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://favorious.com/people/FashionNewsFast</wp:comment_author_url>
			<wp:comment_author_IP>88.80.20.168</wp:comment_author_IP>
			<wp:comment_date>2012-09-28 06:56:10</wp:comment_date>
			<wp:comment_date_gmt>2012-09-28 04:56:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>hermes belts...</strong>

Fashion Re-defined While using Louis Vuitton Stephen Sprouse Carrier...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1551</wp:comment_id>
			<wp:comment_author><![CDATA[Payday Loans]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://paydayloansukhut.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>222.246.7.199</wp:comment_author_IP>
			<wp:comment_date>2013-04-28 08:50:22</wp:comment_date>
			<wp:comment_date_gmt>2013-04-28 06:50:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Payday Loans...</strong>

Understanding as much as possible about mlm will help you see what needs to be done to be successful....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1579</wp:comment_id>
			<wp:comment_author><![CDATA[guenstige Kredite]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://college-jacke.eu</wp:comment_author_url>
			<wp:comment_author_IP>61.235.207.170</wp:comment_author_IP>
			<wp:comment_date>2013-05-08 23:27:38</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 21:27:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>guenstige Kredite...</strong>

Auch ging draussen der Tag zu Ende, und zuletzt umgab Kasperle nachtschwarze Dunkelheit....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1584</wp:comment_id>
			<wp:comment_author><![CDATA[bad credit loans]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://badcreditloanpal.com/</wp:comment_author_url>
			<wp:comment_author_IP>46.211.222.207</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 10:51:56</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 08:51:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>bad credit loans...</strong>

bad credit loan loansforbadcreditpal.com...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1589</wp:comment_id>
			<wp:comment_author><![CDATA[Kredit trotz Schufa]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kreditexpresso2.info</wp:comment_author_url>
			<wp:comment_author_IP>91.199.190.164</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 15:03:16</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 13:03:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Kredit trotz Schufa...</strong>

So etwas war ihr noch niemals begegnet....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1630</wp:comment_id>
			<wp:comment_author><![CDATA[Hamilton clock]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://watchesforjp.com</wp:comment_author_url>
			<wp:comment_author_IP>120.43.5.19</wp:comment_author_IP>
			<wp:comment_date>2013-06-25 01:20:18</wp:comment_date>
			<wp:comment_date_gmt>2013-06-24 23:20:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Hamilton clock...</strong>

Howdy, i read your blog occasionally and i own a similar one and i was just wondering if you get a lot of spam comments? If so how do you protect against it, any plugin or anything you can recommend? I get so much lately it's driving me insane so any ...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Is it just me or is this important</title>
		<link>http://blog.higher-order.net/2010/06/16/is-it-just-me-or-is-this-important/</link>
		<pubDate>Wed, 16 Jun 2010 12:22:41 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=582</guid>
		<description></description>
		<content:encoded><![CDATA[for all JVM-based languages
<a href="http://www.infoq.com/news/2010/06/azul_ori">http://www.infoq.com/news/2010/06/azul_ori</a>?
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>582</wp:post_id>
		<wp:post_date>2010-06-16 14:22:41</wp:post_date>
		<wp:post_date_gmt>2010-06-16 12:22:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>is-it-just-me-or-is-this-important</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1468</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld3</wp:comment_author_url>
			<wp:comment_author_IP>188.168.142.80</wp:comment_author_IP>
			<wp:comment_date>2011-07-08 11:54:17</wp:comment_date>
			<wp:comment_date_gmt>2011-07-08 09:54:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="http://box.net/view_shared/vmd27csrh9?ml=buy-aloe-vera-gel buy@aloe.vera.gel" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic VIAGRA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Conj-labs Clojure lessons part i</title>
		<link>http://blog.higher-order.net/2010/07/04/conj-labs-clojure-lessons-part-i/</link>
		<pubDate>Sun, 04 Jul 2010 07:43:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=589</guid>
		<description></description>
		<content:encoded><![CDATA[I attended the <a href="http://www.conj-labs.eu/">first conj-labs in Brussels, June 23-25</a>. It was three days of intense Clojure learning with Clojure profiles: <a href="http://clj-me.cgrand.net/">Christophe Grand</a> and <a href="http://www.bestinclass.dk/">Lau Jensen</a>. I must say it exceeded my expectations! Everyone was great and I really feel it took my Clojure to the next level.

This post describes some mistakes I've made in the Clojure circuit breaker project, and how I managed to fix them, mostly due to guidance from Christophe. 

The following is an (embarrassingly long) list of issues that my <a href="http://blog.higher-order.net/2010/05/05/circuitbreaker-clojure-1-2/">previous version of circuit breaker</a> had. I think others can learn from my mistakes.

<strong>Platform speed protocol functions.</strong> In order for a protocol function reaching a datatype to run at platform call-speed, the datatype must inline the protocol implementation. In the old version, I extended the state transitions protocol to the circuit breaker states using (extend ...): this is usually 3-4x times slower than platform-speed method calls (but can be much slower when cache misses). I now inline the protocol extension to the states.

This inlining gave a new problem. I had two data types, say A and B, where A creates an instance of B and B creates an instance of A in the implementation of the inlined protocol functions. You can't have this type of "mutually recursive data types" since they are compiled on the fly to Java classes. The fix was to...

<strong>Create factory functions for your data types.</strong> There are at least two reasons for this. First a factory function can do processing of its arguments (e.g. pre condition), say for validation. The data type constructors can't have any logic. Second, as noted by Alex Miller on his blog: <a href="http://tech.puredanger.com/2010/06/30/using-records-from-a-different-namespace-in-clojure/&">to use data types defined in another namespace you must import them</a>. But you can use require/use to bring the factory functions into your namespace. 

<strong>I thought I knew: protocols aren't interfaces (and Java interop).</strong>. I used a protocol: CircuitBreakerTransitions to model the states. The protocol contains functions needed for state transition on various events. I extended the protocol to my states, e.g., 
<pre><code>
(defrecord ClosedState [policy fail-count]
  CircuitBreakerTransitions
  ...)
</code></pre>
It inlines the protocol so the generated class implements the protocol's backing interface: It's fast and works great. 

The problem appeared when I wanted to expose a Java API for the circuit breaker: one of the API methods getCurrentState returns the current state - now, the question is what is its signature? My first attempt was public CircuitBreakerTransitions getCurrentState(). Now what is wrong?

The problem is that my protocol can be extended to reach other types. Those types may or may not inline the protocol functions, and hence it is possible for the protocol to reach a type which doesn't implement the CircuitBreakerTransitions interface... So should I just return "Object" - that isn't really useful. 

I haven't implemented a solution yet, but this is what I am thinking. Keep the type: CircuitBreakerTransitions getCurrentState(), but in my Java-interop (gen-class), the function that implements getCurrentState should grab the state s from the circuit breaker. Now I know that (satisfies? CircuitBreakerTransitions s) is true, but (instance? (:on-interface CircuitBreakerTransitions) s) may be false. If it is true, I simply return it. Otherwise: reify  CircuitBreakerTransitions by delegating to the protocol functions on s. This may sound a bit wierd at first, but I think of it like creating a new object that satisfies the interface by dynamically dispatching to s.

<strong>Type-hits are for removing reflection, not enforcing type safety</strong> My first iteration tried to type-hint the records, e.g.,
<pre><code>
(defrecord ClosedState [^TransitionPolicy policy ^int fail-count])
</code></pre>

This is just plain terrible :) First, those hints are ignored (but may be used in later versions of Clojure). Second, int isn't suported in the current version of Clojure. Third, TransitionPolicy is a protocol - and, yes, protocol's aren't interfaces (see above): problem being again if I supply an object that satisfies the protocol but doesn't implement the backing interface. Ugh.
The reason I put the hints wasn't to remove reflection, it was for the generated constructor to have types (which is a valid thing to want, but unsupported now). But it is the wrong approach for the reasons above. 

The right thing is to remove hints and expose a factory function which checks that the first argument satisfies the TransitionPolicy protocol and that the second argument is non-negative.

<strong>Premature optimization</strong>. My circuit breaker implementation tried to optimize a corner-case for the swap! function: suppose you (swap! state f) and f applied to the current state is identically the same state. Then there is no reason to do a compare-and-set!. My transition-by! function implemented this optimization. However, this was a premature optimization that changes the semantics of time (wow, Clojure really is powerful :)). The fundamental question is this:  [s] -f-> [s] (where s is a state and f is a side-effect free function that advances time), is this transition really advancing time? (it isn't observable, is it?...)

Anyway, I've never benchmarked the code so it was a premature optimization leading to less understandable code. Also, as <a href="http://twitter.com/chopmo">Jacob</a> and I discussed in the plane home: it actually skews the behavior of the circuit breaker to prefer switching states rather than staying in the same state - something that you may or may-not want.


Finally an off-topic: It is now possible to build the Clojure circuit breaker including AOT compilation of Java interop classes. I ran into a problem with lein where the order of namespaces in :namespaces isn't preserved. This is a problem when you are gen-interfacing in one file and gen-class :implements that interface in another.

I've created a very simple patch to lein to preserve the order.

<a href="http://blog.higher-order.net/wp-content/uploads/2010/07/0001-don-t-convert-namespaces-aot-to-a-set-as-it-does-n.patch.txt">http://blog.higher-order.net/wp-content/uploads/2010/07/0001-don-t-convert-namespaces-aot-to-a-set-as-it-does-n.patch.txt</a>

Phil is applying this patch so it should be out soon. Until then, if you don't want to patch lein, there is a step-by-step guide to repl AOT compilation in the <a href="http://github.com/krukow/clojure-circuit-breaker">README</a>.

Those interested can grab the latest code.

<a href="http://github.com/krukow/clojure-circuit-breaker">http://github.com/krukow/clojure-circuit-breaker</a>
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>589</wp:post_id>
		<wp:post_date>2010-07-04 09:43:27</wp:post_date>
		<wp:post_date_gmt>2010-07-04 07:43:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>conj-labs-clojure-lessons-part-i</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="circuit-breaker"><![CDATA[circuit breaker]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="protocols"><![CDATA[protocols]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1472</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander7]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld7</wp:comment_author_url>
			<wp:comment_author_IP>188.168.81.105</wp:comment_author_IP>
			<wp:comment_date>2011-07-17 14:22:03</wp:comment_date>
			<wp:comment_date_gmt>2011-07-17 12:22:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="http://www.trustedpillspot.com/?ml=buy-generic-LEVITRA buy@generic.LEVITRA" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic LEVITRA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Assoc and Clojure&#039;s PersistentHashMap: part ii</title>
		<link>http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii/</link>
		<pubDate>Mon, 16 Aug 2010 08:15:40 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=609</guid>
		<description></description>
		<content:encoded><![CDATA[Some time ago I wrote introductory posts that gave high-level overviews of how Clojure's PersistentVector and PersistentHashMap work. In the <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/">PersistentHashMap post</a> I promised that "In part 2 we look at how assoc works…" - it seems I never got around to that!

A lot of interesting things have happened with data structures in JVM-land since then: <a href="http://github.com/krestenkrab/erjang">Erjang</a> uses Clojure's data structures, it looks like Scala <a href="https://lampsvn.epfl.ch/trac/scala/ticket/3724">is porting PersistentVector</a>, <a href="http://olabini.com/blog/2010/07/preannouncing-seph/">upcoming Seph</a> is using them too. My <a href="http://blog.higher-order.net/2010/06/11/clj-ds-clojures-persistent-data-structures-for-java/">clj-ds project</a> should help in this regard: I've extracted the data structures of Clojure from its compiler for use with JVM-based languages (providing some extra stuff like reverse and "positioned" iterators). There are already people interested in using this in Java land.

Some people have asked for the "part ii" post, and my son just fell asleep, so ... :) Most of what is described in the <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/">PersistentHashMap post</a> is still true, however there have been optimizations and simplifications which I explain here. Note: before reading this post, you should read the previous post on PersistentHashMap.

<strong>First, some changes</strong>. Previously there were five implementations of the <tt>INode</tt> interface; this has changed and there are now only three implementations: <tt>ArrayNode</tt>, <tt>BitmapIndexedNode</tt> and <tt>HashCollisionNode</tt>. This means that: <tt>EmptyNode, LeafNode, FullNode</tt> are out, with <tt>ArrayNode</tt> replacing <tt>FullNode</tt>. An array node is an array where the entries are null or instances of INode, i.e., it stores other nodes but not any key-value pairs. An empty persistent hash map is simply a persistent hash map where the root node is null -- this removes the need for EmptyNode. Finally, leaf nodes used to store the actual entries stored in the map. Leaf nodes are out, and instead BitmapIndexedNodes directly embed the map entries in their arrays. 

The idea is the following: if, in the old implementation, a BitmapIndexedNode would store a leaf node at an index, then instead, it now embeds the key and value directly in its array. This array used to be of type <tt>INode[]</tt>, storing only nodes, but is now a mixed object array for which the value can be one of: a map key, a map entry, null or an INode object. 

<img src="http://blog.higher-order.net/files/clj/persistenthashmap1.png" alt="Old persistent hashmap structure" />

<em>The above drawing corresponds to the old structure.</em> In the new structure all the white circles (the leaf nodes) are embedded directly in their parents.

<strong><em>There is an invariant: </em> </strong>

for all the indices that are in the bitmap, the even indices store keys or null; the odd indices store values or INode objects. Key-value pairs are layed out in sequence, so that if index <tt>2*i</tt> is a key then index <tt>2*i + 1</tt> is a value. If an index <tt>2*i</tt> is null then <tt>2*i+1</tt> must be a non-null INode object.

Note: if you don't remember how bitpos, bitmap and index work see <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/">the part i post</a>.

The strategy used in BitmapIndexedNode is that it can store up to 16 entries in the bit map: if the size grows above 16, it is converted to a FullNode. 

<strong>Assoc</strong>. The assoc method creates a persistent hash map which is like the current one, except that it additionally stores another map entry. As before assoc works using path copying: all that is changed in the new map is the path from the root node to the newly added map entry.

<em>Beware</em>: the following drawing looks confusing: take the time and read the explanation. It is showing two persistent hash maps, where one is obtained by assoc'ing to the first. Again this is a modified version of one of Rich's slides. 

<img style="position: relative; left:-20px;" src="http://blog.higher-order.net/files/clj/persistenthashmap-pathcopy.png" alt="Path copying in the old structure" />

The first map is rooted on the left (where the left-most box points to). The second is rooted where the right-most box points to. The nodes are grouped in three, each indicated by a colored circle that surrounds it. The new node is in the right-most, lower corner.

Purple is the path in the old tree to where the new map entry would be; 
green is the new nodes that are created in the new hash map. 
The dashed lines indicate that the nodes in the new tree share children with nodes in the old tree. The red circles show all the nodes that are shared in the tree: note that this is most of the nodes. 

So how much work needs to be done to create the new tree? Suppose we are storing key k with value v. Using recursion, descend down the original tree as if looking for the key k. The key k isn't found. In the worst case this takes time: <tt>O(log<sub>32</sub> n)</tt>, in practice it we could stop at any level in the tree so 2-3 steps would be common (remember from <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice">the old post</a> that the work done at each level is constant and fast). At the bottom we create a new BitmapIndexedNode and store the new map entry in it. If the bottom node in the old tree was a BitmapIndexedNode with less than 16 elements the new BitmapIndexedNode is a copy of the old one, except that the new map entry is added. This step takes constant time since the array to copy at the bitmap indexed node always has less than 32 elements (because we store at most 16 map entries as: key, value, key, value, ...). If the bottom node was an <tt>ArrayNode</tt> we simply copy the array node, and make the new BitmapIndexedNode a size-one child of this array node (still constant time). 

On the drawing above, we have now recursively descended the purple path in the left/old tree, and we have created the new node which is a bitmap indexed node. What remains is to establish the path to this new node, in the new tree: this path is almost identical to the "purple" path in the old tree: the only difference is that we have created a new bitmap indexed node. The parent of the new node must of course reference it, so that is copied and modified to get a reference to the new node. This means that we must also copy the grandparent of the new node, modifying it to reference the parent. And so on... This copying takes place on our way "up" through the recursion, i.e., after the recursive calls complete at each node level.

Let's decompose the code. We only look at assoc for BitmapIndexedNode as it is the most interesting.

<pre><tt><span class="keyword">public</span><span class="normal"> INode </span><span class="function">assoc</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> shift</span><span class="symbol">,</span><span class="normal"> </span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> Object key</span><span class="symbol">,</span><span class="normal"> Object val</span><span class="symbol">,</span><span class="normal"> Box addedLeaf</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">		</span><span class="type">int</span><span class="normal"> bit </span><span class="symbol">=</span><span class="normal"> </span><span class="function">bitpos</span><span class="symbol">(</span><span class="normal">hash</span><span class="symbol">,</span><span class="normal"> shift</span><span class="symbol">);</span>
<span class="normal">		</span><span class="type">int</span><span class="normal"> idx </span><span class="symbol">=</span><span class="normal"> </span><span class="function">index</span><span class="symbol">(</span><span class="normal">bit</span><span class="symbol">);</span>
<span class="normal">		</span><span class="keyword">if</span><span class="symbol">((</span><span class="normal">bitmap </span><span class="symbol">&amp;</span><span class="normal"> bit</span><span class="symbol">)</span><span class="normal"> </span><span class="symbol">!=</span><span class="normal"> </span><span class="number">0</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="comment">//..</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">else</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="comment">//</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="cbracket">}</span></tt></pre>

This should be familiar from the previous post: we check if the index of the hash (at the current level) is in the bitmap. The else branch is the case where the index is not in the bitmap, corresponding to reaching the bottom of the path: here we must create a new node and path-copy as described above. In the "if"-branch we simply either call recursively if the index references an INode: if it references a key-value pair this is a "replace" and we do path copying here too. Again we look only at the else-branch as it is the most interesting.

<pre><tt><span class="keyword">public</span><span class="normal"> INode </span><span class="function">assoc</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> shift</span><span class="symbol">,</span><span class="normal"> </span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> Object key</span><span class="symbol">,</span><span class="normal"> Object val</span><span class="symbol">,</span><span class="normal"> Box addedLeaf</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">		</span><span class="type">int</span><span class="normal"> bit </span><span class="symbol">=</span><span class="normal"> </span><span class="function">bitpos</span><span class="symbol">(</span><span class="normal">hash</span><span class="symbol">,</span><span class="normal"> shift</span><span class="symbol">);</span>
<span class="normal">		</span><span class="type">int</span><span class="normal"> idx </span><span class="symbol">=</span><span class="normal"> </span><span class="function">index</span><span class="symbol">(</span><span class="normal">bit</span><span class="symbol">);</span>
<span class="normal">		</span><span class="keyword">if</span><span class="symbol">((</span><span class="normal">bitmap </span><span class="symbol">&amp;</span><span class="normal"> bit</span><span class="symbol">)</span><span class="normal"> </span><span class="symbol">!=</span><span class="normal"> </span><span class="number">0</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="comment">//..</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">else</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="type">int</span><span class="normal"> n </span><span class="symbol">=</span><span class="normal"> Integer</span><span class="symbol">.</span><span class="function">bitCount</span><span class="symbol">(</span><span class="normal">bitmap</span><span class="symbol">);</span>
<span class="normal">			</span><span class="keyword">if</span><span class="symbol">(</span><span class="normal">n </span><span class="symbol">&gt;=</span><span class="normal"> </span><span class="number">16</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">				</span><span class="comment">//convert to ArrayNode</span>
<span class="normal">			</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">else</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">				Object</span><span class="symbol">[]</span><span class="normal"> newArray </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> Object</span><span class="symbol">[</span><span class="number">2</span><span class="symbol">*(</span><span class="normal">n</span><span class="symbol">+</span><span class="number">1</span><span class="symbol">)];</span>
<span class="normal">				System</span><span class="symbol">.</span><span class="function">arraycopy</span><span class="symbol">(</span><span class="normal">array</span><span class="symbol">,</span><span class="normal"> </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> newArray</span><span class="symbol">,</span><span class="normal"> </span><span class="number">0</span><span class="symbol">,</span><span class="normal"> </span><span class="number">2</span><span class="symbol">*</span><span class="normal">idx</span><span class="symbol">);</span>
<span class="normal">				newArray</span><span class="symbol">[</span><span class="number">2</span><span class="symbol">*</span><span class="normal">idx</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> key</span><span class="symbol">;</span>
<span class="normal">				addedLeaf</span><span class="symbol">.</span><span class="normal">val </span><span class="symbol">=</span><span class="normal"> addedLeaf</span><span class="symbol">;</span><span class="normal"> </span>
<span class="normal">				newArray</span><span class="symbol">[</span><span class="number">2</span><span class="symbol">*</span><span class="normal">idx</span><span class="symbol">+</span><span class="number">1</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> val</span><span class="symbol">;</span>
<span class="normal">				System</span><span class="symbol">.</span><span class="function">arraycopy</span><span class="symbol">(</span><span class="normal">array</span><span class="symbol">,</span><span class="normal"> </span><span class="number">2</span><span class="symbol">*</span><span class="normal">idx</span><span class="symbol">,</span><span class="normal"> newArray</span><span class="symbol">,</span><span class="normal"> </span><span class="number">2</span><span class="symbol">*(</span><span class="normal">idx</span><span class="symbol">+</span><span class="number">1</span><span class="symbol">),</span><span class="normal"> </span><span class="number">2</span><span class="symbol">*(</span><span class="normal">n</span><span class="symbol">-</span><span class="normal">idx</span><span class="symbol">));</span>
<span class="normal">				</span><span class="keyword">return</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">BitmapIndexedNode</span><span class="symbol">(</span><span class="keyword">null</span><span class="symbol">,</span><span class="normal"> bitmap </span><span class="symbol">|</span><span class="normal"> bit</span><span class="symbol">,</span><span class="normal"> newArray</span><span class="symbol">);</span>
<span class="normal">			</span><span class="cbracket">}</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="cbracket">}</span></tt></pre>

Remember (from the previous post) that <tt>Integer.bitCount(bitmap)</tt> counts the number of children of this node. If we are storing less than 16 elements, we have room for one more: To create the new bitmap indexed node simply copy the object array, and modify it to store the new key-value pair (using the invariant mentioned above). (Ignore the "box" part, it is used to communicate to higher-levels in the recursion what happened.) Finally, if we have 16 elements stored already, convert to an ArrayNode:

<pre><tt><span class="keyword">public</span><span class="normal"> INode </span><span class="function">assoc</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> shift</span><span class="symbol">,</span><span class="normal"> </span><span class="type">int</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> Object key</span><span class="symbol">,</span><span class="normal"> Object val</span><span class="symbol">,</span><span class="normal"> Box addedLeaf</span><span class="symbol">)</span><span class="cbracket">{</span>
<span class="normal">		</span><span class="type">int</span><span class="normal"> bit </span><span class="symbol">=</span><span class="normal"> </span><span class="function">bitpos</span><span class="symbol">(</span><span class="normal">hash</span><span class="symbol">,</span><span class="normal"> shift</span><span class="symbol">);</span>
<span class="normal">		</span><span class="type">int</span><span class="normal"> idx </span><span class="symbol">=</span><span class="normal"> </span><span class="function">index</span><span class="symbol">(</span><span class="normal">bit</span><span class="symbol">);</span>
<span class="normal">		</span><span class="keyword">if</span><span class="symbol">((</span><span class="normal">bitmap </span><span class="symbol">&amp;</span><span class="normal"> bit</span><span class="symbol">)</span><span class="normal"> </span><span class="symbol">!=</span><span class="normal"> </span><span class="number">0</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="comment">//..</span>
<span class="normal">		</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">else</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">			</span><span class="type">int</span><span class="normal"> n </span><span class="symbol">=</span><span class="normal"> Integer</span><span class="symbol">.</span><span class="function">bitCount</span><span class="symbol">(</span><span class="normal">bitmap</span><span class="symbol">);</span>
<span class="normal">			</span><span class="keyword">if</span><span class="symbol">(</span><span class="normal">n </span><span class="symbol">&gt;=</span><span class="normal"> </span><span class="number">16</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">				INode</span><span class="symbol">[]</span><span class="normal"> nodes </span><span class="symbol">=</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> INode</span><span class="symbol">[</span><span class="number">32</span><span class="symbol">];</span>
<span class="normal">				</span><span class="type">int</span><span class="normal"> jdx </span><span class="symbol">=</span><span class="normal"> </span><span class="function">mask</span><span class="symbol">(</span><span class="normal">hash</span><span class="symbol">,</span><span class="normal"> shift</span><span class="symbol">);</span>
<span class="normal">				nodes</span><span class="symbol">[</span><span class="normal">jdx</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> EMPTY</span><span class="symbol">.</span><span class="function">assoc</span><span class="symbol">(</span><span class="normal">shift </span><span class="symbol">+</span><span class="normal"> </span><span class="number">5</span><span class="symbol">,</span><span class="normal"> hash</span><span class="symbol">,</span><span class="normal"> key</span><span class="symbol">,</span><span class="normal"> val</span><span class="symbol">,</span><span class="normal"> addedLeaf</span><span class="symbol">);</span><span class="normal">  </span>
<span class="normal">				</span><span class="type">int</span><span class="normal"> j </span><span class="symbol">=</span><span class="normal"> </span><span class="number">0</span><span class="symbol">;</span>
<span class="normal">				</span><span class="keyword">for</span><span class="symbol">(</span><span class="type">int</span><span class="normal"> i </span><span class="symbol">=</span><span class="normal"> </span><span class="number">0</span><span class="symbol">;</span><span class="normal"> i </span><span class="symbol">&lt;</span><span class="normal"> </span><span class="number">32</span><span class="symbol">;</span><span class="normal"> i</span><span class="symbol">++)</span>
<span class="normal">					</span><span class="keyword">if</span><span class="symbol">(((</span><span class="normal">bitmap </span><span class="symbol">&gt;&gt;&gt;</span><span class="normal"> i</span><span class="symbol">)</span><span class="normal"> </span><span class="symbol">&amp;</span><span class="normal"> </span><span class="number">1</span><span class="symbol">)</span><span class="normal"> </span><span class="symbol">!=</span><span class="normal"> </span><span class="number">0</span><span class="symbol">)</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">						</span><span class="keyword">if</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">array</span><span class="symbol">[</span><span class="normal">j</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">==</span><span class="normal"> </span><span class="keyword">null</span><span class="symbol">)</span>
<span class="normal">							nodes</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> </span><span class="symbol">(</span><span class="normal">INode</span><span class="symbol">)</span><span class="normal"> array</span><span class="symbol">[</span><span class="normal">j</span><span class="symbol">+</span><span class="number">1</span><span class="symbol">];</span>
<span class="normal">						</span><span class="keyword">else</span>
<span class="normal">							nodes</span><span class="symbol">[</span><span class="normal">i</span><span class="symbol">]</span><span class="normal"> </span><span class="symbol">=</span><span class="normal"> EMPTY</span><span class="symbol">.</span><span class="function">assoc</span><span class="symbol">(</span><span class="normal">shift </span><span class="symbol">+</span><span class="normal"> </span><span class="number">5</span><span class="symbol">,</span><span class="normal">  Util</span><span class="symbol">.</span><span class="function">hash</span><span class="symbol">(</span><span class="normal">array</span><span class="symbol">[</span><span class="normal">j</span><span class="symbol">]),</span><span class="normal"> array</span><span class="symbol">[</span><span class="normal">j</span><span class="symbol">],</span><span class="normal"> array</span><span class="symbol">[</span><span class="normal">j</span><span class="symbol">+</span><span class="number">1</span><span class="symbol">],</span><span class="normal"> addedLeaf</span><span class="symbol">);</span>
<span class="normal">						j </span><span class="symbol">+=</span><span class="normal"> </span><span class="number">2</span><span class="symbol">;</span>
<span class="normal">					</span><span class="cbracket">}</span>
<span class="normal">				</span><span class="keyword">return</span><span class="normal"> </span><span class="keyword">new</span><span class="normal"> </span><span class="function">ArrayNode</span><span class="symbol">(</span><span class="keyword">null</span><span class="symbol">,</span><span class="normal"> n </span><span class="symbol">+</span><span class="normal"> </span><span class="number">1</span><span class="symbol">,</span><span class="normal"> nodes</span><span class="symbol">);</span>
<span class="normal">			</span><span class="cbracket">}</span><span class="normal"> </span><span class="keyword">else</span><span class="normal"> </span><span class="cbracket">{</span>
<span class="normal">				</span><span class="comment">//we covered this...</span>
<span class="normal">			</span><span class="cbracket">}</span>
<span class="normal">		</span><span class="cbracket">}</span>
<span class="cbracket">}</span></tt></pre>

The first block up to the 'for' loop prepares the array of INodes that will be the children array of the new ArrayNode. We create a new BitmapIndexedNode easily by calling assoc on an empty persistent hash map (which is an easy way of creating an one-entry BitmapIndexedNode). Note that the indexing strategy for ArrayNodes is different from BitmapIndexedNode: we don't need the bitmap :) We simply use the 5-bit block corresponding to the level (again see the older post). 

Finally, the for-loop copies all the other nodes that are stored in this bitmap indexed node into the new array node. This entails mapping between the bitmap index scheme and the "5-bit hash-block" scheme. For each possible index in the bitmap node, only do work if the index is present in the bit map: <tt>if(((bitmap >>> i) & 1) != 0)</tt>. The variable <tt>j</tt> runs through the even indexes, and according to the invariant: null means that <tt>j+1</tt> is an INode, and non-null means it is a value in a map entry.

I am wondering if there is an optimization possible here? We are looping through all possible indices of the new ArrayNode, but we know that we only have to do something on the indices that correspond to an non-zero index in the bit map; and there can be only 15 of those... Would it be possible to iterate only those using some strategy? If I figure something out, I'll let you know :)
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>609</wp:post_id>
		<wp:post_date>2010-08-16 10:15:40</wp:post_date>
		<wp:post_date_gmt>2010-08-16 08:15:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assoc-and-clojures-persistenthashmap-part-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="persistent-data-structures"><![CDATA[persistent data structures]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1444</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Higher-Order » Blog Archive » Assoc and Clojure’s PersistentHashMap: part ii -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-08-16 11:28:42</wp:comment_date>
			<wp:comment_date_gmt>2010-08-16 09:28:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by ajlopez, Planet Clojure. Planet Clojure said: Assoc and Clojure’s PersistentHashMap: part ii http://goo.gl/fb/3AyK7 #clojure [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1445</wp:comment_id>
			<wp:comment_author><![CDATA[Today in the Intertweets (Aug. 16th Ed) | disclojure: all things clojure]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://disclojure.org/2010/08/16/today-in-the-intertweets-aug-16th-ed/</wp:comment_author_url>
			<wp:comment_author_IP>74.208.16.3</wp:comment_author_IP>
			<wp:comment_date>2010-08-17 09:43:11</wp:comment_date>
			<wp:comment_date_gmt>2010-08-17 07:43:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] and Clojure’s PersistentHashMap: part ii (here, via @planetclojure) &#8212; An in-depth look at how &#8216;assoc&#8217; works on persistent data [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1474</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander7]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld7</wp:comment_author_url>
			<wp:comment_author_IP>188.168.86.152</wp:comment_author_IP>
			<wp:comment_date>2011-07-20 04:37:38</wp:comment_date>
			<wp:comment_date_gmt>2011-07-20 02:37:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="http://www.trustedpillspot.com/?ml=buy-generic-LEVITRA buy@generic.LEVITRA" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic LEVITRA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1504</wp:comment_id>
			<wp:comment_author><![CDATA[pepijndevos]]></wp:comment_author>
			<wp:comment_author_email>pepijndevos@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.80.121.130</wp:comment_author_IP>
			<wp:comment_date>2012-09-11 22:16:16</wp:comment_date>
			<wp:comment_date_gmt>2012-09-11 20:16:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been reading your hashmap posts, implemented an old-style persistent hash map in C, read this post and the Java source code.

I tried removing ArrayMap from the picture, and it became about 30% slower. Why are there 2 kinds of them, and why is it faster?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1320</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1505</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>90.185.201.85</wp:comment_author_IP>
			<wp:comment_date>2012-09-11 22:18:08</wp:comment_date>
			<wp:comment_date_gmt>2012-09-11 20:18:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm not sure I understand the question about removing ArrayMap and it getting slower. Can you elaborate?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1504</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1506</wp:comment_id>
			<wp:comment_author><![CDATA[pepijndevos]]></wp:comment_author>
			<wp:comment_author_email>pepijndevos@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.80.121.130</wp:comment_author_IP>
			<wp:comment_date>2012-09-14 22:49:28</wp:comment_date>
			<wp:comment_date_gmt>2012-09-14 20:49:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, in BitmapIndexedNode.assoc either a BitmapIndexedNode or an ArrayNode is made. I removed that clause so that no array nodes are made at all. It is 30% slower that way. I'm curious what makes using ArrayNode so much faster.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1320</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1507</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>karl.krukow@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>90.185.201.85</wp:comment_author_IP>
			<wp:comment_date>2012-09-16 12:31:24</wp:comment_date>
			<wp:comment_date_gmt>2012-09-16 10:31:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry still don't completely follow :) If you don't convert to an ArrayNode how do you handle the BitmapIndexedNode growing beyond size 16? Also what exactly is getting slower? assoc or subsequent access? 

It sounds interesting what you're saying, so I'd like to understand precisely what you mean.

- Karl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1508</wp:comment_id>
			<wp:comment_author><![CDATA[pepijndevos]]></wp:comment_author>
			<wp:comment_author_email>pepijndevos@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.80.121.130</wp:comment_author_IP>
			<wp:comment_date>2012-09-18 10:20:00</wp:comment_date>
			<wp:comment_date_gmt>2012-09-18 08:20:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, in no special way. So either what I did is broken, or I just get BitmapIndexedNodes of up to 32 items.

I only tested assoc, so I'm not sure about access. You can try for yourself: https://gist.github.com/3741966]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1320</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1521</wp:comment_id>
			<wp:comment_author><![CDATA[wkb]]></wp:comment_author>
			<wp:comment_author_email>wkb@me.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.215.177.104</wp:comment_author_IP>
			<wp:comment_date>2012-12-02 11:01:26</wp:comment_date>
			<wp:comment_date_gmt>2012-12-02 09:01:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Inspired by your postings here's another implementation: http://www.censhare.com/en/aktuelles/censhare-labs/efficient-concurrent-long-set-and-map]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1745</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1537</wp:comment_id>
			<wp:comment_author><![CDATA[HD Gallery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.babesparadise.net/</wp:comment_author_url>
			<wp:comment_author_IP>119.62.206.220</wp:comment_author_IP>
			<wp:comment_date>2013-03-18 08:19:12</wp:comment_date>
			<wp:comment_date_gmt>2013-03-18 06:19:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>HD Gallery...</strong>

Neatly stack and organize these items in your garage or on your living room floor....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1545</wp:comment_id>
			<wp:comment_author><![CDATA[Dario Beser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.squidoo.com/</wp:comment_author_url>
			<wp:comment_author_IP>77.254.70.89</wp:comment_author_IP>
			<wp:comment_date>2013-04-11 15:55:54</wp:comment_date>
			<wp:comment_date_gmt>2013-04-11 13:55:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Louvenia Zaborski...</strong>

More or less I don’t read drug wherefore blogs....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1562</wp:comment_id>
			<wp:comment_author><![CDATA[Payday Loans]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://paydayloanshut1a.com/</wp:comment_author_url>
			<wp:comment_author_IP>122.118.117.225</wp:comment_author_IP>
			<wp:comment_date>2013-05-02 20:03:50</wp:comment_date>
			<wp:comment_date_gmt>2013-05-02 18:03:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Payday Loans...</strong>

Payday cash advances moreover help you get linked just these should so but right money to those with the biggest need?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1605</wp:comment_id>
			<wp:comment_author><![CDATA[polo ralph lauren]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://doudouneralphlauren.blog.com/</wp:comment_author_url>
			<wp:comment_author_IP>113.119.54.69</wp:comment_author_IP>
			<wp:comment_date>2013-05-15 15:09:30</wp:comment_date>
			<wp:comment_date_gmt>2013-05-15 13:09:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>polo ralph lauren...</strong>

mais le arsenal vs ac milan live Berdych égalise et soffre même une balle de match. Et lOM na plus quun point polo ralph lauren sur Nice? au cours de laquelle elle devait procéder à la désignation des 31 membres du Conseil dEtat, il sert arsenal barcel...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1627</wp:comment_id>
			<wp:comment_author><![CDATA[Hamilton clock]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://watchesforjp.com</wp:comment_author_url>
			<wp:comment_author_IP>120.43.5.19</wp:comment_author_IP>
			<wp:comment_date>2013-06-24 20:44:17</wp:comment_date>
			<wp:comment_date_gmt>2013-06-24 18:44:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Hamilton clock...</strong>

There's noticeably a bundle to learn about this. I assume you made certain nice factors in features also....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Clojure without the parentheses: looks a bit like ruby :)</title>
		<link>http://blog.higher-order.net/2010/08/31/clojure-without-parentheses/</link>
		<pubDate>Tue, 31 Aug 2010 20:23:05 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=647</guid>
		<description></description>
		<content:encoded><![CDATA[I gave an introductory talk about Clojure at Trifork yesterday:

<a href="https://secure.trifork.com/aarhus-2010/freeevent/index.jsp?eventOID=2713">https://secure.trifork.com/aarhus-2010/freeevent/index.jsp?eventOID=2713
</a>

I really wanted to focus on the core of Clojure: things like time/state management, functional programming, programming to contracts, meta programming, host interop, dynamics, interactivity and expressive power. I want people to see what Clojure is without being blinded by <a href="http://img264.imageshack.us/img264/1397/lispnd7.png">what is a mental blocker for some: the parentheses</a>. 

So as a fun exercise, I decided to remove (almost) all parentheses from code on my slides. As it turns out, the code looks much like ruby or python (just more functional and concise). All code on my slides can be turned into real Clojure code by inserting parens appropriate places (newlines and indentation help with "visual parsing"). The "commas are whitespace" is used to make it more readable (for comma-liking eyes). Obviously as we go into meta programming with macros this breaks down, but that is the last topic of the talk :)

<a href="http://blog.higher-order.net/files/clj/clojure-intro.pdf">slides</a>

Github repos:

<a href="http://github.com/krukow/swing-demo">http://github.com/krukow/swing-demo
</a>
<a href="http://github.com/krukow/ants-demo">http://github.com/krukow/ants-demo</a>
<a href="http://github.com/krukow/clojure-circuit-breaker">http://github.com/krukow/clojure-circuit-breaker</a>

Examples (I know the semantics aren't exactly the same, but I am considering syntax here). 
<div style="float:left">
<strong>Ruby</strong>:<pre><tt><code>ruby-1.9.2-p0 > def m
ruby-1.9.2-p0 ?>  {:name => "Karl", :age => 42}
ruby-1.9.2-p0 ?>  end
ruby-1.9.2-p0 > m
 => {:name=>"Karl", :age=>42} 
ruby-1.9.2-p0 > 
</code>
</tt></pre>
</div>
<div style="float:left; margin-left: 10px">
<strong>Clojure</strong>:<pre><tt><code>user> def p
         {:name "Fred", :age 42}
#'user/p
user> p
{:name "Fred", :age 42}
</code>
</tt></pre>
</div>
<div style="clear:both;" ></div>
<div style="float:left">
<strong>Ruby</strong>:<pre><tt><code>ruby-1.9.2-p0 > class Person
ruby-1.9.2-p0 ?>  attr :name,:age
ruby-1.9.2-p0 ?>  attr_writer :name,:age
ruby-1.9.2-p0 ?>  end
ruby-1.9.2-p0 > p = Person.new
 => #<Person:0x00000101073580> 
ruby-1.9.2-p0 > p.name="fred";p.age=42;
ruby-1.9.2-p0 > [p,p,p].map &:name
 => ["fred", "fred", "fred"] 
</code>
</tt></pre>
</div>
<div style="float:left; margin-left: 10px">
<strong>Clojure</strong>:<pre><tt><code>
user> map :name [p,p,p]
("Fred" "Fred" "Fred")
;;or
user> defrecord Person [name,age]
user.Person
user> def p 
         Person. "Fred", 42
#'user/p
user> map :name [p, p, p]
("Fred" "Fred" "Fred")
</code>
</tt></pre>
</div>
<div style="clear:both;" ></div>
<div style="float:left">
<strong>Ruby</strong>:<pre><tt><code>ruby-1.9.2-p0 > [p,p,p].map(&:age).reduce(&:+)
 => 126 
</code>
</tt></pre>
</div>
<div style="float:left; margin-left: 10px">
<strong>Clojure</strong>:<pre><tt><code>
reduce + 
   map :age [p p p] => 126
;;or
->> [p p p] 
          map :age
           reduce +
</code>
</tt></pre>
</div>
<div style="clear:both;" ></div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>647</wp:post_id>
		<wp:post_date>2010-08-31 22:23:05</wp:post_date>
		<wp:post_date_gmt>2010-08-31 20:23:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clojure-without-parentheses</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1466</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld2</wp:comment_author_url>
			<wp:comment_author_IP>188.168.83.120</wp:comment_author_IP>
			<wp:comment_date>2011-07-07 02:37:32</wp:comment_date>
			<wp:comment_date_gmt>2011-07-07 00:37:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="box.net/view_shared/byj29ux7zp?ml=buy-viagra-online buy@viagra.online" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic VIAGRA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1483</wp:comment_id>
			<wp:comment_author><![CDATA[Metaphor Miracles]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://metaphormiracles.com/</wp:comment_author_url>
			<wp:comment_author_IP>173.208.8.237</wp:comment_author_IP>
			<wp:comment_date>2011-09-21 03:26:19</wp:comment_date>
			<wp:comment_date_gmt>2011-09-21 01:26:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Other Metaphorical Miracles ......</strong>

[... old blogs and new, and here are some new ...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1547</wp:comment_id>
			<wp:comment_author><![CDATA[louis vuitton imitation belt]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://louisvuittonimitationwallet.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>113.240.57.254</wp:comment_author_IP>
			<wp:comment_date>2013-04-18 12:13:36</wp:comment_date>
			<wp:comment_date_gmt>2013-04-18 10:13:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>louis vuitton imitation belt...</strong>

Tribute Patchwork, this Marc Jacobs Robert Tote with Pouch is not that too over-the-top. I think actually it鈥檚 quite nice. As I always say that you can never go wrong...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1613</wp:comment_id>
			<wp:comment_author><![CDATA[louis vuitton replica bags]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://louisvuitton---replicabags.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>111.14.133.89</wp:comment_author_IP>
			<wp:comment_date>2013-05-26 13:00:28</wp:comment_date>
			<wp:comment_date_gmt>2013-05-26 11:00:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>louis vuitton replica bags...</strong>

Quality content is the key to attract the viewers to pay a visit the site Clojure without the parentheses: looks a bit like ruby :) | Higher-Order, that what this site is providing....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1615</wp:comment_id>
			<wp:comment_author><![CDATA[adidas jeremy scott shoes]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.adidasjeremyscott-xr.info/</wp:comment_author_url>
			<wp:comment_author_IP>5.149.106.217</wp:comment_author_IP>
			<wp:comment_date>2013-05-30 17:40:32</wp:comment_date>
			<wp:comment_date_gmt>2013-05-30 15:40:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>adidas jeremy scott shoes...</strong>

Wow~ what a deal will do business anytime Fast Shipping and excellent seller! I have many friends who buy nike air max jacket here, and they all feel amazing. Thank you so much. There are various designs of the quality nike air max Concords. The delive...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1621</wp:comment_id>
			<wp:comment_author><![CDATA[givenchy for men]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.reterirva.it/givenchy-rottweiler-t-shirt.html</wp:comment_author_url>
			<wp:comment_author_IP>177.98.20.210</wp:comment_author_IP>
			<wp:comment_date>2013-06-19 18:23:10</wp:comment_date>
			<wp:comment_date_gmt>2013-06-19 16:23:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>givenchy for men...</strong>

His avantgarde sensibility reached the mass market a year ago, when the designer, who once worked on staid Savile Row, created a collection for Target with a jumpsuit, minidresses and cropped, studded jackets and vests in black, gray, white, cobalt blu...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1622</wp:comment_id>
			<wp:comment_author><![CDATA[givenchy rottweiler t-shirt]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.villageflaminio.com/Givenchy-T-shirt.html</wp:comment_author_url>
			<wp:comment_author_IP>213.74.255.166</wp:comment_author_IP>
			<wp:comment_date>2013-06-19 18:38:37</wp:comment_date>
			<wp:comment_date_gmt>2013-06-19 16:38:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>givenchy rottweiler t-shirt...</strong>

And yet, oh irony of ironies, the cosseting, structured undergarments of the 1940s and 1950s have suddenly become en vogue with Ireland's upwardly mobile set. Thanks, in part, to the proliferation of burlesque clubs and nights across the land, the hum...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1623</wp:comment_id>
			<wp:comment_author><![CDATA[adidas soccer shoes]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.wjgnet.com/usa/nikesoccershoes.html</wp:comment_author_url>
			<wp:comment_author_IP>117.26.201.64</wp:comment_author_IP>
			<wp:comment_date>2013-06-20 00:29:30</wp:comment_date>
			<wp:comment_date_gmt>2013-06-19 22:29:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>adidas soccer shoes...</strong>

We buy nike soccer shoes Concords many times, and they are always of the best quality and service, thank you....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>vectormap and pvectormap</title>
		<link>http://blog.higher-order.net/2010/10/14/vectormap-and-pvectormap/</link>
		<pubDate>Thu, 14 Oct 2010 18:59:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=690</guid>
		<description></description>
		<content:encoded><![CDATA[So after attending Brian Goetz' talk and Rich Hickey's talk at JAOO Aarhus (eer, I mean <a href="http://gotocon.com/aarhus-2010/tracks/">Goto Aarhus</a>), I was thinking about how to construct Clojure data structures in parallel. 

To start with something that wasn't too complex, I decided to try and create a parallel version of mapping a function for vectors, i.e., an eager function that would take a vector and a function as input and produce a mapped vector as output (instead of a seq). This would replace a pattern I've often used:
<pre><tt><code>(into [] (map f vs))
</code></tt></pre>
with <tt><code>(vectormap f vs)</code></tt>, which avoids the overhead of constructing a seq and the reconstructing a vector by conj'ing from the seq. 

My initial goal was to produce a parallel version e.g., <tt><code>(pvectormap f vs)</code></tt>. As Rich has pointed out: Clojure's persistent data structures are excellent candidates for parallel processing using divide and conquer since they are trees which are already "sitting there divided!" Further immutability means no synchronization is needed. For example, <a href="http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/">remember that</a> PersistentVector is a balanced 32-way tree consisting of size 32 arrays of Objects (Nodes in the tree or the actual values stored in the vector). 

I decided to warm up by implementing vectormap, i.e., the serial version, first. 

<h2>Remember this?</h2>
<a href="http://olabini.com/blog/2010/07/the-jvm-language-summit-2010/">Apparently Rich Hickey presented this piece of code</a> at JVM Lang summit:
<pre><tt><code>static public Object ret1(Object ret, Object nil) {
    return ret;
}

public static int count(Object o){
    if(o instanceof Counted)
        return ((Counted) o).count();
    return countFrom(Util.ret1(o, o = null));
}
</code></tt></pre>
Has Rich gone mad? A two argument static method which simply returns the first argument?? When I first read Ola's blog post I simply couldn't figure out why he would use that code... However, when I was writing the vectormap code I was thinking: suppose the input vector is really large -- in fact, so large that we don't have memory enough to hold both the input and the output vector. Then vectormap would produce an OutOfMemoryError. But suppose the calling code didn't actually need the input vector what if we would release references to the elements of the input vector as we construct the corresponding mapped elements in the output vector (but without destroying the input vector)? We would need to only keep references to Node vectors we hadn't already processed, and then null out our local variables to those we had. 

This was when I realized that this is exactly what Rich's function can help with: when calling the <tt>countFrom</tt> function, he provides as argument the seq referenced by the local variable o via the ret1 function. The side effect of using ret1 is that since Java is strict,  both argument expressions to ret1 are evaluated (left-to-right), and consequently o is null'ed out. No more holding on the the head :) I could use this to only hold on to the vector arrays I hadn't processed. 

For example:
<pre><tt><code>private static Node mapNode(IFn f, Node node, int level) {
	if (node == null) {return null;}
	if (level == 0) {
		return new Node(null,mapArray(f, Util.ret1(node.array, node=null)));
	}
	Object[] newArr = new Object[node.array.length];
	System.arraycopy(node.array, 0, newArr, 0, node.array.length);
	node=null;
	level -= 5;
	for (int i=0;i&lt;newArr.length;i++) {
		newArr[i] = mapNode(f,Util.ret1((Node) newArr[i], newArr[i]=null),level);
	}
	return new Node(null,newArr);
}
</code></tt></pre>

This code is available in <a href="http://blog.higher-order.net/2010/06/11/clj-ds-clojures-persistent-data-structures-for-java/">my clj-ds project</a>.

<h2>Parallelize with Fork/Join</h2>
The pvectormap function uses <a href="http://gee.cs.oswego.edu/dl/concurrency-interest/">Fork/Join</a> to parallelize the mapping. I'm not sure about the granularity of the tasks, but I decided that processing a size 32 array was too small a task, and went with processing 32 size 32 arrays instead.

Starting at the root array of nodes, the code simply forks 32 tasks which recursively process each child of the root. This forking continues recursively until we hit the second lowest level in the tree -- this is processed sequentially using the mapNode function from above. This is implemented as a RecursiveTask in the Fork/Join framework. 

<pre><tt><code>static final class PMapTask extends RecursiveTask&lt;Node&gt; {
   
	private IFn f;
	private int shift;
	private Node node;

	public PMapTask(IFn f, int shift, Node node) {
		this.f = f;
		this.shift = shift;
		this.node = node;
	}
   
	public Node compute() {
		if (node == null) {
			return null;
		}
	   if (this.shift &lt;= 5) {
		   return mapNode(f,node,shift);
	   }

	   PMapTask[] tasks = new PMapTask[node.array.length];
	   shift -= 5;
	   for (int i=0;i&lt;tasks.length;i++) {
		   tasks[i] = new PMapTask(f,shift,(Node) node.array[i]);
	   }
	   invokeAll(tasks);
	   Node[] nodes = new Node[node.array.length];
	   try {
		   for (int i=0;i&lt;tasks.length;i++) {  
				nodes[i] = tasks[i].get();
		   }
		   return new Node(null,nodes);
	   } catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			throw new RuntimeException(e);
		} catch (ExecutionException e) {
			throw new RuntimeException(e);
		}
   }
}	
</code></tt></pre>

On my dual core system with a non trivial function f that actually does some work, using pvectormap is about twice as fast as vectormap: <a href="http://github.com/krukow/clj-ds/blob/master/test/com/trifork/clj_ds/test/PersistentVectorTest.java#L90">see PersistentVectorTest of clj-ds</a>.

Next stop: optimize and add vectormap and pvectormap to Clojure core :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>690</wp:post_id>
		<wp:post_date>2010-10-14 20:59:23</wp:post_date>
		<wp:post_date_gmt>2010-10-14 18:59:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vectormap-and-pvectormap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clj-ds"><![CDATA[clj-ds]]></category>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1450</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention vectormap and pvectormap | Higher-Order -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/blog.higher-order.net/2010/10/14/vectormap-and-pvectormap/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-10-14 23:39:20</wp:comment_date>
			<wp:comment_date_gmt>2010-10-14 21:39:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by William Gouvea, Planet Clojure. Planet Clojure said: vectormap and pvectormap http://goo.gl/fb/arIgI #clojure [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1451</wp:comment_id>
			<wp:comment_author><![CDATA[links for 2010-10-14 &laquo; Blarney Fellow]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blarneyfellow.wordpress.com/2010/10/15/links-for-2010-10-14/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.184</wp:comment_author_IP>
			<wp:comment_date>2010-10-15 02:34:52</wp:comment_date>
			<wp:comment_date_gmt>2010-10-15 00:34:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] vectormap and pvectormap | Higher-Order (tags: clojure concurrency vector java) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1452</wp:comment_id>
			<wp:comment_author><![CDATA[arj]]></wp:comment_author>
			<wp:comment_author_email>anders@iola.dk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>77.243.62.134</wp:comment_author_IP>
			<wp:comment_date>2010-10-19 17:44:37</wp:comment_date>
			<wp:comment_date_gmt>2010-10-19 15:44:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've also have run into the vectormap idiom a few times. When I first read about protocols I thought it would be a great way to fix this. But that'll probably never happen as the semantics are very diffferent (lazy vs not). I wonder if a protocol'ed version of map, filter and so on would be useful enough for people to code up. Sadly the default functions has taken up the good names, so we are left with something like nl-map ;-)

As for the parallel versions of standard functions then they would be very welcome. It doesn't have to be cpu critical tasks, as long as the subtask is I/O bound some way, then the parallel versions could still make quite a bit of sense. But as for all other parts of code, using them has to come down to profilling. It's just great that one can simply replace one function and get nice speed up :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>40</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1489</wp:comment_id>
			<wp:comment_author><![CDATA[PruittRachel25]]></wp:comment_author>
			<wp:comment_author_email>jinaborner@mail15.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>31.184.236.16</wp:comment_author_IP>
			<wp:comment_date>2012-01-01 14:14:05</wp:comment_date>
			<wp:comment_date_gmt>2012-01-01 12:14:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Every one knows that modern life is very expensive, nevertheless people need cash for various stuff and not every one earns big sums cash. Thus to receive good <a href="http://goodfinance-blog.com/topics/home-loans" rel="nofollow">home loans</a> or just short term loan will be a right way out.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>66</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1516</wp:comment_id>
			<wp:comment_author><![CDATA[Anisha Nissen]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mm.cs.sunysb.edu/groups/julianquintin/weblog/45f12/Could_it_be_Possible_to_accumulate_an_Xbox_No_price_or_Remarkable_Costeffective.html</wp:comment_author_url>
			<wp:comment_author_IP>142.54.171.28</wp:comment_author_IP>
			<wp:comment_date>2012-11-28 13:40:52</wp:comment_date>
			<wp:comment_date_gmt>2012-11-28 11:40:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>{Superb|Excellent|Exceptional|Fantastic|Outstanding|Wonderful|Great|Amazing|Terrific|Very good} {website|web site|site|internet site|web page|webpage|web-site|online site|blog|websites|web pages}...</strong>

usually a large admirer of linking to bloggers that I really like but really do not receive a number of hyperlink really enjoy from...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1517</wp:comment_id>
			<wp:comment_author><![CDATA[Anisha Nissen]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.brooklinema.gov/cap/index.php?title=User:PareteGray14</wp:comment_author_url>
			<wp:comment_author_IP>50.117.70.208</wp:comment_author_IP>
			<wp:comment_date>2012-11-28 13:58:55</wp:comment_date>
			<wp:comment_date_gmt>2012-11-28 11:58:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>{You should|You need to|You ought to|You must|It is best to|You'll want to|It's best to|Make sure you|You might want to|It is advisable to|You really should} {check|verify|examine|check out|test|look at|take a look at|investigate} this out...</strong>

Internet sites of interest we've a hyperlink to...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1570</wp:comment_id>
			<wp:comment_author><![CDATA[Sofortkredit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sofortkredit13.de</wp:comment_author_url>
			<wp:comment_author_IP>202.43.93.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-04 12:43:24</wp:comment_date>
			<wp:comment_date_gmt>2013-05-04 10:43:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Sofortkredit...</strong>

So sieh eben zu, wie du zurechtkomm Stunde Ich will mich nicht weiter einmischen, nur an das eine moechte ich dich noch mahnen: ohne Strenge wird kein Kind erzogen....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1596</wp:comment_id>
			<wp:comment_author><![CDATA[uk payday loans online]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://easy1paydayloansukx.info</wp:comment_author_url>
			<wp:comment_author_IP>78.24.219.201</wp:comment_author_IP>
			<wp:comment_date>2013-05-09 18:50:04</wp:comment_date>
			<wp:comment_date_gmt>2013-05-09 16:50:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>uk payday loans online...</strong>

Mach einen Kittel, wie ihn kleine Menschenjungen tragen, bettelte er....]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1614</wp:comment_id>
			<wp:comment_author><![CDATA[Payday Loans UK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://pay-day-loans-uk-1.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>91.236.75.28</wp:comment_author_IP>
			<wp:comment_date>2013-05-28 17:38:44</wp:comment_date>
			<wp:comment_date_gmt>2013-05-28 15:38:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Payday Loans UK...</strong>

noble money...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Clojure Users Group: Meetup in copenhagen, may 12th</title>
		<link>http://blog.higher-order.net/2011/04/29/703/</link>
		<pubDate>Fri, 29 Apr 2011 10:58:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=703</guid>
		<description></description>
		<content:encoded><![CDATA[I've managed to arrange a free <a href="http://www.clojure.dk">DCUG</a> meetup in Copenhagen in conjunction with Goto CPH. We will be several Clojure "stars": Christophe Grand and Lau Jensen, Stefan Richter and Stefan Tilkov.

Right now we have only one registration apart from the people above and myself - so come on :)

Time and date:  May 12th, Thursday 19:15 - 20:15 / Location: Room 202
Location: <a href="http://gotocon.com/cph-2011/venue/">GOTO Copenhagen 2011 takes place in Radisson Blu Falconer Hotel & Conference Center</a>

Info and registration: <a href="http://gotocon.com/cph-2011/presentation/UserGroup-Meeting:%20Clojure%20stars%20and%20you">http://gotocon.com/cph-2011/presentation/UserGroup-Meeting:%20Clojure%20stars%20and%20you</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>703</wp:post_id>
		<wp:post_date>2011-04-29 12:58:25</wp:post_date>
		<wp:post_date_gmt>2011-04-29 10:58:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>703</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1476</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander7]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://%/Endworld7</wp:comment_author_url>
			<wp:comment_author_IP>188.168.86.150</wp:comment_author_IP>
			<wp:comment_date>2011-07-22 19:34:12</wp:comment_date>
			<wp:comment_date_gmt>2011-07-22 17:34:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong><b><a href="http://www.trustedpillspot.com/?ml=buy-generic-LEVITRA buy@generic.LEVITRA" rel="nofollow">...</a></b></blockquote>...</strong>

Need cheap generic LEVITRA?...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Calabash: Functional testing for mobile apps</title>
		<link>http://blog.higher-order.net/2012/03/07/calabash-functional-testing-for-mobile-apps/</link>
		<pubDate>Wed, 07 Mar 2012 21:28:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=712</guid>
		<description></description>
		<content:encoded><![CDATA[I'm happy to announce that we at <a href="http://www.lesspainful.com">LessPainful</a> have just released Calabash as open source. Calabash is a library and toolchain for automated functional tests for iOS and Android. Read more in the introductory post: <a href="http://blog.lesspainful.com/2012/03/07/Calabash/">http://blog.lesspainful.com/2012/03/07/Calabash/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>712</wp:post_id>
		<wp:post_date>2012-03-07 23:28:24</wp:post_date>
		<wp:post_date_gmt>2012-03-07 21:28:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>calabash-functional-testing-for-mobile-apps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1503</wp:comment_id>
			<wp:comment_author><![CDATA[gobituvi1989]]></wp:comment_author>
			<wp:comment_author_email>umufupo@yahoo.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.131.127.61</wp:comment_author_IP>
			<wp:comment_date>2012-09-11 13:12:05</wp:comment_date>
			<wp:comment_date_gmt>2012-09-11 11:12:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[_, Your net web-site is quite a great deal worthy of a bookmark. Thanks for that terrific and cool report! <a href="http://google.com" rel="nofollow">...</a>]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1276</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pay it back!</title>
		<link>http://blog.higher-order.net/2012/09/12/pay-it-back/</link>
		<pubDate>Wed, 12 Sep 2012 10:49:03 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://blog.higher-order.net/?p=715</guid>
		<description></description>
		<content:encoded><![CDATA[I've written a blog post about integrating Clojure and Java over at <a href="http://www.conj-labs.eu/">Conj Labs</a>:

<a href="http://blog.conj-labs.eu/post/31355766700/pay-it-back">http://blog.conj-labs.eu/post/31355766700/pay-it-back</a>

I just realized the github gists don't read well on mobile phones :( ]]></content:encoded>
		<excerpt:encoded><![CDATA[I've written a blog post about integrating Clojure and Java over at <a href="http://www.conj-labs.eu/">Conj Labs</a>:

http://blog.conj-labs.eu/post/31355766700/pay-it-back

I just realized the github gists don't read well on mobile phones :( ]]></excerpt:encoded>
		<wp:post_id>715</wp:post_id>
		<wp:post_date>2012-09-12 12:49:03</wp:post_date>
		<wp:post_date_gmt>2012-09-12 10:49:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pay-it-back</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
